#+title: Customization of the One True Editor
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Initialization
** Package
Manager for Emacs Lisp packages.

#+begin_src emacs-lisp

  ;; Enable installation of packages from MELPA, ELPA and ORG:
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

  ;; Disable this default behavior in *Packages* buffer
  ;; "x" will install/remove package under point:
  (setq package-menu-use-current-if-no-marks nil)


  ;; Load use-package to manage package configuration:
  (require 'use-package)

  ;; Specify :ensure t in any future packages we'd like to declare and install:
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)


  ;; Adds a new :vc keywords to use-package declarations, with which
  ;; you can install packages in other ways.
  (unless (package-installed-p 'vc-use-package)
    (package-vc-install "https://github.com/slotThe/vc-use-package"))
  (require 'vc-use-package)
  ;; Note: if you're using a recent version of Emacs 30+, you don't need to
  ;; install this package and can instead use use-packages own :vc keyword.


  ;; Enable `hl-line-mode' for the specific list-packages major mode.
  (add-hook 'package-menu-mode-hook 'hl-line-mode)

#+end_src

** Startup settings
Emacs start-up settings.

#+begin_src emacs-lisp

  ;; Make startup faster by reducing the frequency of garbage collection:
  (setq gc-cons-threshold (* 50 1000 1000))


  ;; Increase the amount of data which Emacs reads from the process.
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  ;; To check the max value, check the output of:
  ;; cat /proc/sys/fs/pipe-max-size


  ;; Keeps folders where we edit files and the Emacs configuration folder clean.
  ;; no-littering to automatically set common paths to new user-emacs-directory:
  (use-package no-littering
    :config
    (require 'recentf)
    ;; Exclude all of the recentf files in the no-littering directories:
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)
    (setq
     ;; Place backup and autosave files in each directory:
     backup-directory-alist
     `((".*" . ,(no-littering-expand-var-file-name "backup/")))
     auto-save-file-name-transforms
     `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))


  ;; Move customization variables to a separate file and load it:
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)


  ;; Measure Emacs startup time (System Crafters):
  (defun sc/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'sc/display-startup-time)

#+end_src

* Faces
** Basic faces
The standard faces of Emacs.

#+begin_src emacs-lisp

  ;; Set the default face:
  (set-face-attribute 'default nil :font "Fira Code Retina" :height 101)
  ;; Set the variable pitch face:
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 125)
  ;; Set the fixed pitch face:
  (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height 102)


  (defun rf/toggle-font-lock-comment-face ()
    "Toggle the comment font between light and dark."
    (interactive)
    (if (string= (face-attribute 'font-lock-comment-face :foreground) "#5B6268")
        (custom-set-faces '(font-lock-comment-face
                            ((t (:foreground "#657076")))))
      (custom-set-faces '(font-lock-comment-face
                          ((t (:foreground "#5B6268")))))))

#+end_src

** All the icons faces
Manage how all the icons icons are coloured and themed.

#+begin_src emacs-lisp

  ;; Utility for using and formatting various Icon fonts within Emacs.
  (use-package all-the-icons
    :if (display-graphic-p))
  ;; You need to install the Resource Fonts included in this package, they
  ;; are available in the fonts directory. You can also install the latest
  ;; fonts for this package in the (guessed?) based on the OS by calling
  ;; the following function M-x all-the-icons-install-fonts.

#+end_src

** Nerd icons faces
Manage how Nerd Font icons are coloured and themed.

#+begin_src emacs-lisp

  ;; Library for easily using Nerd Font icons inside Emacs:
  (use-package nerd-icons)
  ;; This need a Nerd Font installed on your system.
  ;; You can use M-x nerd-icons-install-fonts or install it manually
  ;; to get Symbols Nerd Fonts Mono or another variant of your choice.


  ;; Icons for Corfu via nerd-icons
  (use-package nerd-icons-corfu
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

#+end_src

** Svg Lib
SVG tags, bars & icons.

#+begin_src emacs-lisp

  ;; svg-lib is an Emacs library that allows to create and display various SVG
  ;; objects, tags, icons, buttons, progress bars, progress pies and dates.
  (use-package svg-lib)

#+end_src

* Environment
** Mode line
Contents of the mode line.

#+begin_src emacs-lisp

  ;; A fancy and fast mode-line inspired by minimalism design:
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    ;; If the limit is too small, some info won't be displayed
    ((doom-modeline-window-width-limit 80)
     (doom-modeline-buffer-file-name-style 'truncate-except-project))

    :config
    (defun rf/doom-modeline-toggle-the-path ()
      "Toggle modeline name between truncate-except-project and truncate-all."
      (interactive)
      (if (string= doom-modeline-buffer-file-name-style
                   "truncate-except-project")
          (setq doom-modeline-buffer-file-name-style 'truncate-all)
        (setq doom-modeline-buffer-file-name-style 'truncate-except-project))))
  ;; This need a Nerd Font installed on your system.

#+end_src

** Theme
Options for doom-themes.

#+begin_src emacs-lisp

  ;; A theme megapack for GNU Emacs:
  (use-package doom-themes
    :config
    (load-theme 'doom-one t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config))

#+end_src

** Frames
Support for Emacs frames and window systems.

#+begin_src emacs-lisp

  ;; Make frame transparency overridable (System Crafters):
  (defvar sc/frame-transparency '(90 . 90))
  ;; Set frame transparency by default:
  (add-to-list 'default-frame-alist `(alpha . ,sc/frame-transparency))

  ;; Set specify frame size by default (since my screen is damaged):
  (add-to-list 'default-frame-alist '(width . 168))
  (add-to-list 'default-frame-alist '(height . 39))

  ;; Set position of the frame:
  ;; Fits on the monitor screen.
  (add-to-list 'default-frame-alist '(left . 1356))
  (add-to-list 'default-frame-alist '(top . 30))

  (defun rf/resize-frame-to-laptop ()
    "Resize the frame to the size of the laptop."
    (interactive)
    (set-frame-size (selected-frame) 168 39)
    (set-frame-position (selected-frame) 1356 30))

  ;; Updated version that opens the new frame at the same size. This is
  ;; because GNOME or another app intentionally offsets it slightly from
  ;; the previous window's position and size.
  (defun rf/make-frame-command-mod ()
    "Make a new frame, on the same terminal as the selected frame.
  If the terminal is a text-only terminal, this also selects the
  new frame.

  Updated version that opens the new frame at the same size. This is
  because GNOME or another app intentionally offsets it slightly from
  the previous window's position and size.

  NOTE: if the new frame opens in an odd size, it's because of the size
  of the last window, for example, if the width is 169, it will open in
  a tiny size, it's fixed by putting another size.

  When called from Lisp, returns the new frame."
    (interactive)
    (if (display-graphic-p)
        (let ((width (frame-width))
              (height (frame-height))
              (frame (make-frame)))
          (set-frame-size frame width height))))

#+end_src

** Windows
Window configuration.

#+begin_src emacs-lisp

  ;; Minimum width for splitting windows sensibly.
  (setq split-width-threshold 125) ; 140


  ;; Global minor mode that records the changes in the window configuration:
  (winner-mode 1)


  ;; GNU Emacs package for selecting a window to switch to.
  (use-package ace-window
    :bind ("M-O" . ace-window)
    :config
    ;; Call to action midway with fewer than three windows.
    (setq aw-dispatch-always t)
    (setq aw-keys '(?h ?t ?n ?s ?a ?o ?e ?u ?d ?i)))

#+end_src

** Display
How things are displayed in buffers.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t
        visible-bell t)

  ;; Disable or enable some minor modes:
  (scroll-bar-mode -1)
  (tool-bar-mode   -1)
  (tooltip-mode    -1)
  (menu-bar-mode   -1)
  (column-number-mode)


  ;; See a highlighted line of the “error” you just jumped to:
  (setq next-error-message-highlight t)


  ;; Not show the equivalent keybinding when M-x has one
  (setq suggest-key-bindings nil)

#+end_src

** Desktop
Save status of Emacs when you exit.

#+begin_src emacs-lisp

  ;; Enable Desktop-Save mode:
  (desktop-save-mode 1)

#+end_src

** Mouse
Input from the mouse.

#+begin_src emacs-lisp

  ;; This is useful if you have Mouse with Spin Wheel
  ;; 2022-03-21 great for logitech spin wheel (Xah)
  (setq mouse-wheel-progressive-speed nil)

  ;; Mouse scroll one line at a time:
  ;; (setq mouse-wheel-scroll-amount '(1))


  ;; Make paste at point (not cursor position) when middle-clicking:
  (setq mouse-yank-at-point t)

#+end_src

** Scrolling
Properties on the scroll cursor.

#+begin_src emacs-lisp

  ;; To scroll one line at a time:
  ;; Scroll up to this many lines, to bring point back on screen
  (setq scroll-conservatively 100)

#+end_src

** Cursor
Displaying text cursors.

#+begin_src emacs-lisp

  ;; Disable cursor blinking altogether:
  (blink-cursor-mode 0)

  ;; After type C-u C-SPC, can type C-SPC to cycle through the mark ring:
  (setq set-mark-command-repeat-pop t)


  ;; Multiple cursors for Emacs:
  (use-package multiple-cursors
    ;; Add a cursor based on continuous lines:
    :bind (("<kp-7>" . mc/mark-next-like-this)
           ("S-<kp-7>" . mc/mark-previous-like-this)
           ;; Add or remove a cursor where you click:
           ("C-S-<mouse-1>" . mc/add-cursor-on-click)))


  ;; Goto the point of the most recent edit in the buffer.
  (use-package goto-chg
    :commands goto-last-change)


  ;; Identical to C-x C-x but won't activate the region (Mickey Petersen).
  (defun mp/exchange-point-and-mark-no-activate ()
    "Identical to \\[exchange-point-and-mark] but will not activate the region.
  Remapped to `exchange-point-and-mark'."
    (interactive)
    (exchange-point-and-mark)
    (deactivate-mark nil))

#+end_src

** Minibuffer
Controlling the behavior of the minibuffer.

#+begin_src emacs-lisp

  ;; Answer the questions "yes" or "no" with "y" or "n".
  (setopt use-short-answers t)

  ;; Save what you enter into minibuffer prompts.
  (savehist-mode 1)


  ;; minibuffer-local-map bindings
  (keymap-set minibuffer-local-map "M-n" nil)
  (keymap-set minibuffer-local-map "M-p" nil)
  (keymap-set minibuffer-local-map "M-r" nil)
  (keymap-set minibuffer-local-map "C-," 'se/take-the-word-at-point)


  ;; Minibuffer, stop cursor going into prompt (Xah)
  (customize-set-variable
   'minibuffer-prompt-properties
   (quote (read-only t cursor-intangible t face minibuffer-prompt)))


  ;; Disable Abbrev mode while in the minibuffer
  (add-hook 'minibuffer-setup-hook
            (lambda () (abbrev-mode -1)))
  ;; Disable Repeat mode while in the minibuffer
  (add-hook 'minibuffer-setup-hook
            (lambda () (repeat-mode -1)))
  ;; Enable Repeat when exiting the minibuffer
  (add-hook 'minibuffer-exit-hook
            (lambda () (repeat-mode 1)))


  (defun se/take-the-word-at-point ()
    "Yank word at point in the buffer when entering text into minibuffer.

    https://emacs.stackexchange.com/questions/30490/key-binding-to-yank
    -word-char-under-cursor-into-minibuffer"
    (interactive)
    (with-selected-window (minibuffer-selected-window)
      (when-let ((word (current-word)))
        (with-selected-window (active-minibuffer-window)
          (insert word)))))

#+end_src

** Kmacro
Simplified keyboard macro user interface.

#+begin_src emacs-lisp

  ;; When practicing writing English sentences.
  (defalias 'rf/english-toggle-headers
    (kmacro "<tab> C-c C-n <tab> C-<right> C-<left>"))

  ;; Turn a single word into link ( word -> [[Word][word]] )
  (defalias 'rf/turn-org-word-into-link
    (kmacro "C-<right> C-<backspace> C-y ] [ C-y ] ] C-<left> C-<left>
    M-x u p c a s e - c h a r <return> [ ["))

  ;; Swap the ORG header with the text (org <-> text)
  ;;; Testing S-<end> binding (doc later if it works)
  (defalias 'rf/swap-org-header-with-text
    (kmacro "C-a C-SPC S-<end> S-<delete> C-<up> C-<right> C-<left> S-<insert> <return> S-<end> <delete>"))

#+end_src

* Editing
** Editing basics
Most basic editing facilities.

#+begin_src emacs-lisp

  ;; Typed text replaces the selection (region) if the selection is active.
  (delete-selection-mode 1)


  ;; Increase selected region by semantic units.
  (use-package expand-region
    :config
    (setq expand-region-contract-fast-key ")")
    (setq expand-region-reset-fast-key "+"))

  (defun rf/expand-region (argument)
    "Wrapper that calls expand region according to the current mode.

  If the major-mode is `org-mode', call the `xah-extend-selection'
  command, otherwise, call `er/expand-region'."
    (interactive "P")
    (if (eq major-mode 'org-mode)
        (xah-extend-selection)
      (call-interactively 'er/expand-region)))


  ;; Enable `downcase-region' command for future editing sessions
  (put 'downcase-region 'disabled nil)

#+end_src

** Killing
Killing and yanking commands.

#+begin_src emacs-lisp

  (defun rf/yank-recently-window (&optional prefix-arg)
    "Yank the selection in the most recently used window.

  With the universal-command, overwrites the whole most recently
  used window, but if the region is also active, overwrites only
  that region."
    (interactive "p")
    (unless (region-active-p)
      (error "There is no active region"))
    (let ((current-window-list (window-list))
          beg end)
      (while (not (eq (car current-window-list)
                      (get-mru-window 'visible nil t)))
        (unless (cdr current-window-list)
          (error "There's no other window or it's in other frame"))
        (setq current-window-list
              (cdr current-window-list)))
      (kill-ring-save (region-beginning) (region-end))
      (select-window (get-mru-window 'visible nil t))
      ;; If the universal-comand is activated.
      (when (eq prefix-arg 4)
        (if (use-region-p)
            (setq beg (region-beginning) end (region-end))
          (setq beg (point-min) end (point-max)))
        (goto-char beg)
        (push-mark end)
        (setq mark-active t)
        (delete-region beg end))
      (yank)))

#+end_src

** Indent
Indentation commands.

#+begin_src emacs-lisp

  ;; Use spaces instead of tabs for indentation:
  (setq-default indent-tabs-mode nil)

#+end_src

** Whitespace
Visualize blanks (TAB, (HARD) SPACE and NEWLINE).

#+begin_src emacs-lisp

  ;; Every buffer would be cleaned up before saving:
  (add-hook 'before-save-hook 'whitespace-cleanup)

#+end_src

** Yasnippet
Yet Another Snippet extension.

#+begin_src emacs-lisp

  ;; Allows to type an abbreviation and automatically expand it into templates:
  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode-on)
    :bind (:map yas-minor-mode-map
                ("TAB" . nil)
                ("<tab>" . nil)
                ("C-<tab>" . yas-expand))
    :config
    (yas-reload-all))


  ;; Yasnippet official snippet collections:
  (use-package yasnippet-snippets
    :after yasnippet)


  ;; A consulting-read interface for yasnippet.
  (use-package consult-yasnippet
    :commands consult-yasnippet)

#+end_src

** Tempo
Flexible template insertion.

#+begin_src emacs-lisp

  ;; Tiny template package, which uses the syntax of the Emacs Tempo library.
  (use-package tempel
    ;; Require trigger prefix before template name when completing.
    :custom
    (tempel-trigger-prefix "<")
    :bind (("C-<iso-lefttab>" . tempel-complete) ;; Alternative tempel-expand
           :map tempel-map
           ("TAB" . tempel-next)
           ("<backtab>" . tempel-previous))
    :init
    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))
    (add-hook 'conf-mode-hook 'tempel-setup-capf)
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf))

  ;; Add tempel-collection (package young doesn't have comprehensive coverage)
  (use-package tempel-collection)

#+end_src

** Isearch
Incremental search minor mode.

#+begin_src emacs-lisp

  ;; Show match numbers in the search prompt.
  (setq isearch-lazy-count t)


  ;; isearch-mode-map bindings
  (keymap-set isearch-mode-map "<left>" 'isearch-repeat-backward)
  (keymap-set isearch-mode-map "<right>" 'isearch-repeat-forward)
  (keymap-set isearch-mode-map "<up>" 'isearch-ring-retreat)
  (keymap-set isearch-mode-map "<down>" 'isearch-ring-advance)
  (keymap-set isearch-mode-map "C-S-h" 'isearch-repeat-backward)
  (keymap-set isearch-mode-map "C-S-n" 'isearch-repeat-forward)

  (keymap-set isearch-mode-map "C-v" 'isearch-yank-kill)
  (keymap-set isearch-mode-map "S-<insert>" 'isearch-yank-kill)

  (keymap-set isearch-mode-map "C-S-v" 'isearch-yank-pop-only)
  (keymap-set isearch-mode-map "M-S-<insert>" 'isearch-yank-pop-only)


  ;; minibuffer-local-isearch-map
  (keymap-set minibuffer-local-isearch-map "<left>"
              'isearch-reverse-exit-minibuffer)
  (keymap-set minibuffer-local-isearch-map "<right>"
              'isearch-forward-exit-minibuffer)
  (keymap-set minibuffer-local-isearch-map "C-S-h"
              'isearch-reverse-exit-minibuffer)
  (keymap-set minibuffer-local-isearch-map "C-S-n"
              'isearch-forward-exit-minibuffer)


  ;; for isearch-forward, make these equivalent:
  ;; space newline tab hyphen underscore
  (setq search-whitespace-regexp "[-_ \t\n]+")
  ;; But sometimes you want literal. This command makes it easy to toggle.
  (defun xah-toggle-search-whitespace ()
    "Set `search-whitespace-regexp' to nil or includes hyphen lowline tab newline.

    URL `http://xahlee.info/emacs/emacs/emacs_isearch_space.html'

    Created: 2019-02-22
    Version 2024-06-16"
    (interactive)
    (if search-whitespace-regexp
        (progn
          (setq search-whitespace-regexp nil)
          (message "search-whitespace-regexp set to nil."))
      (progn
        (setq search-whitespace-regexp "[-_ \t\n]+")
        (message "search-whitespace-regexp set to hyphen lowline whitespace"))))

#+end_src

** Cua
Emulate CUA key bindings including C-x and C-c.

#+begin_src emacs-lisp

  ;; cua-rectangle-mark-mode bindings
  (with-eval-after-load 'cua-rect
    (keymap-set cua--rectangle-keymap "C-c" 'cua-resize-rectangle-up)
    (keymap-set cua--rectangle-keymap "C-t" 'cua-resize-rectangle-down)
    (keymap-set cua--rectangle-keymap "C-h" 'cua-resize-rectangle-left)
    (keymap-set cua--rectangle-keymap "C-n" 'cua-resize-rectangle-right))

#+end_src

** Completion
Dynamic word-completion code.

#+begin_src emacs-lisp

  ;; Disable case-sensitivity for file and buffer matching.
  (setq read-file-name-completion-ignore-case t
        read-buffer-completion-ignore-case t
        completion-ignore-case t)

#+end_src

** Completion preview
In-buffer completion preview.

#+begin_src emacs-lisp

  ;; Enable Completion Preview mode in code buffers
  (add-hook 'prog-mode-hook #'completion-preview-mode)
  ;; also in text buffers
  (add-hook 'text-mode-hook #'completion-preview-mode)

  ;; Complete up to the longest common prefix of all completion candidates.
  (with-eval-after-load 'completion-preview
    ;; Org mode has a custom `self-insert-command'
    (push 'org-self-insert-command completion-preview-commands)
    ;; Paredit has a custom `delete-backward-char' command
    (push 'paredit-backward-delete completion-preview-commands)
    ;; Show the preview already after two symbol characters
    ;; (setq completion-preview-minimum-symbol-length 2)
    ;; Don't provide help for invalid completion input
    (setq completion-auto-help nil)
    ;; Convenient alternative
    (keymap-set completion-preview-active-mode-map "M-r"
                'completion-preview-complete))

#+end_src

* Convenience
** Convenience basics
Convenience features for faster editing.

#+begin_src emacs-lisp

  ;; Easy duplicate line or region, with comment out:
  (use-package duplicate-thing
    :bind ("S-<return>" . rf/duplicate-thing-wrapper)
    :config
    (defun rf/duplicate-thing-wrapper (n)
      "Duplicate line or region N times.
      Wrapper around `duplicate-thing' to place the pointer right at the
      end of the region, rather than after the region."
      (interactive "P")
      (duplicate-thing n)
      (goto-char (1- (point)))))


  ;; Minor mode that makes it possible to drag stuff (words, region, lines,...):
  (use-package drag-stuff
    :bind (("M-S-<up>" . drag-stuff-up)
           ("M-S-<down>" . drag-stuff-down)
           ("M-C" . drag-stuff-up)
           ("M-T" . drag-stuff-down))
    :config
    (drag-stuff-global-mode 1))

#+end_src

** Compare
Compare, view/edit files and tools such as diff and ediff (comprehensive visual interface to ‘diff’ and ‘patch’).

#+begin_src emacs-lisp

  ;;To make ediff to be horizontally split:
  (setq ediff-split-window-function 'split-window-horizontally)
  ;; To make ediff operate on selected-frame:
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)


  ;; Show difference between current file buffer and auto-save file (EmacsWiki):
  (defun ew/diff-auto-save-file ()
    "Get auto-save #file# difference with current buffer."
    (interactive)
    (diff (make-auto-save-file-name) (current-buffer) nil 'noasync))

#+end_src

** Buffer
Functions for buffer manipulation

#+begin_src emacs-lisp

  ;; Switch to the most recently selected buffer.
  ;; https://www.emacswiki.org/emacs/SwitchingBuffers
  (defun switch-to-previous-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))

#+end_src

** Ibuffer
Advanced replacement for ‘buffer-menu’.

#+begin_src emacs-lisp

  ;; List existing buffers with ibuffer instead of list-buffers:
  (defalias 'list-buffers 'ibuffer)

  ;; ibuffer-mode-map bindings
  (with-eval-after-load 'ibuffer
    (keymap-set ibuffer-mode-map "M-o" nil)
    (keymap-set ibuffer-mode-map "C-M-o" 'ibuffer-visit-buffer-1-window))

#+end_src

** Abbrev mode
Word abbreviations mode.

#+begin_src emacs-lisp

  ;; Make abbrev not add space
  (defun xah-abbrev-ahf ()
    "Abbrev hook function, used for `define-abbrev'.
  Our use is to prevent inserting the char that triggered expansion.
  Experimental.
  The “ahf” stand for abbrev hook function.
  Version 2016-10-24"
    t)

  (put 'xah-abbrev-ahf 'no-self-insert t)

#+end_src

** Company
Extensible inline text completion mechanism.

#+begin_src emacs-lisp

  ;; Company is a modular text completion framework for GNU Emacs.
  (use-package company
    :defer t
    ;; Enable `company-mode' after Eglot starts/stops managing a buffer.
    ;; :hook (eglot-managed-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

#+end_src

** Minad stack
*** Vertico
VERTical Interactive COmpletion.

#+begin_src emacs-lisp

  ;; Vertico provides a performant and minimalistic vertical completion UI
  ;; based on the default completion system.
  (use-package vertico
    :custom
    (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :bind (:map vertico-map
                ("C-S-h" . previous-history-element)
                ("C-S-n" . next-history-element)
                ("S-<prior>" . previous-history-element)
                ("S-<next>" . next-history-element))
    :init
    (vertico-mode)
    (setq completion-in-region-function #'consult-completion-in-region))


  ;; A few more useful configurations...
  (use-package emacs
    :custom
    ;; Hide commands in M-x which do not work in the current mode.  Vertico
    ;; commands are hidden in normal buffers.
    (read-extended-command-predicate #'command-completion-default-include-p))


  ;; Vertico extensions
  ;; Configure directory extension (`/' will be bound to `my/vertico-insert').
  (use-package vertico-directory
    :after vertico
    :ensure nil
    :demand t
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
                ("RET"   . vertico-directory-enter)
                ("DEL"   . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

  ;; The command vertico-repeat repeats the last completion session.
  (use-package vertico-repeat
    :after vertico
    :ensure nil
    :demand t
    :bind (("C-b" . vertico-repeat)
           :map vertico-map
           ("C-S-c" . vertico-repeat-previous)
           ("C-S-t" . vertico-repeat-next)
           ("<prior>" . vertico-repeat-previous)
           ("<next>" . vertico-repeat-next))
    :hook (minibuffer-setup . vertico-repeat-save)
    :config
    ;; Enable recursive minibuffers globally are genuinely useful. But
    ;; vertico-repeat will also work with recursive minibuffers disabled
    ;; (setq enable-recursive-minibuffers t)
    (setq vertico-repeat-filter '(vertico-repeat vertico-repeat-select))
    (add-to-list 'savehist-additional-variables 'vertico-repeat-history))

#+end_src

*** Orderless
Provides a completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.

#+begin_src emacs-lisp

  ;; Completion style for matching regexps in any order.
  (use-package orderless
    :demand t
    :config
    ;; Add separator that's allowed to occur in identifiers(useful in company)
    ;; (setq orderless-component-separator "[ &]")
    ;; Highlight the matching parts of the candidates.
    (defun just-one-face (fn &rest args)
      (let ((orderless-match-faces [completions-common-part]))
        (apply fn args)))
    (advice-add 'company-capf--candidates :around #'just-one-face)

    ;; Sophisticated configuration: Orderless style dispatchers (Ensure
    ;; that the $ regexp works with consult-buffer, and other things)
    (defun +orderless--consult-suffix ()
      "Regexp which matches the end of string with Consult tofu support."
      (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
          (format "[%c-%c]*$"
                  consult--tofu-char
                  (+ consult--tofu-char consult--tofu-range -1))
        "$"))

    ;; Recognizes the following patterns:
    ;; * .ext (file extension)
    ;; * regexp$ (regexp matching at end)
    (defun +orderless-consult-dispatch (word _index _total)
      (cond
       ;; Ensure that $ works with Consult commands, which
       ;; add disambiguation suffixes
       ((string-suffix-p "$" word)
        `(orderless-regexp . ,(concat (substring word 0 -1)
                                      (+orderless--consult-suffix))))
       ;; File extensions
       ((and (or minibuffer-completing-file-name
                 (derived-mode-p 'eshell-mode))
             (string-match-p "\\`\\.." word))
        `(orderless-regexp . ,(concat "\\." (substring word 1)
                                      (+orderless--consult-suffix))))))

    ;; Define orderless style with initialism by default
    (orderless-define-completion-style +orderless-with-initialism
      (orderless-matching-styles '(orderless-initialism
                                   orderless-literal orderless-regexp)))

    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          ;;; Enable partial-completion for files.
          ;;; Either give orderless precedence or partial-completion.
          completion-category-overrides
          '((file (styles partial-completion))
            ;; enable initialism by default for symbols
            (command (styles +orderless-with-initialism))
            (variable (styles +orderless-with-initialism))
            (symbol (styles +orderless-with-initialism)))
          ;; allow escaping space with backslash!
          orderless-component-separator #'orderless-escapable-split-on-space
          orderless-style-dispatchers (list #'+orderless-consult-dispatch
                                            #'orderless-affix-dispatch)))

#+end_src

*** Marginalia
Marginalia are helpful colorful annotations placed at the margin of the minibuffer for completion candidates.

#+begin_src emacs-lisp

  ;; Enrich existing commands with completion annotations.
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make
    ;; the binding available in the *Completions* buffer, add it
    ;; to the `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))


  ;; Add icons to completion candidates
  (use-package nerd-icons-completion
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

#+end_src

*** Consult
Provides search and navigation commands based on the Emacs completion function completing-read.

#+begin_src emacs-lisp

  (use-package consult
    :demand t
    :bind
    (("S-<kp-add>" . consult-buffer)
     ("C-n" . consult-buffer)
     ("C-S-n" . consult-buffer-other-window)
     ("C-f" . consult-line)
     ("C-S-f" . consult-line-multi)
     ("C-S-v" . consult-yank-from-kill-ring)
     ("M-S-<insert>" . consult-yank-from-kill-ring)
     ("C-&" . consult-register-store)
     ("C-%" . consult-register-load)
     ;; Minibuffer history
     :map minibuffer-local-map
     ("C-d" . consult-history)
     ;; Isearch integration
     :map isearch-mode-map
     ("C-M-f" . consult-isearch-history)
     ("C-f" . consult-line)          ; needed by consult-line to detect isearch
     ("C-S-f" . consult-line-multi)) ; needed by consult-line to detect isearch
    :init
    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Tweak the register preview for `consult-register-load',
    ;; `consult-register-store' and the built-in commands.  This improves
    ;; the register formatting, adds thin separator lines, register
    ;; sorting and hides the window mode line.
    (advice-add #'register-preview :override #'consult-register-window)
    (setq register-preview-delay 0.5)

    :config
    ;; Configure the narrowing key.
    (setq consult-narrow-key "<")

    ;; Binding settings
    (defvar-keymap consult-goto-map
      :doc "Keymap for the consult goto commands."
      :prefix 'consult-goto-map
      "h" #'consult-imenu
      "t" #'consult-imenu-multi
      "g" #'consult-outline
      "c" #'consult-org-heading
      "d" #'goto-last-change
      "f" #'consult-goto-line
      "n" #'consult-project-buffer
      "r" #'consult-bookmark
      "u" #'consult-man
      "i" #'consult-info
      "p" #'consult-flymake
      "." #'consult-flycheck
      "," #'consult-compile-error
      "m" #'consult-mark
      "b" #'consult-global-mark)
    (keymap-set global-map "C-p" consult-goto-map)

    (defvar-keymap consult-search-map
      :doc "Keymap for the consult search commands."
      :prefix 'consult-search-map
      "h" #'consult-grep
      "t" #'consult-ripgrep
      "n" #'consult-git-grep
      "g" #'consult-find
      "c" #'consult-fd
      "r" #'consult-locate
      "d" #'consult-history
      "f" #'consult-isearch-history
      "b" #'consult-complex-command
      "m" #'consult-minor-mode-menu
      "k" #'consult-keep-lines
      "j" #'consult-focus-lines
      "u" #'consult-yasnippet
      "e" #'consult-kmacro
      "}" #'consult-register)
    (keymap-set global-map "C-k" consult-search-map))

#+end_src

*** Corfu
Corfu enhances in-buffer completion with a small completion popup.

#+begin_src emacs-lisp

  ;; Corfu is flexibly customizable via corfu-* customization variables
  (use-package corfu
    :defer t
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; Treat the entire input as Orderless input
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; Remove the 'No match' phrase when there's no match
    (corfu-quit-no-match t)
    ;; Insert preview while move up/down in corfu-map
    ;; (corfu-preview-current 'insert) ; default value
    ;; Preselect candidate
    (corfu-preselect 'first)
    ;; Enable auto completion
    ;; (corfu-auto t)
    ;; (corfu-auto-prefix 2)
    ;; (corfu-auto-delay 0.0)
    ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
    :hook ((prog-mode . corfu-mode)
           (text-mode .corfu-mode))
    :bind (:map corfu-map
                ("RET" . nil))
    :init
    ;; Enable optional extension modes:
    (corfu-history-mode) ; or (corfu-prescient-mode 1) ; After installing
    ;; (global-corfu-mode)
    :config
    (add-hook 'eshell-mode-hook
              (lambda () (setq-local corfu-quit-at-boundary nil
                                     corfu-preselect 'first
                                     corfu-quit-no-match t
                                     corfu-auto nil)
                (corfu-mode)))
    (keymap-set corfu-map "RET" `( menu-item "" nil :filter
                                   ,(lambda (&optional _)
                                      (and (derived-mode-p
                                            'eshell-mode 'comint-mode)
                                           #'corfu-send))))
    ;; Transfer completion to the minibuffer
    (defun corfu-move-to-minibuffer ()
      (interactive)
      (pcase completion-in-region--data
        (`(,beg ,end ,table ,pred ,extras)
         (let ((completion-extra-properties extras)
               completion-cycle-threshold completion-cycling)
           (consult-completion-in-region beg end table pred)))))
    (keymap-set corfu-map "C-." #'corfu-move-to-minibuffer) ; "M-m" (default)
    (add-to-list 'corfu-continue-commands #'corfu-move-to-minibuffer)

    (defun rf/corfu-auto-toggle ()
      "Toggle `corfu-auto' variable."
      (interactive)
      (if corfu-auto
          (setq-local corfu-auto nil)
        (setq-local corfu-auto t))
      (corfu-mode 'toggle)
      (corfu-mode 'toggle)))

  ;; A few more useful configurations...
  (use-package emacs
    :custom
    ;; Disable Ispell completion function. Try `cape-dict' as an alternative.
    (text-mode-ispell-word-completion nil)
    ;; Hide commands in M-x which do not apply to the current mode.  Corfu
    ;; commands are hidden, since they are not used via M-x. This setting is
    ;; useful beyond Corfu.
    (read-extended-command-predicate #'command-completion-default-include-p))

  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    ;; :bind (("C-M-<tab>" . dabbrev-completion)
    ;;        ("C-M-<iso-lefttab>" . dabbrev-expand))
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
    ;; Available since Emacs 29 (Use `dabbrev-ignored-buffer-regexps'
    ;; on older Emacs)
    (add-to-list 'dabbrev-ignored-buffer-modes 'authinfo-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))

#+end_src

*** Cape
Cape provides Completion At Point Extensions which can be used in combination with Corfu, Company or the default completion UI.

#+begin_src emacs-lisp

  ;; Completion At Point Extensions
  (use-package cape
    ;; Bind prefix keymap providing all Cape commands under a mnemonic key.
    ;; Press 'C-c p ?' or 'C-S-j ?' to for help.
    :bind ("M-k" . cape-prefix-map)
    :init
    ;; Add to the global default value of `completion-at-point-functions'
    ;; which is used by `completion-at-point'. The order of the
    ;; functions matters, the first function returning a result wins.
    ;; Note that the list of buffer-local completion functions takes
    ;; precedence over the global list.
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-history)
    (add-hook 'completion-at-point-functions #'cape-elisp-block)
    (add-hook 'completion-at-point-functions #'cape-file))

  ;; Using Cape to tweak and combine Capfs
  ;; (defun my/ignore-elisp-keywords (cand)
  ;;   (or (not (keywordp cand))
  ;;       (eq (char-after (car completion-in-region--data)) ?:)))

  ;; (defun my/setup-elisp ()
  ;;   (setq-local completion-at-point-functions
  ;;               `(,(cape-capf-super
  ;;                   (cape-capf-predicate
  ;;                    #'elisp-completion-at-point
  ;;                    #'my/ignore-elisp-keywords)
  ;;                   #'cape-dabbrev)
  ;;                 cape-file)
  ;;               cape-dabbrev-min-length 5))
  ;; (add-hook 'emacs-lisp-mode-hook #'my/setup-elisp)

#+end_src

*** Embark
“Emacs Mini-Buffer Actions Rooted in Keymaps” makes it easy to choose a command to run based on what is near point, both during a minibuffer completion session and in normal buffers. You can think of ~embark-act~ as a keyboard-based version of a right-click contextual menu.

#+begin_src emacs-lisp

  ;; Conveniently act on minibuffer completions.
  (use-package embark
    :bind
    (("C-," . embark-act)
     ("C-." . embark-dwim)
     ("C-h B" . embark-bindings) ;; alternative for `describe-bindings'

     :map minibuffer-local-map
     ("C-n" . embark-select)
     ("C-A" . embark-act-all)
     ("C-E" . embark-export)
     ("C-S" . embark-collect)
     ("C-w" . re/embark-kill-buffer)

     ;; Keymaps for Embark variable actions.
     :map embark-expression-map
     ("p" . nil) ("n" . nil)
     ("c" . backward-list)
     ("t" . forward-list)
     ("," . kill-region)

     :map embark-identifier-map
     ("p" . nil) ("n" . nil)
     ("c" . embark-previous-symbol)
     ("t" . embark-next-symbol)
     :map embark-symbol-map
     ("RET" . helpful-callable)
     :map embark-variable-map
     ("RET" . helpful-variable)

     :map embark-heading-map
     ("c" . outline-previous-visible-heading)
     ("t" . outline-next-visible-heading)
     ("h" . outline-backward-same-level)
     ("n" . outline-forward-same-level)
     ("g" . outline-up-heading)
     ("r" . rf/outline-down-heading))
    :config
    ;; Key used for embark-cycle
    (setq embark-cycle-key ",")
    ;; Make the command a repeatable action inside the map
    (add-to-list 'embark-repeat-actions 'rf/outline-down-heading)
    ;; Kill-buffer from the minibuffer after M-x switch-to-buffer.
    ;; https://old.reddit.com/r/emacs/comments/11lqkbo/
    ;; weekly_tips_tricks_c_thread/jbe06qv/
    (defun re/embark-kill-buffer (&optional arg)
      (interactive "P")
      (if-let ((targets (embark--targets)))
          (let* ((target
                  (or (nth
                       (if (or (null arg) (minibufferp))
                           0
                         (mod (prefix-numeric-value arg) (length targets)))
                       targets)))
                 (type (plist-get target :type)))
            (cond
             ((eq type 'buffer)
              (let ((embark-pre-action-hooks))
                (embark--act 'kill-buffer target))))))))

  ;; Trick to enable embark-org-maps after requiring the org package
  (use-package embark
    :after (org embark)
    :bind(:map embark-org-src-block-map
               ("p" . nil) ("n" . nil)
               ("RET" . org-indent-block)
               ("c" . org-babel-previous-src-block)
               ("t" . org-babel-next-src-block)
               ("g". embark-org-copy-block-contents)
               ("f". org-babel-tangle)

               :map embark-org-item-map
               ("p" . nil) ("n" . nil)
               ("c" . org-previous-item)
               ("t" . org-next-item)

               :map embark-org-link-map
               ("p" . nil) ("n" . nil)
               ("RET" . org-insert-link)
               ("c" . org-previous-link)
               ("t" . org-next-link)

               :map embark-org-heading-map
               ("k" . nil) ("j" . nil) ("l" . nil) ("o" . nil)
               ("t" . outline-next-visible-heading)
               ("h" . outline-backward-same-level)
               ("n" . outline-forward-same-level)
               ("r" . rf/outline-down-heading)
               ("f" . org-insert-heading-respect-content)
               ("o" . org-todo)
               ("y" . org-refile)

               :map embark-org-table-cell-map
               ("^" . nil) ("v" . nil) ("<" . nil) (">" . nil)
               ("RET" . org-table-blank-field)
               ("c" . org-table-move-row-up)
               ("t" . org-table-move-row-down)
               ("h" . org-table-move-column-left)
               ("n" . org-table-move-column-right)
               ("j" . org-table-copy-down)
               ("q" . org-table-insert-hline)))

  ;; Provides exporters for several Consult commands and also tweaks the
  ;; behavior of many Consult commands when used as actions with embark-act
  ;; in subtle ways that you not notice, but make for a smoother experience.
  (use-package embark-consult
    ;; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

** Prescient
Simple but effective candidate sorting by usage.

#+begin_src emacs-lisp

  ;; General-purpose library for sorting and filtering candidates.
  (use-package prescient
    :config
    ;; Save recency and frequency rankings to disk, which let
    ;; them become better over time.
    (prescient-persist-mode 1))

  ;; For use with completion-preview-mode in Emacs 30:
  (with-eval-after-load 'completion-preview
    (setq completion-preview-sort-function #'prescient-completion-sort))

  ;; Configures filtering locally in the Vertico buffer.
  (use-package vertico-prescient
    :after vertico
    :config
    (vertico-prescient-mode 1))

  ;; Configures filtering locally in buffers in which corfu-mode is active.
  (use-package corfu-prescient
    :after corfu
    :config
    (corfu-prescient-mode 1))

  ;; Configures filtering locally in buffers in which company-mode is active.
  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode 1))

#+end_src

** Repeat and maps
*** Repeat
Convenient way to repeat previous commands.

#+begin_src emacs-lisp

  ;; Enable 'repeat-mode' to allow shorter key sequences.
  ;; Type 'C-x u u' instead of 'C-x u C-x u' to undo many changes.
  (repeat-mode)

  ;; Disable the "repeat suggest" message when repeat-mode is active
  ;;; (custom-set-variables '(repeat-echo-function 'ignore))

#+end_src

*** Meta
Manage repeat commands and maps triggered by the =Meta= key.

#+begin_src emacs-lisp

  (defvar-keymap char-word-movement-repeat-map
    :doc "Keymap for repeating character and word movement."
    :repeat t
    "g" #'backward-word
    "r" #'forward-word
    "c" #'previous-line
    "t" #'next-line
    "h" #'backward-char
    "n" #'forward-char)

  (defvar-keymap line-paragraph-movement-repeat-map
    :doc "Keymap for repeating line and paragraph movement."
    :repeat t
    "d" #'xah-beginning-of-line-or-block
    "b" #'xah-end-of-line-or-block)

  (defvar-keymap bracket-movement-repeat-map
    :doc "Keymap for repeating bracket movement."
    :repeat t
    "m" #'xah-backward-left-bracket
    "w" #'xah-forward-right-bracket
    "v" #'xah-goto-matching-bracket)

  (defvar-keymap beggining-end-movement-repeat-map
    :doc "Keymap for repeating beginning or end of buffer movement."
    :repeat t
    "s" #'ergoemacs-beginning-or-end-of-buffer
    "S" #'ergoemacs-end-or-beginning-of-buffer)

  (defvar-keymap char-word-delete-repeat-map
    :doc "Keymap to repeat commands to delete characters and words."
    :repeat t
    "." #'backward-kill-word
    "p" #'kill-word
    "e" #'delete-backward-char
    "u" #'delete-forward-char)

  (defvar-keymap line-whitespaces-delete-repeat-map
    :doc "Keymap to repeat commands to delete line and whitspaces."
    :repeat t
    "i" #'kill-line
    "j" #'xah-shrink-whitespaces)

  (defvar-keymap move-last-mark-repeat-map
    :doc "Keymap for repeating last mark movement."
    :repeat t
    "y" #'xah-pop-local-mark-ring)

  (defvar-keymap recenter-repeat-map
    :doc "Keymap to repeat `recenter' command."
    :repeat t
    "l" #'recenter-top-bottom)

  (defvar-keymap cyclic-window-frame-repeat-map
    :doc "Keymap for repeating window and frame rotatation."
    :repeat t
    "a" #'other-frame
    "o" #'other-window)

  (defvar-keymap toggle-case-repeat-map
    :doc "Keymap for repeating toggle letter case."
    :repeat t
    "'" #'xah-toggle-letter-case)

  (defvar-keymap selection-repeat-map
    :doc "Keymap for repeating selection commands."
    :repeat t
    "=" #'xah-select-block
    ")" #'xah-select-line)

  (defvar-keymap scroll-other-repeat-map
    :doc "Keymap to repeat scrolling another window."
    :repeat t
    "<prior>" #'scroll-other-window-down
    "<next>"  #'scroll-other-window
    "d" #'scroll-other-window-down
    "b" #'scroll-other-window)

#+end_src

*** Meta shift
Manage repeat commands  and maps triggered by the =Meta-Shift= key.

#+begin_src emacs-lisp

  (defvar-keymap exchange-point-repeat-map
    :doc "Keymap to repeat `mp/exchange-point-and-mark-no-activate' command."
    :repeat t
    "y" #'mp/exchange-point-and-mark-no-activate)

  (defvar-keymap scroll-repeat-map
    :doc "Keymap to repeat scrolling window."
    :repeat t
    "d" #'scroll-down-command
    "b" #'scroll-up-command)

  (defvar-keymap drag-stuff-repeat-map
    :doc "Keymap for repeating dragging stuff up and down."
    :repeat t
    "c" #'drag-stuff-up
    "t" #'drag-stuff-down)

  (defvar-keymap winner-meta-repeat-map
    :doc "Keymap to repeat winner key sequences using meta key."
    :repeat t
    "l" #'winner-undo
    "/" #'winner-redo)

  (defvar-keymap switch-resize-windows-repeat-map
    :doc "Keymap to switch, and resize windows."
    :repeat t
    :prefix 'switch-resize-windows-repeat-map
    ;; Switch windows.
    "c" #'windmove-up
    "t" #'windmove-down
    "h" #'windmove-left
    "n" #'windmove-right
    ;;  Resize windows.
    "C" #'enlarge-window
    "T" #'shrink-window
    "H" #'shrink-window-horizontally
    "N" #'enlarge-window-horizontally
    "b" #'balance-windows
    "m" #'window-swap-states)
  (keymap-set global-map "M-K" switch-resize-windows-repeat-map)

  (defvar-keymap rectangle-related-map
    :doc "Keymap for rectangle-related commands."
    :prefix 'rectangle-related-map
    "h" #'yank-rectangle
    "t" #'kill-rectangle
    "n" #'copy-rectangle-as-kill
    "g" #'picture-yank-rectangle-from-register
    "c" #'copy-rectangle-to-register)
  (keymap-set global-map "M-Q" rectangle-related-map)

#+end_src

*** Control
Manage repeat commands and maps triggered by the =Control= and =Control-Shift= key.

#+begin_src emacs-lisp

  ;; C-
  (defvar-keymap repeat-repeat-map
    :doc "Keymap to repeat repeat command."
    :repeat t
    "'" #'repeat)

  (defvar-keymap paste-repeat-map
    :doc "Keymap for repeating paste command."
    :repeat t
    "v" #'xah-paste-or-paste-previous)

    (defvar-keymap open-line-repeat-map
    :doc "Keymap to repeat open line command."
    :repeat t
    "o" #'open-line)

  (defvar-keymap undo-redo-repeat-map
    :doc "Keymap to repeat `undo' and `undo-redo' commands."
    :repeat t
    "z" #'undo
    "y" #'undo-redo)

  (defvar-keymap previous-next-user-buffer-repeat-map
    :doc "Keymap to repeat previous and next user buffer."
    :repeat t
    "<prior>" #'xah-previous-user-buffer
    "<next>"  #'xah-next-user-buffer)


  ;; C-S-
  (defvar-keymap scroll-other-cotrol-repeat-map
    :doc "Keymap to repeat scrolling another window using control key."
    :repeat t
    "d" #'scroll-other-window-down
    "b" #'scroll-other-window)

  (defvar-keymap previous-next-emacs-buffer-repeat-map
    :doc "Keymap to repeat previous and next emacs buffer."
    :repeat t
    "<prior>" #'xah-previous-emacs-buffer
    "<next>"  #'xah-next-emacs-buffer)

#+end_src

** Bind key
*** Meta
**** M-
Manage global =Meta= key combinations.

#+begin_src emacs-lisp

  (dolist (binds
           '(
             ;; ("M-$" . )
             ("M-&" . make-frame-command)
             ("M-[" . split-window-right)
             ("M-{" . delete-window)
             ("M-}" . query-replace)
             ("M-(" . replace-string)
             ("M-=" . xah-select-block)
             ("M-*" . rf/expand-region)
             ("M-)" . xah-select-line)
             ("M-+" . xah-select-text-in-quote)
             ;; ("M-]" . )
             ;; ("M-!" . )
             ;; ("M-#" . )
             ;; ("M-DEL" . )

             ;; ("M-<tab>" . +completion-at-point)
             ("M-;" . xah-fill-or-unfill)
             ("M-," . xah-delete-current-text-block)
             ("M-." . backward-kill-word)
             ("M-p" . kill-word)
             ("M-y" . xah-pop-local-mark-ring)
             ("M-f" . isearch-forward)
             ("M-g" . backward-word)
             ("M-c" . previous-line)
             ("M-r" . forward-word)
             ("M-l" . recenter-top-bottom)
             ;; ("M-/" . )
             ;; ("M-@" . )

             ;; ("M-CAPS" . )
             ("M-a" . other-frame)
             ("M-o" . other-window)
             ("M-e" . delete-backward-char)
             ("M-u" . delete-forward-char)
             ("M-i" . kill-line)
             ("M-d" . xah-beginning-of-line-or-block)
             ("M-h" . backward-char)
             ("M-t" . next-line)
             ("M-n" . forward-char)
             ("M-s" . ergoemacs-beginning-or-end-of-buffer)
             ;; ("M--" . )
             ;; ("M-\\" . )
             ;; ("M-RET" . )

             ("M-'" . xah-toggle-letter-case)
             ("M-q" . cua-rectangle-mark-mode)
             ("M-j" . xah-shrink-whitespaces)
             ;; ("M-k" . ^cape-prefix-map)
             ;; ("M-x" . +execute-extended-command)
             ("M-b" . xah-end-of-line-or-block)
             ("M-m" . xah-backward-left-bracket)
             ("M-w" . xah-forward-right-bracket)
             ("M-v" . xah-goto-matching-bracket)
             ;; ("M-z" . ~evilnc-comment-or-uncomment-lines)

             ;; ("M-SPC" . )
             ))
    (keymap-global-set (car binds) (cdr binds)))

#+end_src

**** M-S-
Manage global =Meta= + =Shift= key combinations.

#+begin_src emacs-lisp

  (dolist (binds
           '(
             ;; ("M-~" . )
             ("M-%" . delete-frame)
             ("M-7" . split-window-below)
             ("M-5" . delete-other-windows)
             ("M-3" . query-replace-regexp)
             ("M-1" . replace-regexp)
             ;; ("M-9" . )
             ;; ("M-0" . )
             ;; ("M-2" . )
             ;; ("M-4" . )
             ("M-6" . ispell-word)
             ;; ("M-8" . )
             ;; ("M-`" . )
             ;; ("M-S-<backspace>" . )

             ;; ("M-S-<tab>" . )
             ;; ("M-:" . )
             ("M-<" . eval-region)
             ("M->" . eval-expression)
             ;; ("M-P" . )
             ("M-Y" . mp/exchange-point-and-mark-no-activate)
             ("M-F" . xah-search-current-word)
             ;; ("M-G" . )
             ;; ("M-C" . ~drag-stuff-up)
             ;; ("M-R" . )
             ("M-L" . winner-undo)
             ("M-?" . winner-redo)
             ;; ("M-^" . )

             ;; ("M-S-CAPS" . )
             ;; ("M-A" . )
             ;; ("M-O" . ~ace-window)
             ;; ("M-E" . )
             ;; ("M-U" . )
             ("M-I" . wakib-backward-kill-line)
             ("M-D" . scroll-down-command)
             ;; ("M-H" . )
             ;; ("M-T" . ~drag-stuff-down)
             ;; ("M-N" . )
             ("M-S" . ergoemacs-end-or-beginning-of-buffer)
             ;; ("M-_" . )
             ;; ("M-|" . )
             ;; ("M-S-<return>" . ~rf/duplicate-thing-wrapper)

             ;; ("M-\"" . )
             ;; ("M-Q" . ^rectangle-related-map)
             ;; ("M-J" . )
             ;; ("M-K" . ^switch-resize-windows-repeat-map)
             ("M-X" . execute-extended-command-for-buffer)
             ("M-B" . scroll-up-command)
             ;; ("M-M" . )
             ;; ("M-W" . )
             ("M-V" . xah-change-bracket-pairs)
             ;; ("M-Z" . )

             ;; ("M-SPC" . )
             ))
    (keymap-global-set (car binds) (cdr binds)))

#+end_src

**** M-<cluster>
Manage global =Meta= + cluster key combinations.

#+begin_src emacs-lisp

  ;; M-<cluster>
  (dolist (binds
           '(
             ;; ("M-<up>" . )
             ;; ("M-<down>" . )
             ;; ("M-<left>" . )
             ;; ("M-<right>" . )

             ;; ("M-<home>" . +beginning-of-buffer-other-window)
             ;; ("M-<end>" . +end-of-buffer-other-window)
             ;; ("M-<prior>" . +scroll-other-window-down)
             ;; ("M-<next>" . +scroll-other-window)

             ;; ("M-<insert>" . )
             ;; ("M-<delete>" . )
             ))
    (keymap-global-set (car binds) (cdr binds)))

  ;; M-S-<cluster>
  (dolist (binds
           '(
             ;; ("M-<up>" . )
             ;; ("M-S-<up>" . ~drag-stuff-up)
             ;; ("M-S-<down>" . ~drag-stuff-down)
             ;; ("M-S-<left>" . )
             ;; ("M-S-<right>" . )

             ;; ("M-S-<home>" . )
             ;; ("M-S-<end>" . )
             ;; ("M-S-<prior>" . )
             ;; ("M-S-<next>" . )

             ;; ("M-S-<insert>" . ~consult-yank-from-kill-ring)
             ("M-S-<delete>" . xah-cut-all-or-region)
             ))
    (keymap-global-set (car binds) (cdr binds)))

#+end_src

**** C-M-
Manage global =Meta= + =Control= key combinations.

#+begin_src emacs-lisp

  (dolist (binds
           '(
             ("C-M-f" . isearch-backward)
             ("C-M-<insert>" . xah-copy-all-or-region)
             ))
    (keymap-global-set (car binds) (cdr binds)))

#+end_src

*** Control
**** C-
Manage global =Control= key combinations.

#+begin_src emacs-lisp

  (dolist (binds
           '(
             ;; ("C-`" . )
             ;; ("C-$" . )
             ;; ("C-&" . ~consult-register-store)
             ("C-[" . copy-to-register)
             ;; ("C-{" . )
             ;; ("C-}" . ~magit-status)
             ;; ("C-(" . )
             ("C-=" . calc)
             ("C-*" . eshell)
             ("C-)" . dired-jump)
             ("C-+" . ibuffer)
             ;; ("C-]" . +esc)
             ;; ("C-!" . )
             ;; ("C-#" . )
             ;; ("C-DEL" . +backward-kill-word)

             ;; ("C-<tab>" . ~yas-expand)
             ;; ("C-;" . )
             ;; ("C-," . ~embark-act)
             ;; ("C-." . ~embark-dwim)
             ;; ("C-p" . ^consult-goto-map)
             ("C-y" . undo-redo)
             ;; ("C-f" . ~consult-line)
             ;; ("C-g" . +keyboard-quit)
             ;; ("C-c" . +mode-specific-map)
             ("C-r" . find-file)
             ;; ("C-l" . )
             ;; ("C-/" . )
             ;; ("C-@" . )

             ;; ("C-caps" . )
             ("C-a" . mark-whole-buffer)
             ;; ("C-o" . +open-line)
             ("C-e" . nil)
             ;; ("C-u" . +universal-argument)
             ;; ("C-i" . +tab)
             ("C-d" . nil)
             ;; ("C-h" . +help-map)
             ("C-t" . switch-to-previous-buffer)
             ;; ("C-n" . ~consult-buffer)
             ("C-s" . save-buffer)
             ("C--" . save-some-buffers)
             ;; ("C-\\" . )
             ;; ("C-RET" . )

             ("C-'" . repeat)
             ;; ("C-q" . +quoted-insert)
             ;; ("C-j" . +newline indent (major-modes))
             ;; ("C-k" . ^consult-search-map)
             ;; ("C-x" . +ctl-x-map)
             ;; ("C-b" . ~vertico-repeat)
             ;; ("C-m" . +newline)
             ("C-w" . xah-close-current-buffer)
             ("C-v" . xah-paste-or-paste-previous)
             ("C-z" . undo)

             ;; ("C-SPC" . +set-mark-command)
             ))
    (keymap-global-set (car binds) (cdr binds)))

#+end_src

**** C-S-
Manage global =Control= + =Shiftkey= combinations.

#+begin_src emacs-lisp

  (dolist (binds
           '(
             ;; ("C-~" . )
             ;; ("C-%" . ~consult-register-load)
             ("C-7" . insert-register)
             ;; ("C-5" . )
             ;; ("C-3" . )
             ;; ("C-1" . )
             ;; ("C-9" . )
             ("C-0" . shell-command)
             ;; ("C-2" . )
             ;; ("C-4" . )
             ;; ("C-6" . )
             ;; ("C-8" . )
             ;; ("C-`" . )
             ;; ("C-S-<backspace>" . )

             ;; ("C-<iso-lefttab>" . ~tempel-complete)
             ;; ("C-:" . )
             ("C-<" . widen)
             ("C->" . xah-narrow-to-region)
             ;; ("C-S-p" . )
             ;; ("C-S-y" . )
             ;; ("C-S-f" . ~consult-line-multi)
             ;; ("C-S-g" . )
             ;; ("C-S-c" . )
             ("C-S-r" . find-file-other-window)
             ;; ("C-S-l" . )
             ;; ("C-?" . )
             ;; ("C-^" . )

             ;; ("C-S-CAPS" . )
             ;; ("C-S-a" . )
             ("C-S-o" . xah-open-in-external-app)
             ;; ("C-S-e" . )
             ;; ("C-S-u" . )
             ;; ("C-S-i" . )
             ("C-S-d" . scroll-other-window)
             ;; ("C-S-h" . )
             ("C-S-t" . xah-open-last-closed)
             ;; ("C-S-n" . ~consult-buffer-other-window)
             ("C-S-s" . write-file)
             ("C-_" . save-buffers-kill-terminal)
             ;; ("C-|" . )
             ;; ("C-S-<return>" . )

             ;; ("C-\"" . )
             ;; ("C-S-q" . ^google-translate-map)
             ;; ("C-S-j" . )
             ;; ("C-S-k" . )
             ;; ("C-S-x" . )
             ("C-S-b" . scroll-other-window-down)
             ;; ("C-S-m" . )
             ;; ("C-S-w" . )
             ;; ("C-S-v" . ~consult-yank-from-kill-ring)
             ;; ("C-S-z" . )
             ;; ("C-S-SPC" . )
             ))
    (keymap-global-set (car binds) (cdr binds)))

#+end_src

**** C-<cluster>
Manage global =Control= + cluster key combinations.

#+begin_src emacs-lisp

  ;;C-<cluster>
  (dolist (binds
           '(
             ;; ("C-<up>" . +backward-paragrap)
             ;; ("C-<down>" . +forward-paragrap)
             ;; ("C-<left>" . +left-word)
             ;; ("C-<right>" . +right-word)

             ;; ("C-<home>" . +beginning-of-buffer)
             ;; ("C-<end>" . +end-of-buffer)
             ("C-<prior>" . xah-previous-user-buffer)
             ("C-<next>" . xah-next-user-buffer)

             ("C-<insert>" . xah-copy-line-or-region)
             ;; ("C-<delete>" . +kill-word)
             ))
    (keymap-global-set (car binds) (cdr binds)))

  ;;C-S-<cluster>
  (dolist (binds
           '(
             ;; ("C-S-<up>" . )
             ;; ("C-S-<down>" . )
             ;; ("C-S-<left>" . )
             ;; ("C-S-<right>" . )

             ;; ("C-S-<home>" . )
             ;; ("C-S-<end>" . )
             ("C-S-<prior>" . xah-previous-emacs-buffer)
             ("C-S-<next>" . xah-next-emacs-buffer)

             ("C-S-<insert>" . rf/yank-recently-window)
             ;; ("C-S-<delete>" . )
             ))
    (keymap-global-set (car binds) (cdr binds)))

#+end_src

*** Cluster
Manage global cluster key combinations.

#+begin_src emacs-lisp

  (dolist (binds
           '(
             ("<escape>" . keyboard-escape-quit)

             ("S-<insert>" . xah-paste-or-paste-previous)
             ("S-<delete>" . xah-cut-line-or-region)
             ))
    (keymap-global-set (car binds) (cdr binds)))

#+end_src

*** Keypad
Manage global keypad key combinations.

#+begin_src emacs-lisp

  ;; kp-
  (dolist (binds
           '(
             ;; ("<kp-Bloq>"     . #leader keyd)
             ;; ("<kp-divide>"   . )
             ;; ("<kp-multiply>" . )
             ;; ("<kp-subtract>" . #Hide all normal windows)

             ;; ("<kp-7>" . ~mc/mark-next-like-this)
             ;; ("<kp-8>" . )
             ("<kp-9>" . kmacro-end-or-call-macro)
             ("<kp-add>" . switch-to-previous-buffer)

             ("<kp-4>" . rf/find-or-switch-to-javascript)
             ("<kp-5>" . rf/find-or-switch-to-shell)
             ("<kp-6>" . rf/find-or-switch-to-emacs-elisp)

             ("<kp-1>" . rf/find-or-switch-to-todo)
             ("<kp-2>" . eshell)
             ("<kp-3>" . scratch-buffer)

             ("<kp-0>" . other-window)
             ;; ("<kp-decimal>" . #Click)
             ;; ("<kp-enter>" . #temporarily most used command)
             ))
    (keymap-global-set (car binds) (cdr binds)))

  ;; kp-S-
  (dolist (binds
           '(
             ;; ("S-<kp-Bloq>" . )
             ;; ("S-<kp-divide>" . )
             ;; ("S-<kp-multiply>" . )
             ;; ("S-<kp-subtract>" . )

             ;; ("S-<kp-7>" . ~mc/mark-previous-like-this)
             ;; ("S-<kp-8>" . )
             ("S-<kp-9>" . kmacro-start-macro)
             ;; ("S-<kp-add>" . ~consult-buffer)

             ("S-<kp-4>" . rf/find-or-switch-to-html-css-seo)
             ("S-<kp-5>" . rf/find-or-switch-to-gnu-linux)
             ("S-<kp-6>" . rf/find-or-switch-to-init)

             ("S-<kp-1>" . rf/find-or-switch-to-archive)
             ;; ("S-<kp-2>" . #Switch to application 4 (terminal))
             ("S-<kp-3>" . rf/find-or-switch-to-english)

             ;; ("S-<kp-0>" . )
             ;; ("S-<kp-decimal>" . )
             ;; ("S-<kp-enter>" . )
             ))
    (keymap-global-set (car binds) (cdr binds)))

  ;; kp-C-
  (dolist (binds
           '(
             ;; ("C-<kp-Bloq>" . )
             ;; ("C-<kp-divide>" . )
             ;; ("C-<kp-multiply>" . )
             ;; ("C-<kp-subtract>" . )

             ;; ("C-<kp-7>" . )
             ;; ("C-<kp-8>" . )
             ;; ("C-<kp-9>" . )
             ;; ("C-<kp-add>" . )

             ;; ("C-<kp-4>" . )
             ;; ("C-<kp-5>" . )
             ;; ("C-<kp-6>" . )

             ;; ("C-<kp-1>" . )
             ;; ("C-<kp-2>" . )
             ("C-<kp-3>" . rf/find-or-switch-to-layout-maps)

             ;; ("C-<kp-0>" . )
             ;; ("C-<kp-decimal>" . )
             ;; ("C-<kp-enter>" . )
             ))
    (keymap-global-set (car binds) (cdr binds)))

#+end_src

*** Mouse
Manage global mouse key combinations.

#+begin_src emacs-lisp

  ;; mouse-
  (dolist (binds
           '(
             ("<mouse-8>" . xah-previous-user-buffer)
             ))
    (keymap-global-set (car binds) (cdr binds)))


  ;; shift + click select region
  ;; turn off font dialog
  (keymap-global-set "S-<down-mouse-1>" 'ignore)
  (keymap-global-set "S-<mouse-1>" 'mouse-set-point)

  ;; This is a trick. When you're in Emacs and switch apps using the Gnome
  ;; command bound to s-<tab>, the superkey gets stuck in Emacs, so this
  ;; trick allows you to navigate in Emacs while in the other app.
  (keymap-global-set "s-<wheel-up>" 'mwheel-scroll)
  (keymap-global-set "s-<wheel-down>" 'mwheel-scroll)

#+end_src

** Remap
Manage remap key keybindings.

#+begin_src emacs-lisp

  ;; Remap movements
  (keymap-global-set "<remap> <beginning-of-buffer>"
                     'ergoemacs-beginning-or-end-of-buffer)
  (keymap-global-set "<remap> <end-of-buffer>"
                     'ergoemacs-end-or-beginning-of-buffer)
  ;; (keymap-global-set "<remap> <move-beginning-of-line>"
  ;;                    'xah-beginning-of-line-or-block)
  ;; (keymap-global-set "<remap> <move-end-of-line>"
  ;;                    'xah-end-of-line-or-block)

  ;; delete-forward-char deletes by grapheme clusters. Useful since
  ;; e.g. if point is before an Emoji sequence, pressing '<Delete>'
  ;; will delete the entire sequence, not just a single character.
  (keymap-global-set "<remap> <delete-char>" 'delete-forward-char)

  ;; Remap cut, copy, paste
  (keymap-global-set "<remap> <kill-region>" 'xah-cut-line-or-region)
  (keymap-global-set "<remap> <kill-ring-save>" 'xah-copy-line-or-region)
  (keymap-global-set "<remap> <yank>" 'xah-paste-or-paste-previous)
  (keymap-global-set "<remap> <yank-pop>" 'consult-yank-pop)

  ;; Trick to be able to use `kill-ring-save' as a copy in CUA rec mode
  (with-eval-after-load 'cua-rect
    (keymap-set cua--rectangle-keymap "<remap> <kill-ring-save>"
                'kill-ring-save))

  (keymap-global-set "<remap> <exchange-point-and-mark>"
                     'mp/exchange-point-and-mark-no-activate)

  (keymap-global-set "<remap> <make-frame-command>" 'rf/make-frame-command-mod)

#+end_src

* Files
** Save place
Automatically save place in files.

#+begin_src emacs-lisp

  ;; Automatically save place in each file:
  (save-place-mode 1)

#+end_src

** Auto revert
Revert individual buffers when files on disk change.

#+begin_src emacs-lisp

  ;; Reverts any buffer associated with a file when it changes on disk:
  (global-auto-revert-mode 1)

#+end_src

** Dired
Directory editing.

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil ;; otherwise package.el will fetch it (INS)
    :bind (:map dired-mode-map
           ("DEL" . dired-up-directory)

           ("c" . dired-previous-line)
           ("t" . dired-next-line)
           ("p" . dired-do-compress-to)
           ("n" . dired-toggle-marks)
           ("z" . ew/dired-dotfiles-toggle)
           ("C-z" . dired-undo)

           ("_" . xah-dired-rename-space-to-underscore)
           ("-" . xah-dired-rename-space-to-hyphen))
    :custom
    ;; Changes the order in which the directories are displayed.
    (dired-listing-switches "-aoht --group-directories-first")
    :config
    ;; When visiting a new sub-directory the old buffer will be killed:
    (setq dired-kill-when-opening-new-dired-buffer t)
    ;; Reverts the destination Dired buffer after
    ;; performing some dired-operations:
    (setq dired-do-revert-buffer t)
    ;; Displays the available space on the directory’s disk on a separate line
    (setq dired-free-space 'separate)
    ;; Toggle showing dot files in Dired mode (EmacsWiki):
    (defun ew/dired-dotfiles-toggle ()
      "Show/hide dot-files"
      (interactive)
      (when (equal major-mode 'dired-mode)
        ;; if currently showing
        (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p)
            (progn
              (set (make-local-variable 'dired-dotfiles-show-p) nil)
              (message "h")
              (dired-mark-files-regexp "^\\\.")
              (dired-do-kill-lines))
          (progn (revert-buffer) ; otherwise just revert to re-show
                 (set (make-local-variable 'dired-dotfiles-show-p) t))))))

  ;; Shows icons for each file in dired mode:
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode)
    :config
    ;; Display Dired icons in color:
    (setq all-the-icons-dired-monochrome nil))

#+end_src

** Recentf
Maintain a menu of recently opened files.

#+begin_src emacs-lisp

  ;; Remembering recently edited files:
  (use-package recentf
    :config
    (setq recentf-max-saved-items 50)
    (setq desktop-auto-save-timeout 300)
    (recentf-mode 1))

#+end_src

** Persistent scratch
Preserve the state of scratch buffers across Emacs sessions

#+begin_src emacs-lisp

  ;; Preserves the state of scratch buffers accross Emacs sessions:
  (use-package persistent-scratch
    :config
    ;; Enable autosave and restore the last saved state:
    (persistent-scratch-setup-default)
    (setq persistent-scratch-autosave-interval 60))

#+end_src

** Treemacs
Shows the file system outlines of your projects in a simple tree layout allowing quick navigation and exploration.

#+begin_src emacs-lisp

  ;; A tree layout file explorer for Emacs.
  (use-package treemacs
    :bind (:map treemacs-mode-map
                ("M-<tab>" . treemacs-TAB-action))
    :config
    (treemacs-resize-icons 15))

#+end_src

** Find file
Finding files.

#+begin_src emacs-lisp

  (defvar rf/main-file "/home/rich/Documents/todo.org"
    "The main file to switch to.
  This is one of the most common files, depending on what
  you'reworking on at the time. Its purpose is to add a
  shortcut to quickly switch to it.")

  (defvar rf/list-of-main-files
    '(("todo.org" . "/home/rich/Documents/todo.org")
      ("emacs-elisp.org" . "/home/rich/Documents/emacs-elisp.org")
      ("shell.org" . "/home/rich/Documents/shell.org")
      ("init.org" . "/home/rich/.emacs.d/init.org")
      ("english.org" . "/home/rich/Documents/english.org"))
    "List of main files.
  This is a list of the most frequently used files. It's used to
  configure an easy-to-use shortcut to quickly switch to this file.
  Each element is (file-name . file-path).")

  (defun rf/set-the-main-file ()
    "Choose a file to set in variable `rf/main-file'."
    (interactive)
    (let ((file-name (completing-read
                      "Choose the main document: "
                      (mapcar (lambda (f) (car f)) rf/list-of-main-files)
                      nil t)))
      (dolist (cell rf/list-of-main-files)
        (when (string= (car cell) file-name)
          (setq rf/main-file (cdr cell))))))

  (defun rf/find-or-switch-to-file (file-path)
    "Find or switch to the FILE-PATH file."
    (let ((buffer (find-buffer-visiting file-path)))
      (if (file-exists-p file-path)
          (if buffer
              (switch-to-buffer buffer)
            (find-file file-path))
        (message "The file does not exist: %s" file-path))))

  (defun rf/find-or-switch-to-main-file ()
    "Find or switch to the main file.
  The main file is the one stored in the `rf/main-document' varible."
    (interactive)
    (rf/find-or-switch-to-file rf/main-file))

  (defun rf/find-or-switch-to-todo ()
    "Find or switch to the `todo.org' file."
    (interactive)
    (rf/find-or-switch-to-file "/home/rich/Documents/todo.org"))

  (defun rf/find-or-switch-to-emacs-elisp ()
    "Find or switch to the `emacs-elisp.org' file."
    (interactive)
    (rf/find-or-switch-to-file "/home/rich/Documents/emacs-elisp.org"))

  (defun rf/find-or-switch-to-english ()
    "Find or switch to the `english.org' file."
    (interactive)
    (rf/find-or-switch-to-file "/home/rich/Documents/english.org"))

  (defun rf/find-or-switch-to-shell ()
    "Find or switch to the `shell.org' file."
    (interactive)
    (rf/find-or-switch-to-file "/home/rich/Documents/shell.org"))

  (defun rf/find-or-switch-to-init ()
    "Find or switch to the `init.org' file."
    (interactive)
    (rf/find-or-switch-to-file "/home/rich/.emacs.d/init.org"))

#+end_src

* Text
** Org
*** Org package
Outline-based notes management and organizer.

#+begin_src emacs-lisp

      (use-package org
        :pin gnu
        :hook (org-mode . rf/org-mode-setup)
        :bind (:map org-mode-map
                    ;; Make shift selection works as usual.
                    ("C-S-<up>" . nil) ("C-S-<down>" . nil)
                    ("S-<return>" . nil) ("S-RET" . nil)
                    ("M-h" . nil) ("M-}" . nil) ("M-{" . nil) ("C-," . nil)
                    ("C-c C-d" . rf/outline-down-heading)
                    ("<kp-multiply>" . rf/org-emphasize-bold)
                    ("<kp-divide>" . rf/org-emphasize-code)
                    ("S-<kp-divide>" . rf/org-emphasize-italic)
                    ("S-<kp-multiply>" . rf/org-emphasize-verbatim)
                    ;;; Testing (doc later if it works)
                    ("S-<end>" . org-forward-sentence))

        :config
        ;; Wrapping functions of properties and functions org.
        (rf/org-general-setup)
        (rf/org-bindings-setup)
        (rf/org-face-setup)
        (rf/org-appearance-setup)
        (rf/org-todo-setup)
        (rf/org-properties-setup)
        (rf/org-editing-setup)
        (rf/org-babel-setup)
        (rf/org-latex-setup)
        (rf/org-agenda-setup))

#+end_src

*** Org modes
Options concerning the minor modes active in org.

#+begin_src emacs-lisp

  (defun rf/org-mode-setup ()
    "Set of modes to add to the org-mode hook."
    (org-indent-mode)
    (visual-line-mode 1)
    (variable-pitch-mode 1))

#+end_src

*** Org general
General settings of the org mode.

#+begin_src emacs-lisp

  (defun rf/org-general-setup ()
    "Wrapper of general settings to activate within use-package org."

    ;; Contrary function of `outline-up-heading'.
    (defun rf/outline-down-heading ()
      "Move to the header line of the next visible tree."
      (interactive)
      (let (up-point forward-point)
        (while (eq up-point forward-point)
          (outline-up-heading 1)
          (setq up-point (point))
          (org-forward-heading-same-level 1 t)
          (setq forward-point (point)))))

     )

#+end_src

*** Org bindings
Setting up org mode bindings.

#+begin_src emacs-lisp

  (defun rf/org-bindings-setup ()
    "Wrapper to set org mode bindings."

    ;; Setting the leader map:
    (defvar-keymap rf/org-leader-map
      :doc "Keymap for Org mode using a new leader key."
      :prefix 'rf/org-leader-map
      "=" #'rf/org-emphasize-italic
      "*" #'rf/org-emphasize-bold
      ")" #'rf/org-emphasize-code
      "+" #'rf/org-emphasize-verbatim

      "c" #'org-previous-visible-heading
      "t" #'org-next-visible-heading
      "h" #'org-backward-heading-same-level
      "n" #'org-forward-heading-same-level
      "g" #'org-up-element
      "r" #'rf/outline-down-heading

      "k" #'org-cut-subtree
      "d" #'org-previous-link
      "b" #'org-next-link
      "," #'org-insert-link
      ";" #'org-store-link
      "e" #'org-table-create-or-convert-from-region
      "o" #'org-insert-structure-template
      "." #'org-narrow-to-subtree
      "m" #'org-return-and-maybe-indent
      "j" #'org-table-copy-down)

    ;; Settings the leader repeat maps:
    (defvar-keymap org-move-headers-repeat-map
      :doc "Keymap for repeating commands to jump between headings."
      :repeat t
      "c" #'org-previous-visible-heading
      "t" #'org-next-visible-heading
      "h" #'org-backward-heading-same-level
      "n" #'org-forward-heading-same-level
      "g" #'org-up-element
      "r" #'rf/outline-down-heading)

    (defvar-keymap org-next-link-repeat-map
      :doc "Keymap for repeating commands to jump between links."
      :repeat t
      "d" #'org-previous-link
      "b" #'org-next-link)

    ;; Settings the org-mode repeat maps:
    (defvar-keymap org-open-line-repeat-map
      :doc "Keymap to repeat `org-open-line'.  Used in `repeat-mode'."
      :repeat t
      "o" #'org-open-line)

    ;; Trick to be able to use repeat org commands in org-mode
    (defvar-keymap org-char-word-delete-repeat-map
      :doc "Keymap to repeat commands to delete in org mode."
      :repeat t
      "." #'backward-kill-word
      "p" #'kill-word
      "e" #'org-delete-backward-char
      "u" #'delete-forward-char)

    (defvar-keymap org-line-whitespaces-delete-repeat-map
      :doc "Keymap to repeat commands to delete line and spaces in org mode."
      :repeat t
      "i" #'org-kill-line
      "j" #'xah-shrink-whitespaces)

    ;; Setting the leader key
    (keymap-set org-mode-map "<f6>" rf/org-leader-map)

    ;; Setting the remap bindings:
    (keymap-set org-mode-map "<remap> <yank>" 'xah-paste-or-paste-previous)

    )

#+end_src

*** Org faces
Options concerning the org faces.

#+begin_src emacs-lisp

  (defun rf/org-face-setup ()
    "Set face and properties used for org mode."

    ;; Set face, size, and color used for org heading levels:
    (dolist (face '((org-level-1   1.20   "#7194E1")
                    (org-level-2   1.15   "#71e1be")
                    (org-level-3   1.10   "#e8b963")
                    (org-level-4   1.05   "#adc1ff")
                    (org-level-5   1.05   "#ff8a8a")
                    (org-level-6   1.05   "#d996e8")
                    (org-level-7   1.05   "#cd9784")
                    (org-level-8   1.05   "#98be65")))
      (set-face-attribute (car face) nil :font "Cantarell"
                          :height (nth 1 face)
                          :foreground (nth 2 face)))

    ;; Set the color in title and properties:
    ;; Face for document title. #+TITLE:.
    (set-face-attribute 'org-document-title  nil :foreground "#51afef")
    ;; Face for document date, author... #+DATE:, #+AUTHOR: or #+EMAIL:.
    (set-face-attribute 'org-document-info   nil :foreground "#51afef")

    ;; Set basic italic face.
    (set-face-attribute 'italic nil :foreground "#92A9BD")

    ;; Ensure that anything that should be fixed-pitch in Org appears that way:
    ;; Face text in #+begin ... #+end blocks.
    (set-face-attribute 'org-block           nil :inherit 'fixed-pitch)
    ;; Face for fixed-width text like code snippets. ~example~.
    (set-face-attribute 'org-code            nil :inherit 'fixed-pitch)
    ;; Face for fixed-with text like code snippets. =example=.
    (set-face-attribute 'org-verbatim        nil :inherit 'fixed-pitch)
    ;; Face for checkboxes. - [ ] Example
    (set-face-attribute 'org-checkbox        nil :inherit 'fixed-pitch)
    ;; Face for meta lines startin with "#+".
    (set-face-attribute 'org-meta-line       nil :inherit 'fixed-pitch)
    ;; Face for formulas.
    (set-face-attribute 'org-formula         nil :inherit 'fixed-pitch)
    ;; Face for special keyword like CLOCK timer.
    (set-face-attribute 'org-special-keyword nil :inherit 'fixed-pitch)
    ;; Face used for tables.
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch :height 110)

    )

#+end_src

*** Org appearance
Settings for Org mode appearance.

#+begin_src emacs-lisp

  (defun rf/org-appearance-setup ()
    "Wrapper of appearance properties to activate within use-package org."

    (setq org-ellipsis " ➣"
          org-hide-emphasis-markers t)
    ;; Add the character to alist to emphasize text.
    (add-to-list 'org-emphasis-alist '("$" default))

    )


  ;; Replaces the heading stars in org-mode with nicer looking characters.
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("🟆" "🟄" "🟂" "🟀" "✦" "✧" "▾" "▿")))

#+end_src

*** Org TODO
Options concerning TODO items in Org mode.

#+begin_src emacs-lisp

  (defun rf/org-todo-setup ()
    "Wrapper of todo properties to activate within use-package org."

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
            (sequence "ACTIVE(a)" "WAIT(w)" "|" "UNSOLVED(u)")))

    (setq org-todo-keyword-faces
          '(("NEXT" . (:foreground "#9abe64" :weight bold))
            ("WAIT" . (:foreground "#5a6081" :weight bold))
            ("UNSOLVED" . (:foreground "#5a6081" :weight bold))))

    )

#+end_src

*** Org properties
Options concerning properties in Org mode.

#+begin_src emacs-lisp

  (defun rf/org-properties-setup ()
    "Wrapper of properties to activate within use-package org."

    ;; Enables the use of template structure blocks (needed as of Org 9.2)
    (require 'org-tempo)
    ;; Add template blocks to be inserted.
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
    (add-to-list 'org-structure-template-alist '("cs" . "src css"))
    (add-to-list 'org-structure-template-alist '("htm" . "src html"))
    (add-to-list 'org-structure-template-alist '("ar" . "src artist"))
    (add-to-list 'org-structure-template-alist '("con" . "src conf"))

    ;; Follow the links with RET
    (setq org-return-follows-link  t)

    ;; Start an org file with all headers collapsed.
    (setq org-startup-folded 't)

    ;; Make shift selection works as usual.
    (setq org-support-shift-select 'always)
    (defun rf/org-toggle-shift-select ()
      "Toggle `org-support-shift-select' variable.
    Useful when you want to use Shift comands briefly."
      (interactive)
      (if org-support-shift-select
          (setq org-support-shift-select nil)
        (setq org-support-shift-select 'always)))

    )

#+end_src

*** Org editing
Options concerning the editing in org.

#+begin_src emacs-lisp

  (defun rf/org-editing-setup ()
    "Wrapper of editing properties to activate within use-package org."

    (defun rf/save-and-reopen-buffer ()
      "Save and reopen the current buffer.

    This function is created temporarily, because there's an issue
    with `org-mode' and `consult' commands that sometimes block
    `org' headers from being unfolded."
      (interactive)
      (let ((buffer-name (buffer-file-name)))
        (basic-save-buffer)
        (kill-buffer)
        (find-file buffer-name)))

    (defun rf/org-toggle-hide-emphasis ()
      "Toggle `org-hide-emphasis-markers'."
      (interactive)
      (if org-hide-emphasis-markers
          (setq org-hide-emphasis-markers nil)
        (setq org-hide-emphasis-markers t))
      (org-mode-restart))

    (defun rf/org-emphasize-marker (marker)
      "Insert or change the emphasis of a word or region.

    If there is an active region, change that region to a new
    emphasis.  If there is no region, emphasis the word or symbol
    that's just next to or an the point."
      (let (bounds)
        (if (use-region-p)
            (org-emphasize marker)
          (progn (setq bounds (bounds-of-thing-at-point 'symbol))
                 (goto-char (cdr bounds))
                 (push-mark (car bounds))
                 (setq mark-active t)
                 (org-emphasize marker)))))

    (defun rf/org-emphasize-bold ()
      "Insert or change a word emphasis or region to bold."
      (interactive)
      (rf/org-emphasize-marker ?\*))

    (defun rf/org-emphasize-code ()
      "Insert or change a word emphasis or region to code."
      (interactive)
      (rf/org-emphasize-marker ?\~))

    (defun rf/org-emphasize-italic ()
      "Insert or change a word emphasis or region to italic."
      (interactive)
      (rf/org-emphasize-marker ?\/))

    (defun rf/org-emphasize-math ()
      "Insert or change a word emphasis or region to math."
      (interactive)
      (rf/org-emphasize-marker ?\$))

    (defun rf/org-emphasize-verbatim ()
      "Insert or change a word emphasis or region to verbatim."
      (interactive)
      (rf/org-emphasize-marker ?\=))

    )

#+end_src

*** Org Babel
Code block evaluation and management in ‘org-mode’ documents

#+begin_src emacs-lisp

  (defun rf/org-babel-setup ()
    "Wrapper of babel properties to activate within use-package org."

    ;; Automatically tangle .org config file when save it (System Crafters).
    (defun sc/org-babel-tangle-config ()
      "Exports the tangle configuration to the associated output files.

    This function checks to see if the file being saved is the .org
    file you're looking at right now, and if so, automatically
    exports the configuration here to the associated output files."
      (when (string-equal (file-name-directory (buffer-file-name))
                          (expand-file-name user-emacs-directory))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil)) ; Don't ask for confirmation.
          (org-babel-tangle))))

    ;; sc/org-babel-tangle-config gets executed each time a buffer gets saved.
    (add-hook 'org-mode-hook
              (lambda ()
                (add-hook 'after-save-hook #'sc/org-babel-tangle-config)))

    )

#+end_src

*** Org LaTeX
Options for embedding LaTeX code into Org mode.

#+begin_src emacs-lisp

  (defun rf/org-latex-setup ()
    "Wrapper of LaTeX properties to activate within use-package org."

    ;; Options for creating images from LaTeX fragments:
    ;; Foreground color for images embedded:
    (plist-put org-format-latex-options :foreground "#FFFFFF")
    ;; Scaling factor for the size of the images, to get more pixels:
    (plist-put org-format-latex-options :scale 1.5)

    )

#+end_src

*** Org agenda
Options concerning agenda views in Org mode.

#+begin_src emacs-lisp

  (defun rf/org-agenda-setup ()
    "Wrapper of agenda properties to activate within use-package org."

    (setq org-amgenda-files
          '("~/Documents/todo.org"))

    )

#+end_src

** Htmlize
Convert buffer text and associated decorations (colors, fonts, underlining,...) to HTML.

#+begin_src emacs-lisp

  ;; Exporting the contents of an Emacs buffer to HTML.
  (use-package htmlize
    :defer t)

#+end_src

* Communication
** Simple httpd
A simple web server.

#+begin_src emacs-lisp

  ;; Emacs web server that simple serve files and directory listings.
  (use-package simple-httpd
    :commands (httpd-start httpd-serve-directory)
    :config
    ;; Web server file root:
    (setq httpd-root "/var/www"))

#+end_src

** Impatient
Serve buffers live over HTTP. To use it, enable the web server provided by simple-httpd, and then publish buffers by enabling the minor mode impatient-mode.

#+begin_src emacs-lisp

  ;; See the effect of your HTML as you type it.
  (use-package impatient-mode
    :commands impatient-mode)

#+end_src

** Skewer
Live browser JavaScript interaction.

#+begin_src emacs-lisp

  ;; Live interaction with JavaScript, CSS, and HTML in a web browser.
  (use-package skewer-mode
    :commands (skewer-mode run-skewer))

#+end_src

* Programming
** Prog mode
Generic programming mode, from which others derive.

#+begin_src emacs-lisp

  ;; Disable the binding to enable it as another global binding
  (keymap-set prog-mode-map "M-q" nil)


  ;; Display line numbers only in programming modes:
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)


  ;; Helps comment/uncomment multiple lines with/without selecting them.
  (use-package evil-nerd-commenter
    :bind ("M-z" . evilnc-comment-or-uncomment-lines))


  ;; Automatically turn on some tree-sitter based modes for the same
  ;; files for which a "built-in" mode would be turned on:
  (add-to-list 'major-mode-remap-alist '(js-json-mode . json-ts-mode))

#+end_src

** Tools
*** Eglot
Provides infrastructure and a set of commands for enriching the source code editing capabilities of Emacs via LSP.

#+begin_src emacs-lisp

  ;; Emacs client for the Language Server Protocol (LSP).
  ;; To use Eglot,each server must be installed, for example for JS or CSS:
  ;; js   -> npm i -g typescript-language-server typescript
  ;; css  -> npm i -g vscode-langservers-extracted
  (use-package eglot
    :defer t
    ;; :hook (js-mode . eglot-ensure)
    :custom
    ;; Disable any debug logging (buffer), and may speed things up.
    (eglot-events-buffer-size 0)
    :config
    ;; Specify explicitly to use Orderless for Eglot
    (setq completion-category-overrides '((eglot (styles orderless))
                                          (eglot-capf (styles orderless)))))

  ;; Enable cache busting, depending on if your server returns
  ;; sufficiently many candidates in the first place you may or
  ;; may not need the cape-wrap-buster
  ;; (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)

  ;; Making a Cape Super Capf for Eglot
  ;; (defun my/eglot-capf ()
  ;;   (setq-local completion-at-point-functions
  ;;               (list (cape-capf-super
  ;;                      #'eglot-completion-at-point
  ;;                      #'tempel-expand))))
  ;; (add-hook 'eglot-managed-mode-hook #'my/eglot-capf)

#+end_src

*** Language server
Language Server Protocol client.

#+begin_src emacs-lisp

  ;; lsp-mode aims to provide IDE-like experience by providing optional
  ;; integration with the most popular Emacs packages
  (use-package lsp-mode
    :hook (lsp-mode . lsp-enable-which-key-integration)
    :commands (lsp lsp-deferred)
    :init
    ;; Set prefix for lsp-command-keymap.
    (setq lsp-keymap-prefix "C-c l")
    :config
    ;; Disable automatic installation.
    (setq lsp-enable-suggest-server-download nil))
  ;; When updating your packages with package.el, we recommend:
  ;; 1. Delete your LSP-related packages
  ;; 2. Restart Emacs
  ;; 3. Install the new versions of the packages.


  ;; All the higher level UI modules of lsp-mode.
  (use-package lsp-ui
    :commands lsp-ui-mode)


  ;; Integration between lsp-mode and treemacs and implementation of
  ;; treeview controls using treemacs as a tree renderer.
  (use-package lsp-treemacs
    :commands lsp-treemacs-errors-list
    :config
    ;; Enable bidirectional synchronization of lsp workspace
    ;; folders and treemacs projects.
    (lsp-treemacs-sync-mode 1))


  ;; Consult LSP-mode integration.
  (use-package consult-lsp
    :after lsp-mode
    :config
    ;; Replace xref-find-apropos in lsp-mode controlled buffers:
    (define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols))

#+end_src

*** Flymake
Universal on-the-fly syntax checker.

#+begin_src emacs-lisp

  (defun rf/flymake-show-buffer-diagnostics-other-window ()
    "Show a list of Flymake diagnostics for current buffer in other window."
    (interactive)
    (unless flymake-mode
      (user-error "Flymake mode is not enabled in the current buffer"))
    (let* ((name (flymake--diagnostics-buffer-name))
           (source (current-buffer))
           (target (or (get-buffer name)
                       (with-current-buffer (get-buffer-create name)
                         (flymake-diagnostics-buffer-mode)
                         (current-buffer)))))
      (with-current-buffer target
        (setq flymake--diagnostics-buffer-source source)
        (revert-buffer)
        (display-buffer (current-buffer)
                        ;; Display other woindow, not the same one
                        ;; to switch, (other-window 1) can be added
                        `((display-buffer-use-some-window))))))

  (defun flymake-show-project-diagnostics-other-window ()
    "Show a list of Flymake diagnostics for the current project."
    (interactive)
    (let* ((prj (project-current))
           (root (project-root prj))
           (buffer (flymake--project-diagnostics-buffer root)))
      (with-current-buffer buffer
        (flymake-project-diagnostics-mode)
        (setq-local flymake--project-diagnostic-list-project prj)
        (revert-buffer)
        (display-buffer (current-buffer)
                        ;; Display other woindow, not the same one
                        ;; to switch, (other-window 1) can be added
                        `((display-buffer-use-some-window))))))


  ;; Flymake backend for Javascript using eslint.
  ;; Enable it with M-x flymake-eslint-enable RET
  (use-package flymake-eslint
    :defer t
    :init
    ;; Use local eslint from node_modules before global (Jeff Barczewski).
    (defun jb/use-eslint-from-node-modules ()
      "Use local eslint from node_modules before global.

            This code looks for a node_modules directory in any parent of
            the buffer's directory and configures flymake-eslint to use an
            eslint executable from that directory if any exists."
      (interactive)
      (let* ((root (locate-dominating-file
                    (or (buffer-file-name) default-directory)
                    "node_modules"))
             (eslint (and root
                          (expand-file-name "node_modules/eslint/bin/eslint.js"
                                            root))))
        (when (and eslint (file-executable-p eslint))
          (setq-local flymake-eslint-executable-name eslint)))))
  ;; Make sure eslint is installed and present on your emacs exec-path.
  ;; npm install -g eslint


  ;; Flymake backend for CSS and friends using stylelint.
  (use-package flymake-stylelint
    :vc
    (flymake-stylelint :url
                       "https://github.com/orzechowskid/flymake-stylelint")
    :defer t
    :init
    ;; Use local stylelint from node_modules before global (Jeff Barczewski).
    (defun jb/use-stylelint-from-node-modules ()
      "Use local stylelint from node_modules before global.

      This code looks for a node_modules directory in any parent of
      the buffer's directory and configures flymake-stylelint to use an
      stylelint executable from that directory if any exists."
      (interactive)
      (let* ((root (locate-dominating-file
                    (or (buffer-file-name) default-directory)
                    "node_modules"))
             (stylelint (and root
                             (expand-file-name
                              "node_modules/stylelint/bin/stylelint.mjs"
                              root))))
        (when (and stylelint (file-executable-p stylelint))
          (setq-local flymake-stylelint-executable-name stylelint)))))
  ;; Make sure stylelint is installed and present on your emacs exec-path.
  ;; npm install -g stylelint

#+end_src

*** Flycheck
Modern on-the-fly syntax checking for GNU Emacs.

#+begin_src emacs-lisp

  ;; Flycheck is a modern on-the-fly syntax checking extension.
  (use-package flycheck
    :defer t)
  ;; Flycheck doesn't check buffers itself but relies on external programs.
  ;; These programs must be installed separately (e.g, npm install eslint)


  ;; Provides the consult-flycheck cmd, which integrates Consult with Flycheck.
  (use-package consult-flycheck
    :after flycheck)


  ;; A simple “glue” mode that allows Flycheck and Eglot to work together.
  (use-package flycheck-eglot
    :defer t)
  ;; Toggle the Flycheck-Eglot for the current buffer: flycheck-eglot-mode.
  ;; Use an Eglot checker in parallel with regular Flycheck checkers.
  ;; :custom (flycheck-eglot-exclusive nil) (didn't work at first)
  ;; Flycheck-Eglot mode automatically enables Flycheck and disables Flymake.


  ;; Show flycheck errors with sideline.
  (use-package sideline-flycheck
    :defer t
    :init
    ;; 'point to show errors only on point - 'line to show errors on line
    (setq sideline-flycheck-display-mode 'line)
    (setq sideline-backends-right '(sideline-flycheck)))

#+end_src

*** Combobulate
Combobulate group: Structured Editing and Movement with Combobulate.

#+begin_src emacs-lisp

  ;; Complete installation with tree-sitter grammar installation.
  (use-package treesit
    :ensure nil
    :preface
    (defun mp-setup-install-grammars ()
      "Install Tree-sitter grammars if they are absent."
      (interactive)
      (dolist (grammar
               ;; Note the version numbers. These are the versions that
               ;; are known to work with Combobulate *and* Emacs.
               '((css . ("https://github.com/tree-sitter/tree-sitter-css"
                         "v0.20.0"))
                 (html . ("https://github.com/tree-sitter/tree-sitter-html"
                          "v0.20.1"))
                 (javascript .
                             ("https://github.com/tree-sitter/tree-sitter-javascript"
                              "v0.20.1" "src"))
                 (json . ("https://github.com/tree-sitter/tree-sitter-json"
                          "v0.20.2"))
                 (markdown . ("https://github.com/ikatyang/tree-sitter-markdown"
                              "v0.7.1"))
                 (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript"
                         "v0.20.3" "tsx/src"))
                 (typescript .
                             ("https://github.com/tree-sitter/tree-sitter-typescript"
                              "v0.20.3" "typescript/src"))))
        (add-to-list 'treesit-language-source-alist grammar)
        ;; Only install `grammar' if we don't already have it
        ;; installed. However, if you want to *update* a grammar then
        ;; this obviously prevents that from happening.
        (unless (treesit-language-available-p (car grammar))
          (treesit-install-language-grammar (car grammar)))))
    ;; Tell Emacs where to find the language grammars. Then call the
    ;; command M-x treesit-install-language-grammar for each language.

    :config
    (mp-setup-install-grammars)
    ;; Combobulate adds structured editing and movement to a
    ;; wide range of programming languages.
    (use-package combobulate
      :vc
      (combobulate :url "https://github.com/mickeynp/combobulate")
      ;; I don't want to load immediately, but the trigger keywords don't work
      :demand t
      :bind (:map combobulate-key-map
                  ("M-<down>" . nil) ("M-<up>" . nil)
                  ("M-n" . nil) ("M-p" . nil)
                  ("M-D" . combobulate-splice-down)
                  ("M-U" . combobulate-splice-up)
                  ("M-F" . combobulate-navigate-sequence-next)
                  ("M-B" . combobulate-navigate-sequence-previous))
      :custom
      ;; You can customize Combobulate's key prefix here.
      (combobulate-key-prefix "C-c o")))

#+end_src

*** Debug
Bringing rich debugging capabilities to Emacs via the Debug Adapter Protocol.

#+begin_src emacs-lisp

  ;; Debug adapter client for Emacs that has no dependencies outside Emacs.
  (use-package dape
    :preface
    (setq dape-key-prefix "\C-cd")
    :bind ("C-c d d" . dape)
    :hook (dape-display-source . eldoc-mode)
    :config
    ;; Info buffers to the right
    (setq dape-buffer-window-arrangement 'right))
  ;; Download the supported debugging adapters for each language.


  ;; Debug Adapter Protocol client for Emacs focused on VScode.
  (use-package dap-mode
    ;; Usage: dap-debug/dap-debug-edit-template and select the node template.
    :commands dap-debug-edit-template
    :custom
    (lsp-enable-dap-auto-configure nil)
    :config
    (require 'dap-node) ; (require 'dap-chrome) ; (require 'dap-firefox)
    ;; You need call dap-node-setup after requiring dap-node.
    (dap-ui-mode 1)
    (use-package dap-ui-mode
      :ensure nil
      :bind (:map dap-ui-mode-map
                  ("C-c d" . dap-hydra))))
  ;; Make sure that dap-node-debug-program is pointing to the proper file.

#+end_src

*** Magit
Controlling Git from Emacs.

#+begin_src emacs-lisp

  ;; A Git porcelain inside Emacs
  (use-package magit
    :bind(("C-}" . magit-status)
          ("C-c g" . magit-dispatch)
          ("C-c f" . magit-file-dispatch)
          :map magit-mode-map
          ("C-w" . nil)
          ("c" . magit-section-backward)
          ("t" . magit-section-forward)
          ("p" . magit-tag)
          ("n" . magit-commit)
          ("C-S-c" . magit-section-backward-sibling)
          ("C-S-t" . magit-section-forward-sibling)
          ("S-<backspace>" . magit-section-up)
          ("C-<insert>" . magit-copy-section-value)))

  ;; Access Git forges from Magit
  (use-package forge
    :after magit
    :config
    (setq auth-sources '("~/.authinfo")))
  ;; NOTE: Make sure to configure a GitHub token before using this package!

#+end_src

*** Task runners
Automate jobs inside and outside the inner software development loop (edit, compile, test, and debug).

#+begin_src emacs-lisp

  ;; Manage external services from within Emacs.
  (use-package prodigy
    :bind (:map prodigy-mode-map
                ("R" . prodigy-refresh))
    :init
    ;; Creating dynamic task runners for npm scripts (Rajasegar Chandran):
    (defun rc/create-prodigy-service (&optional package-manager)
      "Create new prodigy services based on current package.json.

    To use it, open the package.json file situated in the project
    root folder, and invoke the function."
      (interactive)
      (let ((pkg (json-parse-string (buffer-substring-no-properties
                                     (point-min) (point-max)))))
        (maphash  (lambda (key value)
                    (let ((args '())
                          (name (gethash "name" pkg)))
                      (add-to-list 'args key)
                      (add-to-list 'args "run")
                      (prodigy-define-service
                        :name (concat name "-" key)
                        :command (or package-manager "npm")
                        :cwd (file-name-directory (buffer-file-name))
                        :path (file-name-directory (buffer-file-name))
                        :args args
                        :tags '(temp)
                        :stop-signal 'sigkill
                        :kill-process-buffer-on-stop t
                        ))) (gethash "scripts" pkg))
        (prodigy)
        (prodigy-refresh))))

#+end_src

** Languages
*** Html
Hypertext Markup Language editing mode.

#+begin_src emacs-lisp

  ;; Remap one of the keymaps used by default in html and derived
  ;; modes, so it doesn't interfere with the global keymap.
  (use-package sgml-mode
    :bind (:map html-mode-map
                ("M-o" . nil)))
                ;; ("M-i" . facemenu-keymap)))


  ;; Major mode for editing web templates aka HTML files embedding parts
  ;; (CSS/JavaScript) and blocks (pre rendered by client/server side engines).
  (use-package web-mode
    :defer t)

#+end_src

*** Css
Cascading Style Sheets (CSS) editing mode.

#+begin_src emacs-lisp

  ;; Yet another CSS mode.
  (use-package css-mode
    :custom
    (css-indent-offset 2))

#+end_src

*** JavaScript
Customization variables for JavaScript mode.

#+begin_src emacs-lisp

  ;; Customizations for js-mode.
  (use-package js
    :hook (js-mode . electric-pair-local-mode)
    :bind (:map js-mode-map
                ("C-c C-j" . rf/js-save-eval-print)
                ("C-c C-l" . rf/js-console-log-wrap))
    :config
    (defun rf/js-save-eval-print (&optional output-buffer)
      "Save, evaluate, and print the ouput js for debugging purposes."
      (interactive "P")
      (save-buffer)
      (shell-command (concat "node " (buffer-name)) output-buffer))
    (defun rf/js-console-log-wrap ()
      "Wrap/unwrap the code with the 'console.log()' on the current line.

    If the region is activate, just wrap it.
    If the point is on the word 'console', unwrap this 'console.log()',
    not the whole line. (note: improve regexp later)"
      (interactive)
      (let ((last (point))
            (beg (line-beginning-position))
            (end (line-end-position)))

        ;; Set point
        (cond ((string= "console" (thing-at-point 'word))
               ;; set point just in front 'console' to only remove it
               (goto-char (car (bounds-of-thing-at-point 'word))))

              ((use-region-p)
               (if (> (region-beginning) (region-end))
                   (setq beg (region-end) end (region-beginning))
                 (setq beg (region-beginning) end (region-end))))

              (t (goto-char (line-beginning-position))))

        (cond ((use-region-p)
               ;; only wrap the region with 'console.log'
               (progn
                 (goto-char end) (insert ")")
                 (goto-char beg) (insert "console.log(")))

              ;; console.log(something...) => something...
              ((looking-at "[ \t]*console.log(.*" t)
               ;; (blanks)console.log(target string)(semicolon comment)
               (if (re-search-forward
                    "\\([ \t]*\\)console.log(\\(.*\\))\\(;\\)?\\([ \t;]*//.*$\\)"
                    end t)
                   (replace-match "\\1\\2\\3\\4" t nil)
                 ;; (blanks)console.log(target string)(semicolon)
                 (if (re-search-forward
                      "\\([ \t]*\\)console.log(\\(.*\\))\\(;\\)?\\(.*$\\)"
                      end t)
                     (replace-match "\\1\\2\\3\\4" t nil)
                   (goto-char last))))

              ;; something... => console.log(something...)
              (t
               ;; (blanks)(target string)((blanks semicolon) comment)
               (if (re-search-forward
                    "\\([ \t]*\\)\\(.*[^ \t;]+\\)\\([ \t;]*//.*$\\)" end t)
                   (replace-match "\\1console.log(\\2)\\3" t nil)
                 ;; (blanks)(target string)(semicolon blanks)
                 (if (re-search-forward
                      "\\([ \t]*\\)\\(.*[^ \t;]+\\)\\(;[ \t]*$\\)" end t)
                     (replace-match "\\1console.log(\\2)\\3" t nil)
                   ;; (blanks)(target string)((blanks semicolon))
                   (if (re-search-forward
                        "\\([ \t]*\\)\\(.*[^ \t;]+\\)\\([ \t;]*$\\)" end t)
                       (replace-match "\\1console.log(\\2)\\3" t nil)
                     (goto-char last)))))))))

#+end_src

*** TypeScript
Customization variables for TypeScript mode.

*** Lisp
Lisp support, including Emacs Lisp.

*** Markdown
Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML).

#+begin_src emacs-lisp

  ;; Major mode for editing Markdown-formatted text.
  (use-package markdown-mode
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "markdown")
    :bind (:map markdown-mode-map
                ("C-c C-e" . markdown-do)))
  ;; You need to install a local Markdown processor (e.g.,
  ;; Markdown.pl,MultiMarkdown, or Pandoc). (apt install markdown)

#+end_src

* Applications
** Eshell
Command shell implemented entirely in Emacs Lisp.

#+begin_src emacs-lisp

  ;; Shell-like command interpreter (ELisp REPL) implemented in EmacsLisp.
  (use-package eshell
    :commands eshell
    :config
    ;; Don't add input matching the last on the input ring.
    (setq eshell-hist-ignoredups t)
    (add-to-list 'eshell-modules-list 'eshell-tramp)
    ;; Subcommands that present their output in a visual fashion
    (setq eshell-visual-subcommands '(("git" "log" "diff" "show"))))

  ;; Set here because eshell-mode-map is loaded after esh-mode feature.
  (with-eval-after-load 'esh-mode
    (keymap-set eshell-mode-map "C-t" 'pcomplete-list))

  (with-eval-after-load 'em-hist
    (keymap-unset eshell-hist-mode-map "TAB")
    (keymap-set eshell-hist-mode-map "C-S-c"
                'eshell-previous-matching-input-from-input)
    (keymap-set eshell-hist-mode-map "C-S-t"
                'eshell-next-matching-input-from-input)
    (keymap-set eshell-hist-mode-map "C-S-d" 'eshell-list-history))

  ;; Unset the bindind to be able to use another interface
  (with-eval-after-load 'em-hist
    (keymap-unset eshell-cmpl-mode-map "C-M-i")
    (keymap-unset eshell-cmpl-mode-map "TAB"))


  ;; Provides some themes of Emacs Shell (Eshell) prompt.
  (use-package eshell-git-prompt
    :after eshell
    :config
    (eshell-git-prompt-use-theme 'multiline))


  ;; Adds syntax highlighting to the Emacs Eshell.
  (use-package eshell-syntax-highlighting
    :after eshell
    :config
    ;; Enable in all Eshell buffers.
    (eshell-syntax-highlighting-global-mode +1))


  ;; Fish-like history autosuggestions in eshell.
  (use-package esh-autosuggest
    :hook (eshell-mode . esh-autosuggest-mode)
    :bind (:map esh-autosuggest-active-map
                ("C-f" . nil) ("M-f" . nil)
                ("M-n" . company-complete-selection)
                ("M-r" . esh-autosuggest-complete-word)
                ("TAB" . esh-autosuggest-complete-word))
    :config
    (set-face-foreground 'company-preview-common "#697b96")
    (set-face-background 'company-preview nil))

#+end_src

** Calc
Advanced desk calculator and mathematical tool.

#+begin_src emacs-lisp

  ;; Exclude line numbering from kills and copies.
  (setq calc-kill-line-numbering nil)

#+end_src

* External
** Vterm
Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based on libvterm, a C library.

#+begin_src emacs-lisp

  ;; Fully-fledged terminal emulator based on an external library (libvterm).
  (use-package vterm
    :commands vterm
    :config
    ;; Set this to match your custom shell prompt:
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
  ;; Requirements: Emacs needs to be built with support for modules, and
  ;; Emacs-libvterm requires CMake and libvterm. If libvterm is not
  ;; available, emacs-libvterm will downloaded and compiled. In this case,
  ;; libtool is needed.

#+end_src

** Google translate
Emacs core UI script for the Google Translate package.

#+begin_src emacs-lisp

  ;; Emacs interface to Google Translate.
  (use-package google-translate
    :custom
    (google-translate-default-source-language "en")
    (google-translate-default-target-language "es")
    (google-translate-output-destination 'echo-area)
    (google-translate-show-phonetic t)
    ;; Translation listening is not available in echo-area or pop-up output.
    ;; Note: mplayer must be in the PATH.
    (google-translate-listen-program "mplayer")
    :config
    (defvar-keymap google-translate-map
      :doc "Keymap for google-translate commands."
      "h" #'google-translate-at-point
      "t" #'google-translate-query-translate
      "g" #'google-translate-at-point-reverse
      "c" #'google-translate-query-translate-reverse)
    (keymap-set global-map "C-S-q" google-translate-map))

#+end_src

** Proced
Proced mode.

#+begin_src emacs-lisp

  ;; Enables coloring of Proced buffers.
  (setq proced-enable-color-flag t)

#+end_src

* Help
** Basic help
Support for Emacs help systems.

#+begin_src emacs-lisp

  ;; Output keymap descriptions (prefix) on help commands and "??"
  ;; for closures/functions, instead of "[closure]"/"[lambda]".
  (setq describe-bindings-show-prefix-commands t)

#+end_src

** Helpful
A rich help system with contextual information.

#+begin_src emacs-lisp

  ;; Replacement for *help* buffers that provides more contextual info and code.
  (use-package helpful
    :hook (helpful-mode . show-paren-local-mode)
    :bind
    (([remap describe-key] . helpful-key)
     ([remap describe-command] . helpful-command)
     ([remap describe-variable] . helpful-variable)
     ;; Note that the built-in `describe-function' includes both functions
     ;; and macros. `helpful-function' is functions only, so we provide
     ;; `helpful-callable' as a drop-in replacement.
     ([remap describe-function] . helpful-callable)
     :map helpful-mode-map
     ("c" . backward-button)
     ("t" . forward-button))
    ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
    ;; already links to the manual, if a function is referenced there.
    ([remap Info-goto-emacs-command-node] . helpful-function))

#+end_src

** Which key
Customization options for which-key-mode.

#+begin_src emacs-lisp

  ;; Displays the key bindings following your prefix in a popup:
  (use-package which-key
    :config
    ;; Allow C-h to trigger which-key before it is done automatically:
    (setq which-key-show-early-on-C-h t
          ;; make sure which-key doesn't show normally but refreshes
          ;; quickly after it is triggered:
          which-key-idle-delay 10000
          which-key-idle-secondary-delay 0.05
          ;; Show the count of keys shown vs. total keys in the mode line:
          which-key-show-remaining-keys t)
    (which-key-mode))

#+end_src

* Multimedia
** Image
Image support.

#+begin_src emacs-lisp

  ;; Map in `image-mode', a major mode for visiting image files
  (with-eval-after-load 'image-mode
    (keymap-set image-mode-map "c" 'image-previous-file)
    (keymap-set image-mode-map "t" 'image-next-file))

#+end_src

* Local
Code local to your site.

#+begin_src emacs-lisp

  ;; Track command frequencies
  (use-package keyfreq
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))


  ;; External libraries/packages edited
  (add-to-list 'load-path "~/.emacs.d/lisp/")
  (require 'xah-fly-keys)
  (require 'wakib-keys)
  (require 'ergoemacs-functions)
  (require 'xah-function-mix)
  (require 'my-abbrev)


  ;; My local code:
  (defun rf/convert-srt-to-html (filePath)
    "Format and convert srt subtitle file to html.

  File will save in Downloads Folder.
  Be careful, it overwrites file of the same name."
    (interactive "f")
    (with-temp-buffer
      (insert-file-contents filePath)
      (goto-char 1)
      (while (re-search-forward "\\|\\\\h" nil t)
        (replace-match "" nil t))
      (goto-char 1)
      (flush-lines "^[0-9].*[0-9]$")
      (goto-char 1)
      (flush-lines "^[0-9]$")
      (delete-duplicate-lines (goto-char 1) (point-max))
      (mark-whole-buffer)
      (org-html-convert-region-to-html)
      (write-region 1 (point-max)
                    (concat "~/Downloads/"
                            (substring
                             (file-name-nondirectory filePath) 0 -4)
                            ".html"))))


  (defun rf/join-lines-of-sub-srt-file (filePath)
    "Join lines of a subtitle sqrt file.

  File will save in Downloads Folder."
    (interactive "f")
    (with-temp-buffer
      (insert-file-contents filePath)
      (goto-char 1)
      (while (re-search-forward "\\([^[:digit:]]\\)
      \\([^
      [:digit:]]\\)" nil t)
        (replace-match "\\1 \\2"))
      (write-region 1 (point-max)
                    (concat "~/Downloads/"
                            (substring
                             (file-name-nondirectory filePath) 0 -4)
                            "-join-lines.srt"))))

#+end_src

* References
- [[https://www.gnu.org/software/emacs/manual/emacs.html][GNU Emacs Manual]]
- [[https://www.emacswiki.org/][EmacsWiki]]
- [[http://xahlee.info/emacs/index.html][∑XAH]]
- [[https://github.com/daviwil/emacs-from-scratch/blob/a57d99ba80276926a2b68521f9a9d23dc173a628/Emacs.org][System Crafters Github]]
