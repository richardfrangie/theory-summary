#+title: HTML CSS SEO
#+date: 2023-03-09

* HTML
** HyperText Markup Language
HyperText Markup Language is the standard markup language for documents designed to be displayed in a web browser. It is often assisted by technologies such as Cascading Style Sheets [[CSS]] and scripting languages such as JavaScript JS.

An HTML document is composed of a tree of simple HTML nodes, such as *text nodes*, and HTML [[Element][elements]], which add semantics and formatting to parts of document. Each element can have HTML attributes specified. Elements can also have content, including other elements and text.


*Note*: To be able to include angle brackets in the text of a document, even though they have a special meaning in HTML, yet another form of special notation has to be introduced. A plain opening angle bracket is written as ~&lt;~ (“less than”), and a closing bracket is written as ~&gt;~ (“greater than”). In HTML, an ampersand ( ~&~ ) character followed by a name or character code and a semicolon ( ~;~ ) is called an entity and will be replaced by the character it encodes.

This is analogous to the way backslashes are used in JavaScript strings. Since this mechanism gives ampersand characters a special meaning, too, they need to be escaped as ~&amp;~. Inside attribute values, which are wrapped in double quotes, ~&quot;~ can be used to insert an actual quote character.

** Element
*** Definition
HTML elements are indicated in the document by HTML tags, enclosed in angle brackets (an element is not a tag). Tags may also enclose further tag markup between the start and end, including a mixture of tags and text. This indicates further (nested) elements, as children of the parent element.

#+begin_src artist

                      Element
  ┌──────────────────────┴─────────────────────┐
      Opening tag            Content     Closing tag
  ┌─────────┴─────────┐┌────────┴─────────┐┌─┴─┐
  <p class="paragraph">This is a paragraph.</p>
     └─┬─┘  └───┬───┘
   Atribute  Atribute
     name     value

#+end_src

*** Block- level elements
Browsers typically display the block-level element with a newline both before and after the element. You can visualize them as a stack of boxes. Browsers automatically add some space (a margin) before and after the element.

A block-level element always takes up the full width available (stretches out to the left and right as far as it can).

A block-level element occupies the entire horizontal space of its parent element (container), and vertical space equal to the height of its contents, thereby creating a "block".

Two commonly used block elements are: [[p][<p>]] and [[div][<div>]]. The ~<p>~ element defines a paragraph in an HTML document. The ~<div>~ element defines a division or a section in an HTML document.

Block-level elements have the following properties:

- Always start on a new line
- Take up as much horizontal space as possible (the full width of the container or browser window if there is no container)
- Will respect width and height CSS properties
- Horizontal and vertical margins both work

*** Inline elements
Inline elements are those which only occupy the space bounded by the tags defining the element, instead of breaking the flow of the content.

An inline element does not start on a new line and only takes up as much width as necessary.

If an inline element does not fit on a line, create a different box for each line on which it is present.

Inline elements have the following properties:

- Do not start on a new line
- Only use as much horizontal space as required by the content
- Do not accept width and height CSS properties
- Margins will work horizontally, but not vertically
- Padding works on all sides, but the top and bottom may overlap other elements.

*** inline-block
The inline-block value is a strange combo of both block and inline.

- Elements accept width and height properties
- Elements can have vertical and horizontal padding on all sides
- Elements do not start on a new line
- There will often be a small gap between inline-block elements

*** none
The none value of the display property will cause an element not to display at all.

This is similar to the visibility property with one important distinction. Setting display to none will cause the element to be removed from the document flow completely, and the space where it would have been will also be removed. Setting the visibility property to hidden will cause the element to be invisible, but the space the element occupies will still be reserved.

** Types of elements
*** Structure
**** DOCTYPE
A document type declaration, is an "information" to the browser about what document type to expect.

#+begin_src html

  <!-- Defines that this document is an HTML5 document -->
  <!DOCTYPE html>

  <!-- Defines that this document is an older HTML Documents -->
  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">

#+end_src

**** html
The ~<html>~ (block) element is the root element of an HTML page, it represents the entire document.

#+begin_src html

  <!DOCTYPE html>
  <html lang="en-us">

    <head>
      <meta charset="utf-8" />
      <meta name="viewport" content="width=device-width" />
      <title>Layout Task</title>
      <link href="styles.css" rel="stylesheet" type="text/css">
    </head>

    <body>
      <div class="wrapper">
        <header>
          <nav>
            <ul>
              <li><a href="">About</a></li>
              <li><a href="">Contact</a></li>
              <li><a href="">Meet the team</a></li>
              <li><a href="">Blog</a></li>
            </ul>
          </nav>
        </header>
        <main>
          <article>
            <div class="content">
              <h1>Veggies!</h1>
              <p>…</p>
            </div>
            <aside class="related">
              <p>…</p>
            </aside>
          </article>

          <aside class="sidebar">
            <h2>External vegetable-based links</h2>
            <ul>
              <li>…</li>
            </ul>
          </aside>
        </main>

        <footer><p>&copy;2019</p></footer>
      </div>

    </body>
  </html>

#+end_src

**** head
The ~<head>~ (block) element defines the document header, which contains meta information about the HTML page. ~<head>~ may also include [[meta][<meta>]], [[title][<title>]], [[link][<link>]] and other elements.

#+begin_src html

  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Layout Task</title>
    <link href="styles.css" rel="stylesheet" type="text/css">
  </head>

#+end_src

**** body
The ~<body>~ (block) element contains the body of document, which will be rendered by the browser.

#+begin_src html

  <!DOCTYPE html>
  <html lang="en-us">
    <head>
      <meta charset="utf-8" />
    </head>
    <body>
      <div class="myDiv">
        <h2>This is a heading in a div element</h2>
        <p>This is some text in a div element.</p>
      </div>
    </body>
  </html>

#+end_src

**** div
The ~<div>~ (block) tag is a block level non-semantic wrappers element which defines a *division or a section* in an HTML document. The ~<div>~ tag *is used as a container* for HTML elements - which is then styled with CSS or manipulated with JavaScript. Any sort of content can be put inside the ~<div>~ tag!

*Note*: By default, browsers always place a line break before and after the block element (e.g. ~<div>~).

#+begin_src html

  <div class="myDiv">
    <h2>This is a heading in a div element</h2>
    <p>This is some text in a div element.</p>
  </div>

#+end_src

**** span
The ~<span>~ (inline) tag is an *inline container* non-semantic wrappers element used to *mark up* a part of a text, or a part of a document.

Useful when you can't think of a better semantic text element to wrap your content, or don't want to add any specific meaning, it allows you to group a set of elements and declare a set of style rules for the set. It exists purely to apply style, and so has no effect when the style sheet is disabled.

#+begin_src html

  <p>My mother has <span style="color:blue">blue</span> eyes.</p>

#+end_src

*** Meta
**** meta
The ~<meta>~ (meta) tag defines metadata about an HTML document. Metadata is data (information) about data, are typically used to specify character set, page description, keywords, author of the document, and viewport settings. There is a method to let web designers take control over the viewport (the user's visible area of a web page), through the ~<meta>~ tag.

#+begin_src html

  <head>
    <meta charset="UTF-8">
    <meta name="description" content="Free Web tutorials">
    <meta name="keywords" content="HTML, CSS, JavaScript">
    <meta name="author" content="John Doe">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  </head>

#+end_src

**** title
The ~<title>~ (meta) tag defines the title of the document. The title must be text-only, and it is shown in the browser's title bar or in the page's tab. The contents of a page title is very important for search engine optimization (SEO)!

#+begin_src html

  <head>
    <title>Layout Task</title>
  </head>

#+end_src

**** link
The ~<link>~ (meta) tag specifies relationships between the current document and an external resource. This element is most commonly used to link to CSS, but is also used to establish site icons among other things. This element contains attributes only.

#+begin_src html

  <link rel="stylesheet" href="estilo.css" media="screen" type="text/css"
        title="Mi hoja de estilo">
  <!-- It means to link link stylesheet rel="stylesheet" contained in the -->
  <!-- file called href="estilo.css" which is written in CSS language -->
  <!-- type="text/css"that's only valid for computer screens media="screen" -->
  <!-- and is titled title="Mi hoja de estilo". -->

#+end_src

**** style
The ~<style>~ (meta) element contains style information for a document, or part of a document. It contains CSS, which is applied to the contents of the document containing the ~<style>~ element.

#+begin_src html

  <head>
    <style>
      h1 {color:red;}
      p {color:blue;}
    </style>
  </head>

#+end_src

**** script
The ~<script>~ (meta) tag is used to embed a client-side script (JavaScript).

#+begin_src html

  <!-- Include a piece of JavaScript in a document. -->
  <script>alert("hello!");</script>

  <!-- Can be given an src attribute to fetch a script file from a URL. -->
  <script src="path/name.js"></script>

#+end_src

**** noscript
The ~<noscript>~ (meta) tag defines an alternate content to be displayed to users that have disabled scripts in their browser or have a browser that doesn't support script. The ~<noscript>~ element can be used in both [[head][<head>]] and [[body][<body>]]. When used inside ~<head>~, the ~<noscript>~ element could only contain [[link][<link>]], [[style][<style>]], and [[meta][<meta>]] elements.

#+begin_src html

  <script>
    document.write("Hello World!")
  </script>
  <noscript>Your browser does not support JavaScript!</noscript>

#+end_src

**** base
The ~<base>~ (self-closing) tag specifies the base URL and/or target for all relative URLs in a document. The ~<base>~ tag must have either an [[href]] or a target attribute present, or both.

#+begin_src html

  <head>
    <base href="https://www.w3schools.com/" target="_blank">
  </head>

  <body>
    <img src="images/stickman.gif" width="24" height="39" alt="Stickman">
    <a href="tags/tag_base.asp">HTML base Tag</a>
  </body>

#+end_src

*** Section
**** header
The ~<header>~ (block) element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements.

#+begin_src html

  <header>
    <a class="logo" href="#">Cute Puppies Express!</a>
  </header>

  <article>
    <header>
      <h1>Beagles</h1>
      <time>08.12.2014</time>
    </header>
    <p>I love beagles <em>so</em> much! Like, really, a lot. They’re
      adorable and their ears are so, so snuggly soft!</p>
  </article>

#+end_src

**** main
The ~<main>~ (block) element represents the dominant content of the [[body][<body>]] of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application.

A document mustn't have more than one ~<main>~ element that doesn't have the ~hidden~ attribute specified.

#+begin_src html

  <header>Gecko facts</header>

  <main>
    <p>
      Geckos are a group of usually small, usually nocturnal lizards. They
      are found on every continent except Australia.
    </p>

    <p>Many species of gecko have adhesive toe pads which enable them to
      climb walls and even windows.</p>
  </main>

#+end_src

**** article
The ~<article>~ (block) element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.

A given document can have multiple articles in it; for example, on a blog that shows the text of each article one after another as the reader scrolls, each post would be contained in an ~<article>~ element, possibly with one or more [[section][<section>]] within.

#+begin_src html

  <article class="forecast">
    <h1>Weather forecast for Seattle</h1>
    <article class="day-forecast">
      <h2>03 March 2018</h2>
      <p>Rain.</p>
    </article>
    <article class="day-forecast">
      <h2>04 March 2018</h2>
      <p>Periods of rain.</p>
    </article>
    <article class="day-forecast">
      <h2>05 March 2018</h2>
      <p>Heavy rain.</p>
    </article>
  </article>

#+end_src

**** section
The ~<section>~ (block) element represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions.

#+begin_src html

  <h1>Choosing an Apple</h1>
  <section>
    <h2>Introduction</h2>
    <p>This document provides a guide to help with the important task of
      choosing the correct Apple.</p>
  </section>

  <section>
    <h2>Criteria</h2>
    <p>
      There are many different criteria to be considered when choosing an
      Apple — size, color, firmness, sweetness, tartness...
    </p>
  </section>

#+end_src

**** nav
The ~<nav>~ (block) element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes.

#+begin_src html

  <nav class="crumbs">
    <ol>
      <li class="crumb"><a href="#">Bikes</a></li>
      <li class="crumb"><a href="#">BMX</a></li>
      <li class="crumb">Jump Bike 3000</li>
    </ol>
  </nav>

  <h1>Jump Bike 3000</h1>
  <p>
    This BMX bike is a solid step into the pro world. It looks as legit
    as it rides and is built to polish your skills.
  </p>

#+end_src

**** h1-h6
The ~<h1>~ to ~<h6>~ (block) tags are used to define six levels of section headings. ~<h1>~ defines the most important heading. ~<h6>~ defines the least important heading. Note: Only use one ~<h1>~ per page - this should represent the main heading/subject for the whole page. Also, do not skip heading levels - start with ~<h1>~, then use ~<h2>~, and so on.

#+begin_src html

  <h1>Beetles</h1>
  <h2>External morphology</h2>
  <h3>Head</h3>
  <h4>Mouthparts</h4>
  <h3>Thorax</h3>
  <h4>Prothorax</h4>
  <h4>Pterothorax</h4>

#+end_src

**** hgroup
The ~<hgroup>~ HTML element represents a heading and related content. It allows the grouping of a heading with any secondary content, such as subheadings, an alternative title, or tagline. Each of these types of content represented as a [[p][<p>]] element within the ~<hgroup>~.

The ~<hgroup>~ itself has no impact on the document outline of a web page. Rather, the single allowed heading within the ~<hgroup>~ contributes to the document outline.

#+begin_src html

  <hgroup>
    <h1>Frankenstein</h1>
    <p>Or: The Modern Prometheus</p>
  </hgroup>
  <p>
    Victor Frankenstein, a Swiss scientist, has a great ambition: to
    create intelligent life. But when his creature first stirs, he
    realizes he has made a monster. A monster which, abandoned by his
    master and shunned by everyone who sees it, follows Dr Frankenstein to
    the very ends of the earth.
  </p>

#+end_src

**** aside
The ~<aside>~ (block) element represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes.

#+begin_src html

  <p>
    Salamanders are a group of amphibians with a lizard-like appearance,
    including short legs and a tail in both larval and adult forms.
  </p>

  <aside>
    <p>The Rough-skinned Newt defends itself with a deadly neurotoxin.</p>
  </aside>

  <p>
    Several species of salamander inhabit the temperate rainforest of the
    Pacific Northwest, including the Ensatina, the Northwestern Salamander
    and the Rough-skinned Newt. Most salamanders are nocturnal, and hunt
    for insects, worms and other small creatures.
  </p>

#+end_src

**** footer
The ~<footer>~ (block) element represents a footer for its nearest ancestor sectioning content or sectioning root element. A ~<footer>~ typically contains information about the author of the section, copyright data or links to related documents.

#+begin_src html

  <article>
    <h1>How to be a wizard</h1>
    <ol>
      <li>Grow a long, majestic beard.</li>
      <li>Wear a tall, pointed hat.</li>
      <li>Have I mentioned the beard?</li>
    </ol>
    <footer>
      <p>© 2018 Gandalf</p>
    </footer>
  </article>

#+end_src

**** search
The ~<search>~ element is a container representing the parts of the document or application with form controls or other content related to performing a search or filtering operation. The ~<search>~ element semantically identifies the purpose of the element's contents as having search or filtering capabilities. The search or filtering functionality can be for the website or application, the current web page or document, or the entire Internet or subsection thereof.

#+begin_src html

  <header>
    <h1>Movie website</h1>
    <search>
      <form action="./search/">
        <label for="movie">Find a Movie</label>
        <input type="search" id="movie" name="q" />
        <button type="submit">Search</button>
      </form>
    </search>
  </header>

#+end_src

**** address
The ~<address>~ (block) tag defines the contact information for the author/owner of a document or an article. The contact information can be an email address, URL, physical address, phone number, social media handle, etc. The text in the ~<address>~ element usually renders in italic, and browsers will always add a line break before and after the ~<address>~ element.

#+begin_src html

  <address>
    Written by <a href="mailto:webmaster@example.com">Jon Doe</a>.<br>
    Visit us at:<br>
    Example.com<br>
    Box 564, Disneyland<br>
    USA
  </address>

#+end_src

*** Text content
**** p
The ~<p>~ (block) tag defines a paragraph. Browsers automatically add a single blank line before and after each ~<p>~ element.

#+begin_src html

  <p>This is some text in a paragraph.</p>

#+end_src

**** pre
The ~<pre>~ (block) tag defines preformatted text. Text in a ~<pre>~ element is displayed in a fixed-width font, and the text preserves both spaces and line breaks. The text will be displayed exactly as written in the HTML source code.

*Tip*: Useful for writing progra code.

#+begin_src html

  <figure>
    <pre role="img" aria-label="ASCII COW">
        ___________________________
    &lt; I'm an expert in my field. &gt;
        ---------------------------
            \   ^__^
             \  (oo)\_______
                (__)\       )\/\
                    ||----w |
                    ||     ||
    </pre>
    <figcaption id="cow-caption">
      A cow saying, "I'm an expert in my field." The cow is
      illustrated using preformatted text characters.
    </figcaption>
  </figure>

#+end_src

**** hr
~<hr>~ (self-closing) elements create a horizontal rule in the document that denotes a thematic change in the text (such as a change in topic or scene). Visually it just looks like a horizontal line.

#+begin_src html

  <p>
    Ron was backed into a corner by the marauding netherbeasts. Scared, but
    determined to protect his friends, he raised his wand ...
  </p>
  <hr />
  <p>
    Meanwhile, Harry was sitting at home, staring at his royalty statement
    and pondering when the next spin off series would come out ...
  </p>

#+end_src

**** blockquote
The ~<blockquote>~ (block) tag specifies a section that is *long* quoted from another source (contain their own paragraph).

*Tip*: Use [[q][<q>]] for inline (short) quotations.

#+begin_src html

  <blockquote cite="http://www.worldwildlife.org/who/index.html">
    For 50 years, WWF has been protecting the future of nature. The
    world's leading conservation organization, WWF works in 100 countries
    and is supported by 1.2 million members in the United States and close
    to 5 million globally.
  </blockquote>

#+end_src

*** Inline text
**** a
The ~<a>~ (inline) tag defines a hyperlink, which is used to link from one page to another. The most important attribute of the ~<a>~ element is the [[href]] attribute, which indicates the link's destination.

#+begin_src html

  <a href="https://www.w3schools.com">Visit W3Schools.com!</a>

  <a href="mailto:lopez@example.com">La dirección de López</a>

#+end_src

**** em
The ~<em>~ (inline) tag is used to define emphasized text. The content inside is typically displayed in italic. A screen reader will pronounce the words in ~<em>~ with an emphasis, using verbal stress.

Typically this element is displayed in italic type. However, it should not be used to apply italic styling; use the CSS ~font-style~ property for that purpose. Use the [[cite][<cite>]] element to mark the title of a work (book, play, song, etc.). Use the [[i][<i>]] element to mark text that is in an alternate tone or mood, which covers many common situations for italics such as scientific names or words in other languages. Use the [[strong][<strong>]] element to mark text that has greater importance than surrounding text.

~<i>~ vs. ~<em>~
By default, the visual result is the same. However, the semantic meaning is different. The ~<em>~ element represents stress emphasis of its contents, while the ~<i>~ element represents text that is set off from the normal prose, such as a foreign word, fictional character thoughts, or when the text refers to the definition of a word instead of representing its semantic meaning. (The title of a work, such as the name of a book or movie, should use <cite>.)

An example for ~<em>~ could be: "Just do it already!", or: "We had to do something about it". A person or software reading the text would pronounce the words in italics with an emphasis, using verbal stress.

An example for ~<i>~ could be: "The Queen Mary sailed last night". Here, there is no added emphasis or importance on the word "Queen Mary". It is merely indicated that the object in question is not a queen named Mary, but a ship named Queen Mary. Another example for <i> could be: "The word the is an article".

#+begin_src html

  <p>We <em>cannot</em> live like this.</p>

#+end_src

**** i
The ~<i>~ (inline) element represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the ~<i>~ naming of this element.

Be sure the text in question is not actually more appropriately marked up with another element. Use [[em][<em>]] to indicate stress emphasis.

#+begin_src html

  <p>I looked at it and thought <i>This can't be real!</i></p>

  <p><i>Musa</i> is one of two or three genera in the family <i>Musaceae</i>; it includes bananas and plantains.</p>

  <p>
    The term <i>bandwidth</i> describes the measure of how much information can
    pass through a data connection in a given amount of time.
  </p>

#+end_src

**** strong
The ~<strong>~ (inline) tag is used to define text with strong importance, seriousness, or urgency. Typically this element is rendered by default using a bold font weight. However, it should not be used to apply bold styling; use the CSS font-weight property for that purpose. Use the [[b][<b>]] element to draw attention to certain text without indicating a higher level of importance. Use the [[em][<em>]] element to mark text that has stress emphasis.

Another accepted use for ~<strong>~ is to denote the labels of paragraphs which represent notes or warnings within the text of a page.

~<b>~ vs. ~<strong>~
The ~<strong>~ element is for content that is of greater importance, while the ~<b>~ element is used to draw attention to text without indicating that it's more important.

It may help to realize that both are valid and semantic elements in HTML and that it's a coincidence that they both have the same default styling (boldface) in most browsers (although some older browsers actually underline ~<strong>~). Each element is meant to be used in certain types of scenarios, and if you want to bold text for decoration, you should instead actually use the CSS font-weight property.

~<em>~ vs. ~<strong>~
While ~<em>~ is used to change the meaning of a sentence as spoken emphasis does ("I /love/ carrots" vs. "I love /carrots/"), ~<strong>~ is used to give portions of a sentence added importance (e.g., "*Warning*! This is *very dangerous*.").

#+begin_src html

  <p>
    ... the most important rule, the rule you can never forget, no matter
    how much he cries, no matter how much he begs: <strong>never feed him
      after midnight</strong>.
  </p>

#+end_src

**** b
The ~<b>~ (inline) element is used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use ~<b>~ for styling text or granting importance. If you wish to create boldface text, you should use the CSS font-weight property. If you wish to indicate an element is of special importance, you should use the [[strong][<strong>]] element.

Use the ~<b>~ for cases like keywords in a summary, product names in a review, or other spans of text whose typical presentation would be boldfaced (but not including any special importance).

Do not confuse the ~<b>~ element with the ~<strong>~, [[em][<em>]], or [[mark][<mark>]] elements. The ~<strong>~ element represents text of certain importance, ~<em>~ puts some emphasis on the text and the ~<mark>~ element represents text of certain relevance. The ~<b>~ element doesn't convey such special semantic information; use it only when no others fit.

#+begin_src html

  <p>
    The two most popular science courses offered by the school are <b
    class="term">chemistry</b> (the study of chemicals and the composition
    of substances) and <b class="term">physics</b> (the study of the
    nature and properties of matter and energy).
  </p>

#+end_src

**** mark
The ~<mark>~ (inline) element represents text which is marked or highlighted for reference or notation purposes due to the marked passage's relevance in the enclosing context.

#+begin_src html

  <p>Search results for "salamander":</p>

  <hr />

  <p>Several species of <mark>salamander</mark> inhabit the temperate
    rainforest of the Pacific Northwest.</p>

  <p>Most <mark>salamander</mark>s are nocturnal, and hunt for insects,
    worms, and other small creatures.</p>

#+end_src

**** q
The ~<q>~ (inline) tag defines a *short* quotation (frases, refranes...). Browsers normally insert quotation marks around the quotation.

*Tip*: Use [[blockquote][<blockquote>]] for long quotations.

*Note*: What is the difference between ~cite~ and ~q~? Well, the normal thing is to put in ~cite~ the origin of the quote (the author, the book, the person who said that, etc.) and in ~q~ the quote itself. However, both ~q~ and ~blockquote~ have a cite attribute where you can put the source of the citation, although it usually won't be directly represented.

#+begin_src html

  <p>WWF's goal is to: <q>Build a future where people live in harmony with
      nature.</q> We hope they succeed.</p>

#+end_src

**** cite
The ~<cite>~ (inline) tag defines the title of a creative work (e.g. a book, a poem, a song, a movie, a painting, a sculpture, etc.).

*Notes*:
- What is the difference between ~<cite>~ and [[q][<q>]]? Well, the normal thing is to put in ~cite~ the origin of the quote (the author, the book, the person who said that, etc.) and in ~q~ the quote itself. However, both ~q~ and [[blockquote][<blockquote>]] have a cite attribute where you can put the source of the citation, although it usually won't be directly represented.
- A person's name is not the title of a work.

#+begin_src html

  <p><cite>The Scream</cite> by Edward Munch. Painted in 1893.</p>

#+end_src

**** br
The ~<br>~ (inline) tag inserts a single line break. The ~<br>~ tag is useful for writing addresses or poems.

*Note*: Use the tag to enter line breaks, not to add space between paragraphs.

#+begin_src html

  <p>To force<br> line breaks<br> in a text,<br> use the br<br> element.</p>

#+end_src

**** dfn
The ~<dfn>~ (inline) tag stands for the "definition element", and it specifies a term that is going to be defined within the content. The nearest parent of the ~<dfn>~ tag must also contain the definition/explanation for the term.

#+begin_src html

  <p>A <dfn id="def-validator">validator</dfn> is a program that checks for
    syntax errors in code or documents.</p>

  <p><dfn title="HyperText Markup Language">HTML</dfn> is the standard markup
    language for creating web pages.</p>

#+end_src

**** abbr
The ~<abbr>~ (inline) tag defines an abbreviation or an acronym, like "HTML", "CSS", "Mr.", "Dr.", "ASAP", "ATM".

*Tip*: Use the global title attribute to show the description for the abbreviation/acronym when you mouse over the element.

#+begin_src html

  The <abbr title="World Health Organization">WHO</abbr> was founded in 1948.

#+end_src

**** ins
The ~<ins>~ (inline) tag defines a text that has been inserted into a document. Browsers will usually underline inserted text.

#+begin_src html

  <p>My favorite color is <del>blue</del> <ins>red</ins>!</p>

#+end_src

**** del
The ~<del>~ (inline) tag defines text that has been deleted from a document. Browsers will usually strike a line through deleted text.

#+begin_src html

  <p>My favorite color is <del>blue</del> <ins>red</ins>!</p>

#+end_src

*** Lists
**** ol
The ~<ol>~ (block) tag defines an *ordered list*. An ordered list can be numerical or alphabetical. The [[li][<li>]] tag is used to define each list item.

#+begin_src html

  <ol start="50">
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ol>

#+end_src

**** ul
The ~<ul>~ (block) tag defines an *unordered* (bulleted) *list*. Use the ~<ul>~ tag together with the [[li][<li>]] tag to create unordered lists.

#+begin_src html

  <ul>
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ul>

#+end_src

**** li
The ~<li>~ tag defines a *list item*.

#+begin_src html

  <ol>
    <li>Coffee</li>
    <li>Tea</li>
    <li>Milk</li>
  </ol>

#+end_src

**** dl
The ~<dl>~ (block) tag defines a *description list*. The ~<dl>~ tag is used in conjunction with ~<dt>~ (defines terms/names) and ~<dd>~ (describes each term/name).

#+begin_src html

  <dl>
    <dt>Coffee</dt>
    <dd>Black hot drink</dd>
    <dt>Milk</dt>
    <dd>White cold drink</dd>
  </dl>

#+end_src

*** Media
**** img
The ~<img>~ (inline) tag is used to embed an image in an HTML page. Images are not technically inserted into a web page; images are linked to web pages. The ~<img>~ tag creates a holding space for the referenced image.

*Tip*: To link an image to another document, simply nest the ~<img>~ tag inside an [[a][<a>]] tag.

The ~<img>~ tag has two required attributes:
- [[src]] :: Specifies the path to the image
- [[alt]] :: Specifies an alternate text for the image, if the image for some reason cannot be displayed

#+begin_src html

  <!-- How to insert an image: -->
  <img src="img_girl.jpg" alt="Girl in a jacket" width="500" height="600">

  <!-- How to add a hyperlink to an image: -->
  <a href="https://www.w3schools.com">
    <img src="w3html.gif" alt="W3Schools.com" width="100" height="132">
  </a>

#+end_src

**** iframe
The ~<iframe>~ (block) tag specifies an inline frame. An inline frame is used to embed another document within the current HTML document.

*Tip*: It is a good practice to always include a title attribute for the ~<iframe>~. This is used by screen readers to read out what the content of the ~<iframe>~ is.

#+begin_src html

  <iframe src="https://www.w3schools.com" title="W3Schools Free Online Web Tutorials"></iframe>

#+end_src

**** video
The ~<video>~ (block) tag is used to embed video content in a document, such as a movie clip or other video streams.

#+begin_src html

  <video width="320" height="240" controls>
    <source src="movie.mp4" type="video/mp4">
    <source src="movie.ogg" type="video/ogg">
    Your browser does not support the video tag.
  </video>

#+end_src

**** audio
The ~<audio>~ (block) tag is used to embed sound content in a document, such as music or other audio streams.

#+begin_src html

  <audio controls>
    <source src="horse.ogg" type="audio/ogg">
    <source src="horse.mp3" type="audio/mpeg">
    Your browser does not support the audio tag.
  </audio>

#+end_src

*** Forms and Input
**** form
The ~<form>~ (block) tag is used to create an HTML form for user input.

The first example code describes a form with two fields: a small one asking for a name and a larger one to write a message in. When you click the Send button, the form is *submitted*, meaning that the content of its field is packed into an HTTP request and the browser navigates to the result of that request.

#+begin_src html

  <form method="GET" action="example/message.html">
    <p>Name: <input type="text" name="name"></p>
    <p>Message:<br><textarea name="message"></textarea></p>
    <p><button type="submit">Send</button></p>
  </form>


  <form action="/action_page.php" method="get">
    <label for="fname">First name:</label>
    <input type="text" id="fname" name="fname"><br><br>
    <label for="lname">Last name:</label>
    <input type="text" id="lname" name="lname"><br><br>
    <input type="submit" value="Submit">
  </form>

#+end_src

**** label
The ~<label>~ (inline) tag defines a label for some elements.

*Tip*: The ~for~ attribute of ~<label>~ must be equal to the [[id]] attribute of the related element to bind them together. A label can also be *bound to an element* by placing the element inside the ~<label>~ element.

#+begin_src html

  <form action="/action_page.php">
    <input type="radio" id="html" name="fav_language" value="HTML">
    <label for="html">HTML</label><br>
    <input type="radio" id="css" name="fav_language" value="CSS">
    <label for="css">CSS</label><br>
    <input type="radio" id="javascript" name="fav_language" value="JavaScript">
    <label for="javascript">JavaScript</label><br><br>
    <input type="submit" value="Submit">
  </form>

#+end_src

Example js of checked property checkboxes:
The ~<label>~ tag associates a piece of document with an input field. Clicking anywhere on the label will activate the field, which focuses it and toggles its value when it's a checkbox or radio button.

#+begin_src javascript

  <label>
    <input type="checkbox" id="purple"> Make this page purple
  </label>

  <script>
    let checkbox = document.querySelector("#purple");
    checkbox.addEventListener("change", () => {
      document.body.style.background =
          checkbox.checked ? "mediumpurple" : "";
  });
  </script>

#+end_src

**** input
The ~<input>~ (inline) tag specifies an input field where the user can enter data. This element is the most important form element.

*Tip*: Always use the ~<label>~ tag to define labels for ~<input type="text">~, ~<input type="checkbox">~, ~<input type="radio">~, ~<input type="file">~, and ~<input type="password">~.

#+begin_src html

  <form action="/action_page.php">
    <label for="fname">First name:</label>
    <input type="text" id="fname" name="fname"><br><br>
    <label for="lname">Last name:</label>
    <input type="text" id="lname" name="lname"><br><br>
    <input type="submit" value="Submit">
  </form>


  <p><input type="text" value="abc"> (text)</p>
  <p><input type="password" value="abc"> (password)</p>
  <p><input type="checkbox" checked> (checkbox)</p>
  <p><input type="radio" value="A" name="choice">
    <input type="radio" value="B" name="choice" checked>
    <input type="radio" value="C" name="choice"> (radio)</p>
  <p><input type="file"> (file)</p>

#+end_src

**** select
The ~<select>~ (block) element is used to create a drop-down list. The ~<select>~ element is most often used in a form, to collect user input.

The ~name~ attribute is needed to reference the form data after the form is submitted (if you omit the name attribute, no data from the drop-down list will be submitted).

The [[id]] attribute is needed to associate the drop-down list with a label. The [[option][<option>]] tags inside the ~<select>~ element define the available options in the drop-down list.

*Tip*: Always add the [[label][<label>]] tag for best accessibility practices!

#+begin_src html

  <label for="cars">Choose a car:</label>

  <select name="cars" id="cars">
    <option value="volvo">Volvo</option>
    <option value="saab">Saab</option>
    <option value="mercedes">Mercedes</option>
    <option value="audi">Audi</option>
  </select>

#+end_src

**** option
The ~<option>~ tag defines an option in a select list.

*Note*: The ~<option>~ tag can be used without any attributes, but you usually need the value attribute, which indicates what is sent to the server on form submission.

#+begin_src html

  <label for="cars">Choose a car:</label>

  <select id="cars">
    <option value="volvo">Volvo</option>
    <option value="saab">Saab</option>
    <option value="opel">Opel</option>
    <option value="audi">Audi</option>
  </select>

#+end_src

**** button
The ~<button>~ (inline) tag defines a clickable button. Inside a ~<button>~ element you can put text (and tags like [[i][<i>]], [[b][<b>]], [[strong][<strong>]], [[br][<br>]], [[img][<img>]], etc.). That is not possible with a button created with the [[input][<input>]] element!

*Tip*: Always specify the type attribute for a ~<button>~ element, to tell browsers what type of button it is.

#+begin_src html

  <button type="button">Click Me!</button>

#+end_src

*Note*: Some attributes can contain a JavaScript program. The [[button][<button>]] tag shown next (which shows up as a button) has an ~onclick~ attribute. The attribute’s value will be run whenever the button is clicked.

#+begin_src html

  <button onclick="alert('Boom!');">DO NOT PRESS</button>
  <!-- Note that I had to use single quotes for the string in the onclick -->
  <!-- attribute because double quotes are already used to quote the whole -->
  <!-- attribute. I could also have used &quot;. -->

#+end_src


**** optgroup
The ~<optgroup>~ (block) tag is used to group related options in a [[select][<select>]] element (drop-down list).

#+begin_src html

  <label for="cars">Choose a car:</label>
  <select  name="cars" id="cars">
    <optgroup label="Swedish Cars">
      <option value="volvo">Volvo</option>
      <option value="saab">Saab</option>
    </optgroup>
    <optgroup label="German Cars">
      <option value="mercedes">Mercedes</option>
      <option value="audi">Audi</option>
    </optgroup>
  </select>

#+end_src

**** fieldset
The ~<fieldset>~ (block) tag is used to group related elements in a form. The ~<fieldset>~ tag draws a box around the related elements.

#+begin_src html

  <form action="/action_page.php">
    <fieldset>
      <legend>Personalia:</legend>
      <label for="fname">First name:</label>
      <input type="text" id="fname" name="fname"><br><br>
      <label for="lname">Last name:</label>
      <input type="text" id="lname" name="lname"><br><br>
      <label for="email">Email:</label>
      <input type="email" id="email" name="email"><br><br>
      <label for="birthday">Birthday:</label>
      <input type="date" id="birthday" name="birthday"><br><br>
      <input type="submit" value="Submit">
    </fieldset>
  </form>

#+end_src

**** textarea
The ~<textarea>~ (inline) tag defines a multi-line text input control.

*Tip*: Always add the [[label][<label>]] tag for best accessibility practices!

#+begin_src html

  <label for="w3review">Review of W3Schools:</label>

  <textarea id="w3review" name="w3review" placeholder="Something here..."
            rows="4" cols="50">
    At w3schools.com you will learn how to make a website. They offer
    free tutorials in all web development technologies.
  </textarea>

#+end_src

**** table
The ~<table>~ (block) tag defines an HTML table. An HTML table consists of one ~<table>~ element and one or more ~<tr>~, ~<th>~, and ~<td>~ elements. The ~<tr>~ element defines a table row, the ~<th>~ element defines a table header, and the ~<td>~ element defines a table cell. An HTML table may also include ~<caption>~, ~<colgroup>~, ~<thead>~, ~<tfoot>~, and ~<tbody>~ elements.

#+begin_src html

  <table>
    <tr>
      <th>Month</th>
      <th>Savings</th>
    </tr>
    <tr>
      <td>January</td>
      <td>$100</td>
    </tr>
  </table>

#+end_src

*** Miscellaneous
**** template
Serves as a mechanism for holding HTML fragments (hidden from the user when the page loads), which can either be used later via JavaScript or generated immediately into [[Shadow DOM][shadow DOM]].

You can use the ~<template>~ tag if you have some HTML code you want to use over and over again, but not until you ask for it. To do this without the ~<template>~ tag, you have to create the HTML code with JavaScript to prevent the browser from rendering the code.

#+begin_src html

  <!-- hold some content that will be hidden when the loads  -->
  <button onclick="showContent()">Show hidden content</button>

  <template>
    <h2>Flower</h2>
    <img src="img_white_flower.jpg" width="214" height="204">
  </template>

  <!-- JavaScript to display it -->
  <script>
    function showContent() {
      let temp = document.getElementsByTagName("template")[0];
      let clon = temp.content.cloneNode(true);
      document.body.appendChild(clon);
    }
  </script>

#+end_src

**** slot
Part of the [[Web Components]] technology suite—is a *placeholder* inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.

#+begin_src html

  <template>
    <div>Name:
      <slot name="username"></slot>
    </div>
    <div>Birthday:
      <slot name="birthday"></slot>
    </div>
  </template>

#+end_src

**** details
Proporciona la posibilidad de crear un elemento desplegable, que el usuario puede expandir o contraer para ver más información que en principio estará oculta. Se trata de una etiqueta contenedora que actúa como un ~<div>~, salvo que todo el contenido de esta etiqueta no se muestra inicialmente.

En su lugar, aparece una flecha identificativa, que indica si el desplegable está *contraído* (y su contenido oculto) o *desplegado* (y su contenido visible).

#+begin_src html

  <details>
    <p>Esto es una información que en principio aparecerá oculta.</p>
  </details>

#+end_src

Atributo ~open~
Si se indica este atributo, el contenido del desplegable estará visible por defecto, por lo que pulsando encima lo contraemos.

#+begin_src html

  <details open>
    <p>Este contenido estará desplegado y visible por defecto.</p>
  </details>
  <!-- Se puede usar js para añadir el attr open -->
  <!-- const details = document.querySelector("details"); -->
  <!-- details.toggleAttribute("open"); -->


  <!-- El evento toggle se disparará cada vez que el usuario pulse sobre el -->
  <!-- elemento y este se despliegue o contraiga -->
  <!-- const details = document.querySelector("details"); -->
  <!-- details.addEventListener("toggle", function() { -->
  <!--   console.log("¡Acción detectada sobre desplegable!"); -->
  <!-- }); -->

#+end_src

Acordeón exclusivo

#+begin_src html

  <details name="acordeon" open>
    <summary>Sección 1</summary>
    <div>
      Este es el contenido del primer acordeón.
    </div>
  </details>

  <details name="acordeon">
    <summary>Sección 2</summary>
    <div>
      Este es el contenido del segundo acordeón.
    </div>
  </details>

  <details name="acordeon">
    <summary>Sección 3</summary>
    <div>
      Este es el contenido del tercer acordeón.
    </div>
  </details>

#+end_src

Personalizar la flecha

#+begin_src css

  <details>
    <summary>Ver más información</summary>
    <div>
      <p>Información del contenido del acordeón.</p>
    </div>
  </details>
  <style>
  /* Flecha en contenido colapsado */
  details summary::marker {
    content: "⮞ ";
    color: indigo;
    font-size: 1.5rem;
  }

  /* Flecha en contenido desplegado */
  details[open] summary::marker {
    content: "⮟ ";
  }
  </style>

#+end_src

**** summary
Por defecto, la etiqueta [[details][<details>]] añade el texto «Detalles» al acordeón, texto que depende del idioma del navegador. Sin embargo, si dentro de la etiqueta ~<details>~ indicamos una etiqueta ~<summary>~ podremos personalizar el contenido de ese texto informativo al texto que queramos.

#+begin_src html

  <details>
    <summary>Ver más información</summary>
    <div>
      <h2>Nombre del sujeto</h2>
      <img src="wanted.jpg" alt="Foto del sujeto">
    </div>
  </details>

#+end_src

**** dialog
Permite construir ventanas propias de diálogo personalizadas. Dichas ventanas pueden contener toda la información HTML que queramos: texto, imágenes, botones, video o cualquier otra cosa, y ser personalizada mediante CSS.

Tipos de ventanas modales:
- ventana de diálogo :: se denomina así a una ventana que comunica el sistema o máquina con el usuario, para anunciarle información y pedirle confirmación, para pedirle datos, etc.
- ventana de diálogo modal :: se denomina así a una variación de la anterior, donde se obliga al usuario a atenderla y responderla, impidiendo hacer ninguna otra tarea mientras.

La etiqueta ~<dialog>~ tiene un atributo ~open~ que de no establecerlo, se considera que la ventana de diálogo está cerrada (tiene un ~display: none~ de CSS por defecto), por lo que no se muestra.

#+begin_src html

  <!-- Example simple: -->
  <dialog open>
    <p>Esto es un ejemplo de mensaje de diálogo.</p>
  </dialog>


  <!-- Example: -->
  <dialog open>
    <p>
      <svg xmlns="http://www.w3.org/2000/svg" width="32"
           height="32" viewBox="0 0 24 24">
          <path fill="#888888" d="M11 9h2V7h-2m1 13c-4.41 0-8-3.59-8-8s3.59-8
        8-8s8 3.59 8 8s-3.59 8-8 8m0-18A10 10 0 0 0 2 12a10 10 0 0 0 10
        10a10 10 0 0 0 10-10A10 10 0 0 0 12 2m-1 15h2v-6h-2v6Z" />
      </svg>
      Esto es un ejemplo de mensaje de diálogo.
    </p>
    <button>Aceptar</button>
  </dialog>
  <style>
    svg {
    vertical-align: bottom;
    }
  </style>


  <!-- Example with interaction: -->
  <dialog id="alert-dialog">
    <p>Esto es un ejemplo de mensaje de diálogo.</p>
    <button onClick="this.parentElement.close()">Aceptar</button>
  </dialog>

  <button id="show-button">Mostrar diálogo</button>
  <script>
    const showButton = document.querySelector("#show-button");
    showButton.addEventListener("click", function () {
    const alertDialog = document.querySelector("#alert-dialog");
    alertDialog.show();
    });
  </script>
  <!-- En este caso, estamos localizando el botón con id a #show-button y -->
  <!-- escuchando los eventos de click sobre él. Cuando ocurra alguno, -->
  <!-- localizamos la ventana de diálogo con id a #alert-dialog y la -->
  <!-- mostramos ejecutando el método .show(). -->


  <!-- Diálogos modales -->
  <!-- Diferencias con el tipo de ventana del ejemplo anterior: -->
  <!-- Por defecto, el fondo se oscurece un poco -->
  <!-- Se suele centrar también verticalmente, para centrar la atención -->
  <!-- A diferencia de la ventana normal sólo puede haber una ventana modal -->
  <!-- No deja interactuar con ningún otro elemento de la página -->
  <dialog id="alert-dialog">
    <h3>¡Vuelve a la sombra!</h3>
    <img src="gandalf.jpg" alt="Gandalf">
    <p>¡NO... PUEDES... PASAR!</p>
    <button onClick="this.parentElement.close()">Ok!</button>
  </dialog>

  <button id="show-button">Mostrar diálogo</button>
  <style>
    body {
    min-height: 500px;
    }
    /* pseudoelemnto ::backdrop permite hacer cambios sobre la ventana */
    /* descomentar para aplicar los cambios */
    /* #alert-dialog::backdrop { */
    /*   background: linear-gradient(#000d, #000a); */
    /* } */
  </style>
  <script>
    const showButton = document.querySelector("#show-button");
    showButton.addEventListener("click", function () {
    const alertDialog = document.querySelector("#alert-dialog");
    alertDialog.showModal();
    });
  </script>

#+end_src

** Attributes
*** Definition
Elements in HTML have attributes; these are additional values that configure the elements or adjust their behavior in various ways to meet the criteria the users want. HTML attributes provide additional information about HTML elements.

- All HTML elements can have *attributes*
- Attributes are always specified in *the start tag*
- Attributes usually come in name/value pairs like: ~name="value"~

*Note*: Some attributes can contain a JavaScript program. The [[button][<button>]] tag shown next (which shows up as a button) has an ~onclick~ attribute. The attribute’s value will be run whenever the button is clicked.

#+begin_src html

  <button onclick="alert('Boom!');">DO NOT PRESS</button>
  <!-- Note that I had to use single quotes for the string in the onclick -->
  <!-- attribute because double quotes are already used to quote the whole -->
  <!-- attribute. I could also have used &quot;. -->

#+end_src

*** id
The ~id~ global attribute defines an identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).

An id's value must not contain whitespace (spaces, tabs, etc.). Browsers treat non-conforming IDs that contain whitespace as if the whitespace is part of the ID. In contrast to the [[class]] attribute, which allows space-separated values, elements can only have one single ID value.

#+begin_src html

  <p>A normal, boring paragraph. Try not to fall asleep.</p>

  <p id="exciting">The most exciting paragraph. One of a kind!</p>

#+end_src

*** class
The ~class~ global attribute is a space-separated list of the case-sensitive classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the class selectors or functions like the DOM method ~document.getElementsByClassName~. The ~class~ attribute provides a way of classifying similar elements.

#+begin_src html

  <p>Narrator: This is the beginning of the play.</p>

  <p class="note editorial">Above point sounds a bit obvious. Remove/rewrite?</p>

  <p>Narrator: I must warn you now folks that this beginning is very exciting.</p>

  <p class="note">[Lights go up and wind blows; Caspian enters stage right]</p>

#+end_src

*** title
The ~title~ attribute defines some extra information about an element. In most browsers this attribute is displayed as what is often referred to as a tooltip.

The value of the title attribute will be displayed as a tooltip when you mouse over the element:

The main use of the title attribute is to label [[iframe][<iframe>]] elements for assistive technology.

#+begin_src html

  <p title="I'm a tooltip">This is a paragraph.</p>

#+end_src

*** href
The [[a][<a>]] tag defines a hyperlink. The ~href~ attribute specifies the URL of the page the link goes to.

#+begin_src html

  <a href="https://www.w3schools.com">Visit W3Schools</a>

#+end_src

*** src
The [[img][<img>]] tag is used to embed an image in an HTML page. The ~src~ attribute specifies the path to the image to be displayed.

*Note*: In order for the element to be the destination of a hyperlink, its ~name~ attribute must be given a value.

#+begin_src html

  <img src="img_girl.jpg">

#+end_src

*** width height
The [[img][<img>]] tag should also contain the ~width~ and ~height~ attributes, which specify the width and height of the image (in pixels).

#+begin_src html

  <img src="img_girl.jpg" width="500" height="600">

#+end_src

*** alt
The required ~alt~ attribute for the [[img][<img>]] tag specifies an alternate text for an image, if the image for some reason cannot be displayed. This can be due to a slow connection, or an error in the [[src]] attribute, or if the user uses a screen reader.

#+begin_src html

  <img src="img_girl.jpg" alt="Girl with a jacket">

#+end_src

*** style
The ~style~ attribute is used to add styles to an element, such as color, font, size, and more.

#+begin_src html

  <p style="color:red;">This is a red paragraph.</p>

#+end_src

*** defer
Is a boolean attribute. If the ~defer~ attribute is set, it specifies that the script is downloaded in parallel to parsing the page, and executed *after the page has finished parsing* (es equivalente a ponerlo antes del ~</body>~).

*Note*: The ~defer~ attribute is only for external scripts (should only be used if the ~src~ attribute is present).

*Note*: There are several ways an external script can be executed:
- If async is present :: the script is downloaded in parallel to parsing the page, and executed as soon as it is available (before parsing completes)
- If defer is present (and not async) :: the script is downloaded in parallel to parsing the page, and executed after the page has finished parsing
- If neither async or defer is present :: the script is downloaded and executed immediately, blocking parsing until the script is completed

#+begin_src html

  <script src="demo_defer.js" defer></script>

#+end_src

*** Data attributes
**** Brief
HTML is designed with extensibility in mind for data that should be associated with a particular element but need not have any defined meaning. ~data-~ attributes allow us to store extra information on standard, semantic HTML elements without other hacks such as non-standard attributes, or extra properties on DOM.

*Note*: do not store content that should be visible and accessible in data attributes, because assistive technology may not access them. In addition, search crawlers may not index data attributes' values.

The syntax is simple. Any attribute on any element whose attribute name starts with ~data-~ is a data attribute. Say you have an article and you want to store some extra information that doesn't have any visual representation. Just use ~data~ attributes for that:

#+begin_src html

  <article
    id="electric-cars"
    data-columns="3"
    data-index-number="12314"
    data-parent="cars">
    …
  </article>

#+end_src

**** JavaScript access
Reading the values of these attributes out in JavaScript is also very simple. You could use ~getAttribute()~ with their full HTML name to read them, but the standard defines a simpler way: a ~DOMStringMap~ you can read out via a ~dataset~ property.

The ~dataset~ read-only property of the ~HTMLElement~ interface provides read/write access to custom data attributes ( ~data-~ ) on elements. It exposes a map of strings ( ~DOMStringMap~ ) with an entry for each ~data-~ attribute.

To get a ~data~ attribute through the ~dataset~ object, get the property by the part of the attribute name after ~data-~ (note that dashes are converted to camel case).

#+begin_src javascript

  <article
    id="electric-cars"
    data-columns="3"
    data-index-number="12314"
    data-parent="cars">
    …
  </article>

  const article = document.querySelector("#electric-cars");
  // The following would also work:
  // const article = document.getElementById("electric-cars")

  article.dataset.columns; // "3"
  article.dataset.indexNumber; // "12314"
  article.dataset.parent; // "cars"

#+end_src

*Note*: The ~dataset~ property itself can be read, but not directly written. Instead, all writes must be to the individual properties within the ~dataset~, which in turn represent the data attributes.

Each property is a string and can be read and written. In the above case setting ~article.dataset.columns = 5~ would change that attribute to ~"5"~.

**** CSS access
Note that, as data attributes are plain HTML attributes, you can even access them from CSS. For example to show the parent data on the article you can use generated content in CSS with the [[attr()]] function:

#+begin_src css

  <article
    id="electric-cars"
    data-columns="3"
    data-index-number="12314"
    data-parent="cars">
    …
  </article>

  article::before {
    content: attr(data-parent);
  }

#+end_src

You can also use the attribute selectors in CSS to change styles according to the data:

#+begin_src css

  article[data-columns="3"] {
    width: 400px;
  }
  article[data-columns="4"] {
    width: 600px;
  }
#+end_src

Data attributes can also be stored to contain information that is constantly changing, like scores in a game. Using the CSS selectors and JavaScript access here this allows you to build some nifty effects without having to write your own display routines.

Data values are strings. Number values must be quoted in the selector for the styling to take effect.

** DOM
A DOM has a tree-like structure. Each [[Element][element]], [[Attributes][attribute]], and piece of text in the markup language becomes a DOM node in the tree structure. The nodes are defined by their relationship to other DOM nodes. Some elements are parents of child nodes, and child nodes have siblings.

Understanding the DOM helps you design, debug and maintain your CSS because the DOM is where your CSS and the document's content meet up.

#+begin_src html

  <p>
    Let's use:
    <span>Cascading</span>
    <span>Style</span>
    <span>Sheets</span>
  </p>

  <!-- In the DOM, the node corresponding to our <p> element is a parent. Its -->
  <!-- children are a text node and the three nodes corresponding to our -->
  <!-- <span> elements. The SPAN nodes are also parents, with text nodes as -->
  <!-- their children: -->
      P
      ├─ "Let's use:"
      ├─ SPAN
      │  └─ "Cascading"
      ├─ SPAN
      │  └─ "Style"
      └─ SPAN
          └─ "Sheets"

#+end_src

** Dimensions

#+begin_src artist

     -----
       |
       |    ┌-----------------------------------------------------┐  --------
       |    |                                                     |      |
 ---------  |   ┌---------------------------------------------┐   |      |
     |      |   |                                         | ▲ |   |      |
     |      |   |     padding                             |   |   |      |
     |      |   |                                         |   |   |      |
clientHeigh |   |          ┌------------------------------| ═ |   |      |
     |      |   |          |         content area         |   |   | offsetHeigh
     |      |   |          |                              |   |   |      |
     |      |   |          |                              | ▼ |   |      |
 ---------  |   |-----------------------------------------+---|   |      |
       |    |   |◀                         ║║║           ▶|   |   |      |
       |    |   └---------------------------------------------┘   |      |
       |    |  border                                             |      |
       |    └-----------------------------------------------------┘  --------
       |        |----------------clientWidth--------------|
       |    |----------------------offsetWidth--------------------|
       |        |---------------------------scrollWidth-----------------------|
   scrollHeight            ┆
       |                   ┆
       |                   ┆
       |                   ┆         content area
     -----                 └-------------------------------

#+end_src

#+begin_src artist

            ┌-----------------------------------------------------┐   --------
            | Firefox                                       _ x □ |      |
            ┌-----------------------------------------------------┐      |
            |                                                     |      |
  -------   |   ┌---------------------------------------------┐   |      |
     |      |   |                                         | ▲ |   |      |
     |      |   |     padding                             |   |   |      |
     |      |   |                                         |   |   |      |
     |      |   |          ┌------------------------------| ═ |   |  outerHeigh
 innerHeigh |   |          |          content area        |   |   |      |
     |      |   |          |                              |   |   |      |
     |      |   |          |                              | ▼ |   |      |
     |      |   |-----------------------------------------+---|   |      |
     |      |   |◀                         ║║║           ▶|   |   |      |
  -------   |   └---------------------------------------------┘   |      |
       |    |  border                                             |      |
       |    └-----------------------------------------------------┘  --------
       |        |----------------clientWidth--------------|
       |    |----------------------offsetWidth--------------------|
       |        |---------------------------scrollWidth-----------------------|
   scrollHeight            ┆
       |                   ┆
       |                   ┆
       |                   ┆          content area
     -----                 └-------------------------------

#+end_src

#+begin_src
             pageYOffset=0
    -----       -----  ┌───────────┐     -----      ┌-----------┐
      |           |    │           │       |        |           |
      |           |    │           │ pageYOffset=30 |           |
      |    innerHeight │  Display  │       |        |           |
      |           |    │           │     -----      ├───────────┤
  scrollHeight  -----  ├───────────┤                │           │
      |                |           |                │  Display  │
      |                |           |                │           │
      |                |           |                │           │
      |                |           |                ├───────────┤
    -----              └-----------┘                └-----------┘

         scrollHeight = innerHeight + MAX(pageYOffset)

#+end_src

#+begin_src

                                     Level.width=2400
                             |-------------- 2400 ---------------|
             clientWidth=600 |-  600 -|
                             ┌────────┐-------- -------- --------┐
                             │Display │        |        |        |
                             │        │                          |
                             │--------│        |        |        |
                             │◀║║║   ▶│                          |
                             └────────┘-------- -------- --------┘
                             scrollLeft=0

                            left    right
                    ┌--------┌────────┐-------- --------┐
                    |        │Display │        |        |
                    |        │        │                 |
                    |        │--------│        |        |
                    |        │◀ ║║║  ▶│                 |
                    └--------└────────┘-------- --------┘
                           scrollLeft=600

  ┌-------- -------- --------┌────────┐
  |        |        |        │Display │
  |                          │        │
  |        |        |        │--------│
  |                          │◀   ║║║▶│
  └-------- -------- --------└────────┘
                         scrollLeft=1800

#+end_src

* CSS
** Brief
*** Cascading Style Sheets
Cascading Style Sheets is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML. CSS describes how elements should be rendered on screen, on paper, in speech, or on other media.

A style sheet consists of a list of rules. Each rule or rule-set consists of one or more [[Selector][selectors]], and a *declaration block*.

*CSS*:
- is a *markup* language
- describes how elements should be *rendered* (style and position)
- consists of a list of *rules*. Each rule-set consists of one or more [[Selector][selectors]]
- has two main *position* [[Properties][properties]]:
  - [[Display property][display]]: sets whether an element is *treated* as a block or inline box and the layout used for its children, such as [[Normal flow][flow layout]], [[Grid][grid]] or [[Flex][flex]].
  - [[Position][position]]: control the placement of boxes *inside* other boxes with two essential properties:
    - [[Margin][margin]]: It pushes other elements away from the *box* (separa la caja de otras cajas)
    - [[Padding][padding]]: push the *content* away from the border (separa la caja de su contenido que puede ser texto u otra caja (separa la caja exterior de la interna basado en  [[Identifying the containing block][containing block]]))

*** Adding CSS styles
The [[href]] attribute of the [[link][<link>]] element needs to reference a file on your file system.

#+begin_src html

  <!-- 1. Placed in an external CSS file -->
  <link href="path/to/file.css" rel="stylesheet" type="text/css">

  <!-- 2. Inside an opening tag -->
  <h1 style="color: red;">Chapter 1.</h1>

  <!-- 3. Inside body -->
  <style>
    h1 {
    color: red;
    }
  </style>

#+end_src

*** Example website logical sections in style sheet
It is a good idea to have all of the common styling first in the stylesheet. This means all of the styles which will generally apply unless you do something special with that element.

You will typically have rules set up for:
- [[body]]
- [[p]]
- [[h1-h6][h1, h2, h3, h4, h5]]
- [[ul]] and [[ol]]
- The [[table]] properties
- Links

*Tips* on building CSS file:
- use ~:first-child~, ~:last-child~ and ~:nth-child~ to get at non-classed elements
- use ~::before~ and ~::after~ to create pseudo-elements for extra styling
- don't rely on the extra [[div][divs]] at the bottom. Use ~::before~ and ~::after~ instead

#+begin_src css

  /* we are providing default styling for the type on the site */
  /* || GENERAL STYLES */

  body {
    /* … */
  }

  h1,
  h2,
  h3,
  h4 {
    /* … */
  }

  ul {
    /* … */
  }

  blockquote {
    /* … */
  }

  /* we could define a few utility classes */
  /* If you have a few styling choices you know you will want to apply */
  /* to lots of different elements */
  /* || UTILITIES */

  .nobullets {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  /* … */

  /* we can add everything that is used sitewide */
  /* || SITEWIDE */

  .main-nav {
    /* … */
  }

  .logo {
    /* … */
  }

  /* we will include CSS for specific things, broken down by the context, */
  /* page, or even component in which they are used. */
  /* || STORE PAGES */

  .product-listing {
    /* … */
  }

  .product-box {
    /* … */
  }

#+end_src

*** Order of overriding declarations style sheets
Remember that you can create a fallback for older browsers by putting the fallback version of a declaration first, followed by the version that works across newer browsers only. Older browsers will apply the first declaration and ignore the second one, whereas newer browsers will apply the first one, then override it with the second one.

Conflicting declarations will be applied in the following order, with later ones overriding earlier ones:

1. Declarations in user agent style sheets (e.g., the *browser's* default styles, used when no other styling is set).
2. Normal declarations in user style sheets (custom styles set by a *user*).
3. Normal declarations in author style sheets (these are the styles set by us, the *web developers*).
4. Important declarations in author style sheets.
5. Important declarations in user style sheets.
6. Important declarations in user agent style sheets.

*** Work CSS
1. The browser loads the HTML (e.g. receives it from the network).
2. It converts the HTML into a [[DOM]] (Document Object Model). The DOM represents the document in the computer's memory.
3. The browser then fetches most of the resources that are linked to by the HTML document, such as embedded images, videos, and even linked CSS! JavaScript is handled a bit later on in the process.
4. The browser parses the fetched CSS, and sorts the different rules by their selector types into different "buckets", e.g. element, class, ID, and so on. Based on the selectors it finds, it works out which rules should be applied to which nodes in the DOM, and attaches style to them as required (this intermediate step is called a render tree).
5. The render tree is laid out in the structure it should appear in after the rules have been applied to it.
6. The visual display of the page is shown on the screen (this stage is called painting).

What happens if a browser encounters CSS it doesn't understand? The answer is that it does nothing, and just moves on to the next bit of CSS!

** Selector
*** Brief
CSS selectors are used to "*find*" (or select) the HTML elements you want to style.

Selectors, whether used in CSS or JavaScript, enable targeting HTML elements based on their type, attributes, current states, and even position in the DOM. Combinators allow you to be more precise when selecting elements by enabling selecting elements based on their relationship to other elements.

We can divide CSS selectors into five categories:

- Simple selectors :: select elements based on *name*, *id*, *class*
- Attribute selectors :: select elements based on an *attribute* or *attribute value*
- Pseudo-class selectors :: select elements based on a certain *state*
- Pseudo-elements selectors :: select and style a *part of an element*
- Combinator selectors :: select elements based on a specific *relationship* between them

| /Type/         | /Selector/   | /Description/                             |
|--------------+------------+-----------------------------------------|
| Element      | p          | all <p> elements                        |
| ID           | #my-id     | the element with id="my-id"             |
| Class        | .my-class  | all elements with class="my-class"      |
| Attribute    | img[src]   | all elements with img[src]              |
| Pseudo-class | a:hover    | all elements with a:hover               |
| Combined     | p.my-class | only <p> elements with class="my-class" |
| Elements     | div, p     | all <div> elements and all <p> elements |
| All          | *          | all elements                            |

*** Elements (, is())
Targeting an *element selector* — this is a selector that directly matches an HTML element name.

You can *target multiple selectors* at the same time by separating the selectors with a *comma* ( ~,~ ).

- id selector :: an identifier unique within the document, denoted in the selector language by a hash ~#~ prefix
- universal selector :: selects all HTML elements on the page, denoted by a star ~*~ prefix

*Note*: HTML elements can also refer to more than one class.

~:is()~ es un reemplazo práctico de la agrupación de selectores mediante comas.

#+begin_src css

  /* Target all paragraphs in the document */
  p { color: green; }

  /* Rule will be applied to the HTML element with id="my-id": */
  #my-id { color: green; }

  /* Grouping: selects all paragraphs and all list items to be green */
  p, li { color: green; }

  /* Will affect every HTML element on the page */
  * { color: green; }

  /* Reemplazo práctico de la agrupación mediante comas */
  .container .list, /* Especificidad (0,2,0) Espicificidad con is (0,2,0) */
  .container .menu, /* Especificidad (0,2,0) Espicificidad con is (0,2,0) */
  .container ul {   /* Especificidad (0,1,1) Espicificidad con is (0,2,0) */
    /* ... */
  }
  /* equivalent to */
  .container :is(.list, .menu, ul) {
    /* ... */
  }
  /* Con la pseudoclase :is(), se calcula la especificidad sumando la */
  /* especificidad más alta de sus parámetros. */

#+end_src

Por otro lado, existe otro combinador lógico denominado ~:where()~, que funciona exactamente igual que el combinador ~:is()~. La única diferencia que tiene es en cuanto a la especificidad CSS.

Mientras que con el combinador ~:is()~, la especificidad es el valor más alto de la lista de parámetros de ~:is()~, en el caso de ~:where()~ la especificidad CSS es siempre cero.

*** Attribute (^, $, |)
The ~[attribute]~ selector is used to select elements with a specified attribute.

The ~[attribute="value"]~ selector is used to select elements with a specified attribute and value.

#+begin_src css

  /* Selects all elements with a target attribute: */
  [target] { background-color: yellow; }

  /* Selects all <a> elements with a target attribute: */
  a[target] { background-color: yellow; }

  /* Selects all <a> elements with a target="_blank" attribute: */
  a[target="_blank"] { background-color: yellow; }

  /* Selects all elements with a title attribute that contains a */
  /* space-separated list of words, one of which is "flower": */
  [title~="flower"] { border: 5px solid yellow; }
  /* The example above will match elements with title="flower", */
  /* title="summer flower", and title="flower new", but not */
  /* title="my-flower" or title="flowers". */

  /* Selects all elements with a class attribute value that starts with "top" */
  /* Note: The value does not have to be a whole word! */
  [class^="top"] { background: yellow; }

  /* Selects all elements with a class attribute value that ends with "test" */
  /* Note: The value does not have to be a whole word! */
  [class$="test"] { background: yellow; }

  /* <a> elements with an href ending ".org", case-insensitive */
  a[href$=".org" i] { font-style: italic; }

  /* Select elements with the specified attribute, whose value can be */
  /* exactly the specified value, or the specified value followed by a */
  /* hyphen (-). */
  [class|="top"] { background: yellow; }

  /* <a> elements with an href matching "https://example.org" */
  a[href="https://example.org"] { color: green; }

  /* Links with "example" anywhere in the URL */
  a[href*="example"] { background-color: silver; }

  /* Links that start with "https://" and end in ".org" */
  a[href^="https://"][href$=".org"] { color: green; }

  /* Links with "cAsE" anywhere in the URL, with matching capitalization */
  a[href*="cAsE" s] { color: pink; }

#+end_src

*** Subset of the elements (Class)
To select a *subset of the elements* without changing the others, you can add a *class* to your HTML element and target that class in your CSS.

- class selector :: an identifier that can *classify* multiple elements in a document, denoted by a dot ~.~ prefix

#+begin_src css

  /* Target all element that has a class of special */
  .special { font-weight: bold; }

  /* Target any li element that has a class of special */
  li.special { font-weight: bold; }

  /* Target any li and span element that has a class of special */
  li.special, span.special { font-weight: bold; }

#+end_src

HTML elements can also refer to more than one class.

#+begin_src html

  <!-- <p> will be styled according to class="center" and class="large". -->
  <p class="center large">This paragraph refers to two classes.</p>

#+end_src

*** Base on state (Pseudo Classes :, not())
**** Brief
Is a keyword added to a selector that *specifies a special state (comportamiento) of the selected element(s)*. Pseudo-classes are used in CSS selectors to permit formatting based on information that is not contained in the document tree.

Pseudo-classes let you apply a style to an element not only in relation to the content of the document tree, but also in relation to external factors like the history of the navigator (~:visited~, for example), the status of its content (like ~:checked~ on certain form elements), or the position of the mouse (like ~:hover~, which lets you know if the mouse is over an element or not).

For example:
- to select an element ~a~, the selector ~a~ would be enough, but what if I want to give a different appearance to the visited links and those that have not yet been visited?
- the pseudo-class ~:hover~ can be used to select a button when a user's pointer hovers over the button and this selected button can then be styled.
- it can be used to style an element when it gets focus.

A pseudo-class consists of a colon ( ~:~ ) followed by the pseudo-class name (e.g., ~:hover~). The element that a pseudo-class is attached to is defined as an anchor element (e.g., ~button~ in case ~button:hover~).

*Notes*:
- ~a:hover~ MUST come after ~a:link~ and ~a:visited~ in the CSS definition in order to be effective!
- ~a:active~ MUST come after ~a:hover~ in the CSS definition in order to be effective!

~:not()~ permite seleccionar todos los elementos que no cumplan los criterios indicados en sus parámetros entre paréntesis.

- ~:not()~ se puede anidar dentro de otro ~:not()~
- ~:not()~ no acepta pseudoelementos, como ~::before~ o ~::after~
- Al igual que con [[Elements (, is())][:is()]], la especificidad de ~:not()~  es el valor más alto de sus parámetros.

**** Pseudo clases de interacción

#+begin_src css

  /* Any button over which the user's pointer is hovering */
  button:hover {
    color: blue;
  }

  /* ratón sobre un div y resalta todos los enlaces que contiene */
  div:hover a {
    background-color: steelblue;
    color: white;
  }

  /* elementos que están siendo pulsados en ese instante con el ratón */
  a:active { color: #0000FF; }

  /* El campo ha ganado el foco */
  input:focus {
    border: 2px dotted #444
  }

  /* cuando uno de los <input> gana el foco, iluminar también el elemento */
  /* label, que es su contenedor */
  <form>
    <label>Name: <input type="text"></label>
    <label>Email: <input type="text"></label>
  </form>
  <style>
  form:focus-within {
    background: yellow;
  }
  </style>

  /* Removing the underline */
  a:hover { text-decoration: none; }

  /* selected link */
  a:active { color: #0000FF; }

  /* pseudo-classes can be combined with HTML classes: */
  a.highlight:hover { color: #ff0000; }

#+end_src

**** Pseudo clases de ubicación

#+begin_src css

  /* Styles unvisited links pink and visited links green. */
  a:link { color: pink; }

  :any-link {
    background: indigo;
    color: white;
    padding: 5px;
  }

  a:visited { color: green; }


  /* :target */
  <p><a href="#news1">Jump to New content 1</a></p>
  <p><a href="#news2">Jump to New content 2</a></p>

  <p>Click on the links above and the :target selector highlight
     the current active HTML anchor.</p>


  <p id="news1"><b>New content 1...</b></p>
  <p id="news2"><b>New content 2...</b></p>
  <style>
  :target {
    border: 2px solid #D4D4D4;
    background-color: #e5eecc;
  }
  <style>

#+end_src

**** Pseudo clases de estructura y/o posición
***** :root
#+begin_src css

  /* pseudoclase :root sale vencedora por encima de el elemento html por */
  /* mayor especificidad, y sobreescribe el color */
  :root {
    background: black;
  }
  html {
    background: red;
  }

#+end_src

***** :first-child
Select the selector, only if it is the first child of its parent.

First element among a group of sibling elements.

#+begin_src css

  /* slector matches any <p> element that is the first child of any element */
  p:first-child { color: blue; }

#+end_src

***** Select for type

#+begin_src css

  /* Select first for type */
  <div class="container">
    <div class="element">Element 1</div>
    <div class="element">Element 2</div>
    <p class="element">Element 3</p>
    <div class="element">Element 4</div>
  </div>
  <style>
  /* Selecciona "Element 1" */
  .container div:first-of-type {
    background: gold;
  }
  /* Selecciona "Element 3" */
  .container p:first-of-type {
    background: lime;
  }
  /* Selecciona los dos anteriores */
  .container :first-of-type {
    border: 2px solid black;
  }
  </style>


  /* Select nth for type */
  <div class="container">
    <div class="element">Element 1</div>
    <div class="element">Element 2</div>
    <p class="element">Element 3</p>
    <div class="element">Element 4</div>
  </div>
  <style>
    /* Seleccionamos sólo el "Element 2", ya que no hay un segundo <p> */
    .container :nth-of-type(2) {
      background: gold;
    }
  </style>


  /* Only of type */
  <div class="container">
    <strong>Hi</strong>
    <p>Ho</p>
  </div>

  <div class="container">
    <strong>Hi</strong>
  </div>
  <style>
  /* hijos de un padre que sólo tiene un elemento hijo de su mismo tipo */
  /* En este caso, seleccionaría todos */
  .container :only-of-type {
    background: gold;
  }
  </style>

#+end_src

***** :empty

#+begin_src css

  /* navegador no toma vacío el elemento que contiene espacios en blanco */
  <div class="empty container"></div> /* vacío */
  <div class="empty ghost container"> /* no vacío */
  </div>
  <div class="empty comment container"><!-- comentario --></div> /* vacío */
  <style>
  div {
    background: grey;
    width: 100px;
    height: 50px;
    margin: 10px;
  }
  :empty {
    border: 3px solid red;
  }
  </style>

#+end_src

**** Pseudo clases de formularios
***** :checked
#+begin_src css

  /* Selecciona un elemento que ha sido marcado o seleccionado */
  <input type="checkbox" checked> <span>First option</span>
  <input type="checkbox"> <span>Second option</span>
  <input type="checkbox"> <span>Third option</span>
  <style>
  input:checked + span {
    color: green;
  }
  </style>

#+end_src

***** :empty

#+begin_src css

  /* navegador no toma vacío el elemento que contiene espacios en blanco */
  <div class="empty container"></div> /* vacío */
  <div class="empty ghost container"> /* no vacío */
  </div>
  <div class="empty comment container"><!-- comentario --></div> /* vacío */
  <style>
  div {
    background: grey;
    width: 100px;
    height: 50px;
    margin: 10px;
  }
  :empty {
    border: 3px solid red;
  }
  </style>

#+end_src

***** :enabled

#+begin_src css

  /* elementos que se encuentren activados (comportamiento por defecto) */
  <button>Botón activado</button>
  <button disabled>Botón desactivado</button>
  <style>
  button:enabled {
    background-color: green;
  }
  </style>

#+end_src

***** :indeterminate

#+begin_src css

  /* tienen un estado indeterminado donde no se sabe exactamente su estado */
  <input type="checkbox"> <span>First option (Indeterminated)</span>
  <input type="checkbox"> <span>Second option</span>
  <style>
  :indeterminate + span { background: black; }
  </style>
  <script>
  const inputs = document.querySelectorAll("input");
  inputs[0].indeterminate = true;
  </script>

#+end_src

***** :read-only
La diferencia entre un campo con atributo disabled y un campo con atributo readonly es que la información del campo con readonly se enviará a través del formulario, mientras que la del campo con disabled no se enviará. Lo que tienen en común es que ambas están bloqueadas y no permiten modificar su valor, por lo que se suelen percibir como algo equivalente.

*Note*: Ten en cuenta que :read-only aplicará los estilos a todos los elementos HTML que no puedan ser modificados por el usuario. Incluso un ~<div>~ o un ~<p>~ lo identificará como un elemento de solo lectura, siempre y cuando no lleven el atributo contenteditable.

***** :read-write
Es muy útil para dar estilos a todos aquellos elementos que son lectura y escritura (editables) por el usuario, sean campos de texto ~<input>~ o ~<textarea>~.

La pseudoclase read-write también da estilos a elementos HTML que contengan el atributo contenteditable.

***** :placeholder-shown
Permite seleccionar y dar estilo a los elementos que están actualmente mostrando un placeholder.

#+begin_src css

  <input type="text" placeholder="usuario@gmail.com">
  <style>
  input:placeholder-shown {
    background: yellow;
  }
  </style>

#+end_src

***** La pseudoclase :default
Selecciona los elementos de un formulario que se consideran que tienen, de alguna forma, un valor por defecto.

- Elementos ~<input type="checkbox">~ o ~<input type="radio">~ que tienen el atributo checked.
- Elementos ~<selected>~ donde una de sus opciones tiene el atributo selected.
- Elementos ~<button>~ o ~<input type="submit">~ que son el botón por defecto del ~<form>~.

#+begin_src css

  :default {
    background: red;
    color: white;
    border: 3px solid red;
    accent-color: red;
  }

#+end_src

**** Miscellaneous

#+begin_src css

  /* todos los párrafos <p> que no tengan la clase .main, */
  /* se les aplique el estilo especificado */
  p:not(.main) {
    border: 2px solid black;
    padding: 8px;
    color: white;
    background: indigo;
  }

#+end_src

**** Chart

| /Selector/       | /Example/        | /Select/                           |
|----------------+----------------+----------------------------------|
| /Interacción/    |                |                                  |
| :hover         | a:hover        | links on mouse over              |
| :active        | a:active       | the active link                  |
| :focus         | input:focus    | the <input> elem that has focus  |
| :focus-within  |                | un hijo ha ganado el foco        |
| :focus-visible |                | foco sólo de forma visible (TAB) |
|                |                |                                  |
| /Ubicación/      |                |                                  |
| :visited       | a:visited      | all visited links                |
| :link          | a:link         | all unvisited links              |
| :target        |                | ele coincide con ancla URL actua |
| :any-link      |                | ele que es un enlace <a>, <area> |
|                |                |                                  |
| /Estructura/     |                |                                  |
| /Raiz/           |                |                                  |
| :root          |                | matches the root element         |
| :host          |                | raíz de component con Shadow DOM |
|                |                |                                  |
| :empty         | p:empty        | every <p> elem that has no child |
| :first-child   |                |                                  |
| :only-child    | p:only-child   | every <p> that's *only child*      |
| :last-child    | p:last-child   | every <p> that's last child      |
| :nth-child(n)  | p:nth-child(2) | every <p> that's the second chil |
| :first-of-type |                |                                  |
| :only-of-type  |                |                                  |
| :last-of-type  | p:last-of-type | every <p> that's last <p> parent |
| :nth-of-type() |                |                                  |
| :defined       |                |                                  |
|                |                |                                  |
| /Formulario/     |                |                                  |
| :checked       | input:checked  | every checked <input> element    |
| :indeterminate |                |                                  |
| :enabled       | input:enabled  | every enabled <input> element    |
| :disabled      | input:disabled | every disabled <input> element   |
| :read-only     |                |                                  |
| :read-write    |                | editable por el usurario         |
| :placeholder-s |                | mostrando un place holder        |
| :default       |                |                                  |
|                |                |                                  |
| /Estado/         |                |                                  |
| :fullscreen    |                |                                  |
| :modal         |                |                                  |
|                |                |                                  |
| /Paginado/       |                |                                  |
| :first         |                |                                  |
| :left :right   |                |                                  |
| :blank         |                |                                  |
|                |                |                                  |
| /Otros/          |                |                                  |
| :not(selector) | :not(p)        | every element that is not a <p>  |

*** Base on parts of element (Pseudo Elements ::)
**** Brief
Is a keyword added to a selector that lets you *style a specific part of the selected element(s)* (comportamientos virtuales no tangibles).

Los pseudoelementos permiten seleccionar y dar estilo a elementos que no existen en el HTML, o que no son un simple elemento en sí.

For example, it can be used to:
- Style the first letter, or line, of an element
- Insert content before, or after, the content of an element

You can use only one pseudo-element in a selector. The pseudo-element must appear after all the other components in the complex or compound selector in which it appears. For example, you can select a paragraph's first line using ~p::first-line~ but not the first-line's children or a hovered first line. So both ~p::first-line > *~ and ~p::first-line:hover~ are invalid.

While it is not possible to select an element based on its *state* by using pseudo-elements, a pseudo-element can be used to select and style a part of an element that already has a state applied to it. For example, ~p:hover::first-line~ selects the first line (pseudo-element) of a paragraph when the paragraph itself is being hovered (pseudo-class).

*Note*: When a selector list contains an invalid selector, the entire style block is ignored.

#+begin_src css

  /* Syntax */
  selector::pseudo-element {
    property: value;
  }

#+end_src

**** Propiedad content
Su objetivo es crear contenido antes o después del elemento, es utilizada en selectores que incluyen los pseudoelementos [[Pseudo elementos de contenido][::before]], ~::after~, ....

| /CONTENIDO/   | /DESCRIPCIÓN/         | /EJEMPLO/                    |
|-------------+---------------------+----------------------------|
| string      | Añade texto         | content:"Contenido:";      |
| attr()      | Añade atributo HTML | content:attr(href);        |
| image url() | Añade imagen URL    | content:url("icon.png");   |
| gradient    | Añade un gradiente  | content:linear-gradient(); |
| counter     | Define un contador  | content:counter(item);     |

**** Pseudo elementos de contenido (::before)
The ~::before~ selector inserts something before the content of each selected element(s). Use the [[Propiedad content][content]] property to specify the content to insert. Use the ~::after~ selector to insert something after the content.

Creates a pseudo-element that is the first child of the selected element. It is often used to add cosmetic content to an element with the ~content~ property. It is inline by default.

*Note*: The pseudo-elements generated by ~::before~ and ~::after~ are boxes generated as if they were immediate children of the element on which they are applied, or the "originating element," and thus can not apply to [[Replaced elements][replaced elements]], such as ~<img>~, whose content is outside the scope of the CSS formatting model.

#+begin_src css

  /* Syntax */
  ::before {
    content: /* value */;
    /* properties */
  }
  /* If the content property is not specified, has an invalid value, or has */
  /* normal or none as a value, then the ::before pseudo-element is not */
  /* rendered. It behaves as if display: none is set. */


  /* Insert some text before the content of each <p> element: */
  p::before {
    content: "Read this: ";
  }
  /* <p>My name is Donald</p> */   |->  /* Read this -My name is Donald */
  /* <p>I live in Ducksburg</p> */ |-> /* Read this -I live in Ducksburg */


  /* Inserts an image before the content of each <h1> element: */
  h1::before { content: url(smiley.gif); }


  /* attr() */
  <p>Y dije <q data-author="ManzDev">Hola, ¿qué tal?</q>, entre susurros.</p>
  <style>
  q::before {
    content: "«";
    color: red;
  }
  q::after {
    content: "» (" attr(data-author) ")";
    color: red;
  }
  q {
    color: blue;
    font-style: italic;
  }
  </style>
  /* Y dije «Hola, ¿qué tal?» (ManzDev), entre susurros. */

#+end_src

**** Pseudo elementos de tipográfico

#+begin_src css

  /* This can be used to change the font of the first line of a paragraph. */
  /* The first line of every <p> element. */
  p::first-line {
    color: blue;
    text-transform: uppercase;
  }


  /* Pseudo-elements can be combined with HTML classes:  */
  p.intro::first-letter { color: #ff0000; }

#+end_src

**** Pseudo elementos de destacar

#+begin_src css

  /* Cambia el color del resaltado de la selección con el mouse. */
  <p>Selecciona este texto para ver el color.</p>
  <style>
  ::selection {
    background: indigo;
    color: white;
  }
  </style>


  /* Permite modificar los estilos que se aplican a como se muestra un */
  /* error ortográfico en el navegador, que normalmente se visualiza con un */
  /* subrayado ondulado rojo en la palabra o texto afectado. */
  <p>
  Pulsa en el interior del campo de texto
  para que revise la ortografía:
  </p>
    <textarea spellcheck="true">Vamos a cometer un herror
    hortográfico para ver el resaltado de sintaxis.</textarea>
  <style>
    textarea {
    min-width: 400px;
    min-height: 100px;
    font-size: 1.25rem;
  }
  ::spelling-error {
    background: darkred;
    color: white;
  }
  </style>

#+end_src

**** Miscellaneous

#+begin_src css

  /* ::marker */
  <ul>
    <li>Opción número 1.</li>
    <li>Opción número 2.</li>
    <li>Opción número 3.</li>
    <li>Opción número 4.</li>
    <li>Opción número 5.</li>
  </ul>
  <style>
  ul li::marker {
    content: "⮞ ";
    color: red;
  }
  </style>
  /* Ciertas propiedades puede no tener efecto en ::marker, otras como */
  /* font-size, color o content funcionarán */


  /* ::file-selector-button */
  /* Referencia al <button> que se incluye dentro de un elemento <input */
  /* type="file">, o lo que es lo mismo, un botón para enviar ficheros a */
  /* través de un formulario */
  <input type="file" value="Enviar archivo">
  <style>
  input::file-selector-button {
    background: indigo;
    color: white;
    padding: 0.5rem 1rem;
    border: 2px solid black;
  }
  </style>


  /* ::placeholder */
  <input type="text" placeholder="Sugerencia de texto">
  <style>
  input::placeholder {
    background: darkred;
    color: white;
    padding: 5px;
  }
  </style>

#+end_src

**** Chart
| /Selector/       | /Example/         | /Example description/             |
|----------------+-----------------+---------------------------------|
| /Generar/        |                 |                                 |
| ::before       | p::before       | Insert content before every <p> |
| ::after        | p::after        | Insert content after every <p>  |
|                |                 |                                 |
| /Tipográfico/    |                 |                                 |
| ::first-letter | p::first-letter | Selec first letter of every <p> |
| ::first-line   | p::first-line   | Selec first line of every <p>   |
|                |                 |                                 |
| /Destacar/       |                 |                                 |
| ::selection    | p::selection    | Selec portion of ele by user    |
| ::target-text  |                 | texto enlazado tras ancla URL   |
| ::spelling-err |                 | texto resaltado error tipograf  |
| ::grammar-erro |                 | texto resaltado error gramatic  |
|                |                 |                                 |
| /WebComponent/   |                 |                                 |
| ::part         |                 |                                 |
| ::slotted      |                 |                                 |
|                |                 |                                 |
| /Otros/          |                 |                                 |
| ::marker       | ::marker        | Selec the markers of list items |
| ::placeholder  |                 | estilos campos sugerencia input |
| ::file-sel but |                 | estilos a input de subir archiv |
| ::backdrop     |                 | estil fondo ext sin q lo afecte |
|                |                 |                                 |
| /View Trans API/ |                 |                                 |
| ::view-transit |                 |                                 |

*** Base on location (SPACE, +)
Styling things based on their *location* in a document

#+begin_src css

  /* This selector will select any <em> element that is inside (a */
  /* descendant of) an <li> */
  li em {   color: rebeccapurple; }


  /* Styling a paragraph when it comes directly after a heading at the same */
  /* hierarchy level (+ adjacent sibling) */
  h1 + p { font-size: 200%; }

#+end_src

*** Combining selectors (SPACE, >, +, ~, :has())
**** Descendant combinator (SPACE)
Combines two selectors such that elements matched by the second selector are selected if they have an ancestor (parent, parent's parent, parent's parent's parent, etc.) element matching the first selector.

#+begin_src css

  /* Selects all <p> elements inside <div> elements:  */
  div p { background-color: yellow; }

  /* selects any <span> that is inside a <p>, which is inside an <article>  */
  article p span { }

#+end_src

**** Child combinator (>)
It matches only those elements matched by the second selector that are the *direct children* of elements matched by the first. Descendant elements further down the hierarchy don't match.

#+begin_src css

  /* select only <p> elements that are direct children of <article> elements */
  article > p { }

#+end_src

**** Adjacent sibling combinator (+)
It matches only those elements matched by the second selector that are the next sibling element of the first selector.

#+begin_src css

  /* Selects the first <p> that are placed immediately after <div>: */
  div + p { background-color: yellow; }

  /* selects any <p> that comes directly after a <ul>, which comes */
  /* directly after an <h1> */
  h1 + ul + p { }

#+end_src

**** General sibling combinator (~)
When you want to select siblings of an element even if they are not directly adjacent.

#+begin_src css

  /* select all <img> elements that come anywhere after <p> elements */
  p ~ img {}

#+end_src

**** Combinators

#+begin_src css

  /* Style any element with a class of special, which is inside a <p>, */
  /* which comes just after an <h1>, which is inside a <body> */
  body h1 + p .special { color: yellow;background-color: black;padding: 5px; }

  /* select list items with a class of "a" which are direct children of a <ul> */
  ul > li[class="a"] { }

#+end_src

**** :has()
Permite seleccionar un elemento contenedor, siempre y cuando sus elementos hijos (descendientes) cumplan los criterios indicados por los parámetros de ~:has()~, lo que comunmente siempre se ha denominado *el selector padre*.

~:has()~ puede combinar con otros selectores, por ejemplo, utilizando ~:has()~ junto a funciones como ~:nth-child()~ se puede contabilizar el número de elementos hijos que tiene al menos una cantidad de elementos.

~:has()~ se puede utilizar para controlar estados de ciertos elementos de la página. Para ello, podemos utilizar pseudoclases como ~:checked~ o ~:hover~.

*Notes*:
- La pseudoclase ~:has()~ no se puede anidar dentro de otra ~:has()~.
- Los pseudoelementos, como ~::before~ o ~::after~, no funcionan dentro de ~:has()~.
- La especificidad de ~:has()~ es el valor más alto de los selectores indicados por parámetro.


#+begin_src css

  /* aplicamos estilos a TODOS los enlaces <a>. */
  a {
    /* ... */
  }

  /* aplicamos estilos a todos los enlaces <a> que contengan una imagen<img> */
  a:has(> img) {
    /* ... */
  }


  <div class="container">
    <a href="https://manz.dev/"><img src="astronaut.png"alt="Astronauta"></a>
    <a href="https://manz.dev/"><img src="batmanz.png" alt="BatManzDev"></a>
    <a href="https://manz.dev/">https://manz.dev/</a>
  </div>

  img {
    width: 64px;
    height: 64px;
  }

  a {
    border: 3px solid black;
    padding: 5px;
  }

  a:hover {
    border-color: blue;
    color: blue;
  }
  /* cuando se mueva el ratón sobre un enlace que contenga una imagen: */
  a:hover:has(> img) {
    border-color: red;
  }
  /* Ten en cuenta que el color de texto azul se aplicaría también en el */
  /* tercer caso, ya que aunque contenga una imagen, sigue siendo un */
  /* enlace, por lo que también se le aplica el a:hover. */

#+end_src

~:has()~ combinado con otros selectores.

#+begin_src css

  <div class="container">
    <div class="item"></div>
    <div class="item"></div>
  </div>

  <div class="container">
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
  </div>

  <div class="container">
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
  </div>

  <div class="container">
    <div class="item"></div>
    <div class="noitem"></div>
    <div class="noitem"></div>
    <div class="item"></div>
  </div>

  <style>
  .container {
    display: flex;
    gap: 10px;
    background: grey;
    margin: 10px;
  }

  .item {
    width: 50px;
    height: 50px;
    background: #222;
    border: 2px solid black;
  }

  .container:has(:nth-child(3 of .item)) {
    background: indigo;
  }
  </style>
  /*  Utilizando .container:has(:nth-child(3 of .item)) */
  /* estamos seleccionando: Un elemento padre con clase */
  /* .container, que tenga al menos 3 elementos hijos con */
  /* clase .item */
  /* Observa que si al cuarto y último grupo, le cambiaramos los elementos */
  /* hijos, de modo que queden dos .item y dos .noitem, este grupo */
  /* contenedor no tendría estilo, ya que no cumple los criterios de tener */
  /* al menos 3 elementos con clase .item. */

#+end_src

~:has()~ para controlar estados de ciertos elementos de la página.

#+begin_src css

  <label>
    <input type="checkbox"> Marca esta casilla
  </label>

  <div class="container">
    <div class="item"></div>
  </div>

  <style>
  .item {
    width: 50px;
    height: 50px;
    background: grey;
  }

  html:has(input:checked) .item {
    background: indigo;
  }
  </style>

#+end_src

*** Nesting
El operador ~&~ permite hacer referencia al selector inmediatamente padre dentro del anidamiento. Hay una manera simplificada (la sintaxis simple), que es omitiendo el uso de dicho símbolo pero tiene algunas limitaciones.

#+begin_src css

  <div class="container">
  <div class="item"></div>
  </div>
  <style>
  /* New syntax */
  .container {
    width: 800px;
    height: 300px;
    background: grey;

    .item {
      height: 150px;
      background: orangered;
    }
  }
  /* Old syntax */
  .container {
    width: 800px;
    height: 300px;
    background: grey;
  }
  .container .item {
    height: 150px;
    background: orangered;
  }
  </style>


  /* la sintaxis simple no permite colocar elementos directos que no sean */
  /* clases, id, combinadores, etc, por lo que la sintaxis & es usada en */
  /* estos casos */
  .container {
    background: grey;

    & div {
      background: indigo;
    }
  }


  /* Omitiendo el selector & estaríamos obteniendo el selector equivalente
     .container :hover en lugar de .container:hover. Es decir, estaríamos
     aplicando estilos :hover a los elementos dentro de .container en lugar
     de al propio .container. */
  .container {
    background: grey;

    &:hover {
      background: indigo;
    }
  }


  /* Elementos .item que contengan al padre */
  /* El equivalente sería .item .container */
  /* Aunque en principio pueda parecer poco lógico, puede tener sentido en */
  /* casos donde queremos incluir un elemento anidado porque tiene cierta */
  /* relación en este contexto de anidación y quedará mejor organizado. */
  .container {
    width: 800px;
    height: 300px;
    background: grey;

    .item & {
      background: green;
      height: 100px;
    }
  }


  .container {
    width: 800px;
    height: 300px;
    background: grey;

    .item & .item & { }  /* Equivalente a .item .container .item .container */
    :is(.page, .menu) & {} /* Equivalente a .page .container, .menu .container */
    :not(&) { }         /* Equivalente a :not(.container) */
  }


  /* El interior de la regla @media se le aplica al elemento .container */
  .container {
    height: 200px;
    background: grey;

    @media (orientation: landscape) {
      height: 100vh;
    }
  }

#+end_src

*** @
**** Brief
CSS ~@rules~ (pronounced "at-rules") provide instruction for what CSS should perform or how it should behave. Some ~@rules~ are simple with just a keyword and a value.

#+begin_src css

  /* Imports a stylesheet into another CSS stylesheet: */
  @import "styles2.css";


  /* The stylesheet defines a default pink background for the <body> */
  /* element. However, a media query follows that defines a blue background */
  /* if the browser viewport is wider than 30em. */
  body {
    background-color: pink;
  }

  @media (min-width: 30em) {
    body {
      background-color: blue;
    }
  }


  /* Importar estilos CSS de otro fichero */
  @import url("index.css");

#+end_src

**** @import
Is used to import style rules from other valid stylesheets. An ~@import~ rule must be defined at the top of the stylesheet, before any other at-rule (except ~@charset~ and ~@layer~) and style declarations, or it will be ignored.

*Note*: ~@import~ se evalua en el navegador a la hora de cargar la página. Es decir, cada regla ~@import~ equivale a una petición al servidor para descargarse un nuevo archivo ~.css~.

#+begin_src css

  /* Una hoja de estilos CSS externa */
  @import url
  /* Una hoja de estilos CSS si coincide con el media query indicado */
  @import url media query
  /* Hoja de estilos sólo si el navegador soporta la condición */
  @import url supports(condición)
  /* Una hoja de estilos CSS y la colocamos en la capa nombre */
  @import url layer(nombre)
  /* Hoja de estilos y la colocamos en una nueva capa anónima */
  @import url layer()


  /* Importaciones con media queries */
  @import url("mobile.css") (width <= 640px);
  @import url("desktop.css") (width >= 1280px);
  @import url("print.css") print;


  /* Importaciones condicionales */
  @import url("flex-fallback.css") supports(not (display: grid));
  @supports (display: grid) {
    /* ... */
  }


  /* Importaciones en capas */
  @import url("colaviento.css") layer(framework);
  /* Mi código CSS (está en otra capa, separada de framework) */
  /* La idea es que puedes importar un archivo .css y meter su contenido en */
  /* una capa virtual de CSS, donde se revisará la especificidad antes de */
  /* pasar a otra capa. De esta forma puedes mantener aislados los estilos */
  /* de un framework con los tuyos propios y no necesitar utilizar */
  /* !important o reescribir los selectores para forzarlos. */


  /* Importaciones desde Javascript */
  /* Importamos los estilos en un objeto CSSStyleSheet */
  import styles from "./index.css" with { type: "css" };
  /* Añade los estilos al documento */
  document.adoptedStyleSheets.push(styles);

#+end_src

**** @supports
Permite establecer *fragmentos de código CSS condicionales*, aplicando estilos CSS sólo cuando se cumplen ciertas condiciones y restricciones.

#+begin_src css

  /* Solo aplica los estilos si tiene oporte de Grid CSS. */
  @supports (display: grid) {
    .content {
      display: grid;
      grid-template-columns: 1fr 1fr;
    }
  }


  /* Aplicar solo si el navegador no soporta Grid CSS pero si soporta Flex. */
  @supports not (display: grid) and (display: flex) {
    .content {
      display: flex;
      justify-content: center;
    }
  }


  /* Primera regla aplica cualquier navegador, moderno o antiguo. La */
  /* segunda regla anula la primera y aplica para navegadores que soporten */
  /* grid y la tercera para navegadores que soporten flex. */
  .content {
    display: inline-block;
  }
  @supports (display: grid) {
    .content {
      display: grid;
      grid-template-columns: 1fr;
      justify-content: center;
    }
  }
  @supports not (display: grid) and (display: flex) {
    .content {
      display: flex;
      justify-content: center;
    }
  }

#+end_src

**** @property
It allows developers to explicitly define their [[Custom properties (--)][CSS custom properties]], allowing for property type checking and constraining, setting default values, and defining whether a custom property can inherit values or not.

The ~@property~ rule represents a custom property registration directly in a stylesheet without having to run any JS. Valid ~@property~ rules result in a registered custom property, as if ~registerProperty()~ had been called with equivalent parameters.

#+begin_src css

  /* Syntax */
  @property --property-name {
    syntax: "<color>"; /* tipo de dato */
    inherits: false;
    initial-value: #c0ffee;
  }


  /* Ejemplo */
  /* Se crea una animación para mover un elemento, el valor a animar es un */
  /* tamaño que está guardado en una variable CSS. El navegador desconoce */
  /* el tipo de dato, por lo que no aplicará la animación sino que saltará */
  /* de golpe entre el primer valor y el último: */
  <div class="element"></div>
  <style>
  .element {
    --x: 0;

    width: 200px;
    height: 200px;
    background: red;
    animation: move 2s alternate infinite;
    translate: var(--x) 0;
  }
  @keyframes move {
    to { --x: 300px; }
  }

  /* Descomentando estas líneas se puede indicar específicamente el tipo de */
  /* dato, entendiendo que esa variable contendrá un tamaño. */
  /* @property --x { */
  /*   syntax: "<length>"; */
  /*   inherits: true; */
  /*   initial-value: 0 */
  /* } */
  </style>


  /* Usar @property desde JS */
  CSS.registerProperty({
      name: "--color",
      syntax: "<color>",
      inherits: false,
      initialValue: "red"
    })

#+end_src

** Properties
*** Brief
**** Definition
At its most basic level, CSS consists of two components:

- properties :: these are human-readable identifiers that indicate which stylistic features you want to modify.
- values :: each property is assigned a value. This value indicates how to style the property.

When a property is paired with a value, this pairing is called a *CSS declaration*. CSS declarations are found within CSS Declaration Blocks, which are paired with selectors to produce *CSS rulesets* (or CSS rules).

#+begin_src css

  /* The example below contains two rules: one for the h1 selector and one */
  /* for the p selector. */
  h1 { color: blue; background-color: yellow; }
  p { color: red; }

#+end_src

**** CSS-wide values
In addition to the pre-defined keywords that are part of the specification for a property, all CSS properties accept the CSS-wide property values ~initial~ , ~inherit~ , ~unset~ , ~revert~ , and ~revert-layer~ , which explicitly specify defaulting behaviors.

- initial :: Represents the value specified as the property's initial value.

- inherit :: Represents the computed value of the property on the element's parent, provided it is inherited.

- unset :: Acts as either ~inherit~ or ~initial~, depending on whether the property is inherited or not.

- revert :: Resets the property to its inherited value if it inherits from its parent or to the default value established by the user agent's stylesheet (or by user styles, if any exist).

- revert-layer :: Rolls back the value of a property in a cascade layer to the value of the property in a CSS rule matching the element in a previous cascade layer. The value of the property with this keyword is recalculated as if no rules were specified on the target element in the current cascade layer.

**** content
Replaces content with a generated value. It can be used to define what is rendered inside an element or pseudo-element. For elements, the ~content~ property specifies whether the element renders normally (~normal~ or ~none~) or is replaced with an image (and associated "alt" text). For pseudo-elements and margin boxes, ~content~ defines the content as images, text, both, or none, which determines whether the element renders at all.

Objects inserted using the ~content~ property are anonymous [[Replaced elements][replaced elements]].

#+begin_src css

  <h2>Paperback Best Sellers</h2>
  <ol>
    <li>Political Thriller</li>
    <li class="new-entry">Halloween Stories</li>
    <li>My Biography</li>
    <li class="new-entry">Vampire Romance</li>
  </ol>

  <style>
  .new-entry::after {
    /* The leading space creates separation between the DOM node's content
  and the generated content being added. */
    content: " NEW!";
    color: red;
  }
  </style>
  /* Ouput: */
  /* Paperback Best Sellers */
  /*   1. Political Thriller */
  /*   2. Halloween Stories  NEW! */
  /*   3. My Biography */
  /*   4. Vampire Romance  NEW! */

#+end_src

*** Custom properties (--)
**** Brief
Custom properties (sometimes referred to as CSS variables or cascading variables) are entities defined by CSS authors that represent specific values to be reused throughout a document. They are set using the ~@property~ at-rule or by custom property syntax (e.g., ~--primary-color: blue;~). Custom properties are accessed using the CSS [[var()]] function (e.g., ~color: var(--primary-color);~).

Complex websites have very large amounts of CSS, and this often results in a lot of repeated CSS values. For example, it's common to see the same color used in hundreds of different places in stylesheets. Changing a color that's been duplicated in many places requires a search and replace across all rules and CSS files. Another benefit is readability and semantics.

Custom properties defined using two dashes ( ~--~ ) are subject to the cascade and inherit their value from their parent. The ~@property~ at-rule allows more control over the custom property and lets you specify whether it inherits its value from a parent, what the initial value is, and the type constraints that should apply.

*Note*: You can use the ~var()~ function in any part of a value in any property on an element. You cannot use ~var()~ for property names, selectors, or anything aside from property values, which means you can't use it in a media query or container query.

#+begin_src css

  /* Syntax */
  --somekeyword: left;
  --somecolor: #0000ff;
  --somecomplexvalue: 3px 6px rgb(20 32 54);


  /* Example */
  :root {
    --first-color: #16f;
    --second-color: #ff7;
  }

  #firstParagraph {
    background-color: var(--first-color);
    color: var(--second-color);
  }

  #secondParagraph {
    background-color: var(--second-color);
    color: var(--first-color);
  }

  #container {
    --first-color: #290;
  }

  #thirdParagraph {
    background-color: var(--first-color);
    color: var(--second-color);
  }

  /* html */
  <p id="firstParagraph">
    This paragraph should have a blue background and yellow text.
  </p>
  <p id="secondParagraph">
    This paragraph should have a yellow background and blue text.
  </p>
  <div id="container">
    <p id="thirdParagraph">
      This paragraph should have a green background and yellow text.
    </p>
  </div>

#+end_src

| Initial value  | see prose                               |
| Applies to     | all elements                            |
| Inherited      | yes                                     |
| Computed value | as specified with variables substituted |
| Animation type | discrete                                |

**** Using a prefix of two dashes (--)
A custom property prefixed with two dashes begins with ~--~ , followed by the property name (e.g., ~--my-property~ ), and a property value that can be any [[CSS-wide values][valid CSS value]]. Like any other property, this is written inside a ruleset.

#+begin_src css

  /* create a custom property --main-bg-color and */
  /* uses a <named-color> value of brown */
  section {
    --main-bg-color: brown;
  }

#+end_src

The selector given to the ruleset (~<section>~ elements in the example above) defines the scope in which the custom property can be used. For this reason, a common practice is to define custom properties on the ~:root~ pseudo-class, so that it can be referenced globally:

#+begin_src css

  :root {
    --main-bg-color: brown;
  }

#+end_src

Regardless of which method you choose to define a custom property, you use them by referencing the property in a [[var()]] function in place of a standard property value:

#+begin_src css

  details {
    background-color: var(--main-bg-color);
  }

#+end_src

**** Using the @property at-rule
The ~@property~ at-rule allows you to be more expressive with the definition of a custom property with the ability to associate a type with the property, set default values, and control inheritance.

*Note*: If you want to define or work with custom properties in JavaScript instead of directly in CSS, there is a corresponding API for this purpose.

#+begin_src css

  /* creates a custom property called --logo-color which expects a <color>: */
  @property --logo-color {
    syntax: "<color>";
    inherits: false;
    initial-value: #c0ffee;
  }

#+end_src

**** Inheritance of custom properties
A custom property defined using two dashes ~--~ instead of ~@property~ always inherits the value of its parent.

#+begin_src css

  /* html */
  <div class="one">
    <p>One</p>
    <div class="two">
      <p>Two</p>
      <div class="three"><p>Three</p></div>
      <div class="four"><p>Four</p></div>
    </div>
  </div>

  <style>
  div {
    background-color: var(--box-color);
  }

  .two {
    --box-color: cornflowerblue;
  }

  .three {
    --box-color: aquamarine;
  }
  </style>

#+end_src

The results of ~var(--box-color)~ depending on inheritance are as follows:

- class="one" :: /invalid value/, which is the default value of a custom property defined in this way
- class="two" :: ~cornflowerblue~
- class="three" :: ~aquamarine~
- class="four" :: ~cornflowerblue~ (inherited from its parent)

One aspect of custom properties that the examples above demonstrate is that they don't behave exactly like variables in other programming languages. The value is computed where it is needed, not stored and reused in other places of a stylesheet. For instance, you cannot set a property's value and expect to retrieve the value in a sibling's descendant's rule. The property is only set for the matching selector and its descendants.

**** Values in JavaScript
To use the values of custom properties in JavaScript, it is just like standard properties.

#+begin_src javascript

  // get variable from inline style
  element.style.getPropertyValue("--my-var");

  // get variable from wherever
  getComputedStyle(element).getPropertyValue("--my-var");

  // set variable on inline style
  element.style.setProperty("--my-var", jsVar + 4);

#+end_src

*** Display
**** display
The display CSS property *sets whether an element is treated as a block or inline box and the layout used for its children*, such as [[Normal flow][flow layout]], [[Grid][grid]] or [[Flex][flex]].

Formally, the ~display~ property sets an element's inner and outer *display types*. The outer type sets an element's participation in flow layout; the inner type sets the layout of children. Some values of ~display~ are fully defined in their own individual specifications; for example the detail of what happens when ~display: flex~ is declared is defined in the CSS Flexible Box Model specification.

In HTML, the default display property value is taken from the HTML specifications or from the browser/user default style sheet. The default value in XML is inline, including SVG elements.

| /VALUE/        | /DESCRIPTION/                                        |
|--------------+----------------------------------------------------|
| inline       | Se coloca en horizontal. Se adapta al ancho        |
|              | de su contenido. Ignora width o height             |
| block        | Se apila en vertical. Ocupa todo el ancho          |
|              | disponible de su etiqueta contenedora              |
| inline-block | Combinación de los dos anteriores. Se comporta     |
|              | como inline pero no ignora width o height          |
| none         | Oculta el elemento, como si no existiera en HTML   |
|              |                                                    |
| /Flex/         |                                                    |
| flex         | Utiliza el modelo de cajas flexibles               |
| inline-flex  | Versión en línea Flex (ocupa sólo su contenido)    |
|              |                                                    |
| /Grid/         |                                                    |
| grid         | Utiliza cuadrículas con el modelo de cajas Grid    |
| inline-grid  | La versión en línea Grid (ocupa sólo su contenido) |
|              |                                                    |
| /Lista/        |                                                    |
| list-item    | Actúa como un ítem de lista (comportamiento <li>)  |
|              |                                                    |
| /Tabla/        |                                                    |
| table        | Actúa como tabla (comportamiento <table>)          |
| table-cell   | Actúa como celda (comportamiento <th> <td>)        |
| table-roll   | Actúa como fila (comportamiento <tr>)              |
|              |                                                    |
| /Otros/        |                                                    |
| contents     | Ignora la caja del elemento. Útil para mantener    |
|              | Grid/Flex aún teniendo wrapper intermedio          |

#+begin_src css

  /* Visibility in elements */
  display: none; /* Remove element  */
  visible: hidden; /* Hides the element */
  opacity: value; /* Set transparence from 0 to 1. El grado de opacidad
  establecido se aplicará al elemento en cuestión y a todos sus hijos. */

#+end_src

**** Outer display type
(Define como se comporta un elemento con respecto a los elementos a su alrededor (fuera de este), como fluye en la página)
The display type of an element defines the outer display type; this dictates *how the box displays alongside other elements in the same formatting context*.

If a box has an outer display type of ~block~, then:
- The box will break onto a new line.
- The ~width~ and ~height~ properties are respected.
- Padding, margin and border will cause other elements to be pushed away from the box.
- If ~width~ is not specified, the box will extend in the inline direction to fill the space available in its container. In most cases, the box will become as wide as its container, filling up 100% of the space available.

Some HTML elements, such as [[h1-h6][<h1>]] and [[p][<p>]], use block as their outer display type by default.

If a box has an outer display type of ~inline~, then:
- The box will not break onto a new line.
- The ~width~ and ~height~ properties will not apply.
- Vertical padding, margins, and borders will apply but will not cause other inline boxes to move away from the box.
- Horizontal padding, margins, and borders will apply and will cause other inline boxes to move away from the box.

Some HTML elements, such as [[a][<a>]], [[span][<span>]], ~<em>~ and ~<strong>~ use inline as their outer display type by default.

**** Inner display type
Boxes also have an inner display type, which dictates how elements inside that box are laid out, an example is [[Flexbox]].

Block and inline layout is the default way things behave on the web. By default and without any other instruction, the elements inside a box are also laid out in normal flow and behave as block or inline boxes.

You can change the inner display type for example by setting ~display: flex;~. The element will still use the outer display type ~block~ but this changes the inner display type to ~flex~. Any direct children of this box will become flex items and *behave according to the Flexbox specification*.

**** inline boxes
In inline boxes like ~<span>~ the ~width~ and ~height~ are ignored. The vertical margin, padding, and border are respected but don't change the relationship of other content to our inline box. The padding and border overlap other words in the paragraph. The horizontal padding, margins, and borders move other content away from the box.

**** inline-block
~display: inline-block~ is a special value of ~display~ property, which provides a middle ground between ~inline~ and ~block~. Use it if you *do not want an item to break onto a new line, but do want it to respect* ~width~ and ~height~ and avoid the overlapping.

An element with ~display: inline-block~ does a subset of the block things:

- The ~width~ and ~height~ properties are respected.
- ~padding~, ~margin~, and ~border~ will cause other elements to be pushed away from the box.

It does not, however, break onto a new line, and will only become larger than its content if you explicitly add ~width~ and ~height~ properties.

*Note*: Where this can be useful is when you want to give a link a larger hit area by adding ~padding~. ~<a>~ is an inline element like ~<span>~; you can use ~display: inline-block~ to allow padding to be set on it, making it easier for a user to click the link.

**** vertical-align
The default ~vertical-align~ value is baseline which aligns the baseline of the box with the baseline of the parent box.

*Baseline* is defined as the line upon which most letters "sit" and below which descenders extend.

*Note*: when aligning a container that has a ~display: inline-block~ property  and elements inside it, with another inline element, it might not align as expected, this is because this ~inline-block~ container is alingned with the ~vertical-aling~ property that by default is baseline. To correct this behavior if you wish the elements to align the same line with each other, change this value to, for example, ~bottom~ or ~top~.

*Note*: another brief explanation with focus in text inside element and different ~inline-block~ values -> [[https://www.brunildo.org/test/inline-block.html][brunildo]].

#+begin_src css

  /* Example of alignment with vertical-align:  */
  <div class="block"></div>

  <div class="container">
    <div class="element">
      <span>xxxxxjjjjjjxxxxxxx</span>
      <span>xxxx</span>
    </div>
  </div>

  <div class="block"></div>

  <style>
  .container {
    width: 80px;
    height: 100px;
    background: blue;
    border-radius: 10%;
    display: inline-flex;
    vertical-align: baseline; /* default */
    /* Uncoment one by one to see the difference */
    /* vertical-align: top; */
    /* vertical-align: bottom; */
  }
  .block {
    width: 50px;
    height: 50px;
    background: red;
    display: inline-flex;
  }
  </style>

#+end_src

**** Block and inline layout in normal flow
*Formatting context*
For elements with a *block formatting context*, the spec says:

"In a block formatting context, boxes are laid out one after the other, *vertically*, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the 'margin' properties. Vertical margins between adjacent block-level boxes in a block formatting context collapse.

In a block formatting context, each box's left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch)."

For elements with an *inline formatting context*:

"In an inline formatting context, boxes are laid out *horizontally*, one after the other, beginning at the top of a containing block. Horizontal margins, borders, and padding are respected between these boxes. The boxes may be aligned vertically in different ways: their bottoms or tops may be aligned, or the baselines of text within them may be aligned.

The line box size in the block direction (so the height when working in English) is defined by the tallest box inside it.

**** Replaced elements
The *replaced element* can be a block or inline element. What defines it is the fact that its dimensions are unknown in principle. For instance, a ~img~ element. The browser will replace the element with a ~img~ . The ~img~ will have an [[The natural or intrinsic size of things][intrinsic]] height and width, but in the HTML code those dimensions do not appear, until the element is  not replaced by the corresponding ~img~, the dimensions are not unknown.

Images and video are described as replaced elements. *This means that CSS cannot affect the internal layout of these elements* — only their position on the page amongst other elements.

Keep in mind that replaced elements, when they become part of a grid or flex layout, have different default behaviors, essentially to avoid them being stretched strangely by the layout.

**** contents
Hay situaciones donde se puede arruinar el diseño de maquetaciones Grid o Flex, porque son sistemas que funcionan relacionando un elemento padre con su hijo, por lo que si se cambia el marcado HTML de forma que se rompa esa relación, el diseño deja de ser efectivo.

Imaginemos la siguiente situación, donde tenemos un layout creado con Grid:

#+begin_src css

  <div class="grid">
    <div class="item item-1"></div>
    <div class="item item-2"></div>
    <div class="item item-3"></div>
    <div class="item item-4"></div>
    <div class="item item-5"></div>
    <div class="item item-6"></div>
  </div>
  <style>
  .grid {
    display: grid;
    grid-template-columns: repeat(3, 200px);
    grid-template-rows: repeat(2, 100px);
    gap: 10px;
  }

  .item {
    background: deeppink;
  }
  </style>

#+end_src

Si introducimos un elemento con clase ~.middle~ dentro del ~.grid~, que envuelva a todos los ~.item~, el grid dejaría de funcionar porque se ha eliminado la relación padre-hijo entre ~.grid~ y los elementos ~.item~. Sin embargo, si añadimos un ~.middle~ con un CSS asociado ~.middle { display: contents }~, el navegador ignorará ese elemento intermedio que insertamos por razones de funcionalidad (normalmente en situaciones de sólo diseño no ocurre) y hará como que no existe:

#+begin_src css

  <div class="grid">
    <div class="middle">
      <div class="item item-1"></div>
      <div class="item item-2"></div>
      <div class="item item-3"></div>
      <div class="item item-4"></div>
      <div class="item item-5"></div>
      <div class="item item-6"></div>
    </div>
  </div>
  <style>
  .grid {
    display: grid;
    grid-template-columns: repeat(3, 200px);
    grid-template-rows: repeat(2, 100px);
    gap: 10px;
  }

  .item {
    background: deeppink;
  }

  .middle {
    display: contents;
  }
  </style>

#+end_src

*** Overflow
Sets the desired behavior when content does not fit in the parent element box (overflows) in the horizontal and/or vertical direction.

The overflow property is how you take control of an element's overflow. It is the way you instruct the browser how it should behave. The default value of overflow is ~visible~. With this default, we can see content when it overflows.

To crop content when it overflows, you can set ~overflow: hidden~. This does exactly what it says: it hides overflow. Beware that this can make some content invisible. You should only do this if hiding content won't cause problems.

Instead, perhaps you would like to add scrollbars when content overflows? Using ~overflow: scroll~, browsers with visible scrollbars will always display them—even if there is not enough content to overflow. This offers the advantage of keeping the layout consistent, instead of scrollbars appearing or disappearing, depending upon the amount of content in the container.

When developing a site, always keep overflow in mind. Test designs with large and small amounts of content. Increase the font sizes of text. Generally ensure that your CSS works in a robust way. Changing the value of overflow to hide content, or to add scrollbars, is likely to be reserved for a few select use cases (for example, where you intend to have a scrolling box).

#+begin_src css

  overflow-x  visible | hidden | scroll | auto
  overflow-y  visible | hidden | scroll | auto
  overflow    [overflow-x] [overflow-y]


  /* Ejemplo: Tenemos un circulo rojo en un fondo azul celeste. El */
  /* proposito es quedarse con la mitad izquierda del círculo y cuadrado. */
  <div class="container">
    <div class="element"></div>
  </div>
  <style>
  .container {
    width: 200px;
    height: 200px;
    background: cyan;
  }

  .element {
    width: 200px;
    height: 200px;
    background: red;
    border-radius: 50%;
  }
  /* Descomentar y comentar el anterior .container para */
  /* reducir el tamaño del contenedor, ocultar y conseguir el proposito. */
  /* .container { */
  /*   width: 100px; */
  /*   height: 200px; */
  /*   background: cyan; */
  /*   overflow: hidden; */
  /* } */
  </style>

#+end_src

*** Box size
**** width
The ~width~ property sets an element's width. By default, it sets the width of the [[content][content area]] but if ~box-sizing~ is set to ~border-box~, it sets the width of the border area.

The specified value of ~width~ applies to the content area so long as its value remains within the values defined by ~min-width~ and ~max-width~.

- If the value for width is less than the value for ~min-width~, then ~min-width~ overrides ~width~.
- If the value for width is greater than the value for ~max-width~, then ~max-width~ overrides ~width~.

#+begin_src css

  /* <length> values */
  width: 300px;
  width: 25em;

  /* <percentage> value */
  width: 75%;

  /* Keyword values */
  width: max-content;
  width: min-content;
  width: fit-content;
  width: fit-content(20em);
  width: auto;

#+end_src

**** height
The ~height~ property specifies the height of an element. By default, the property defines the height of the [[content][content area]]. If ~box-sizing~ is set to ~border-box~, however, it instead determines the height of the border area.

The ~min-height~ and ~max-height~ properties override height.

#+begin_src css

  /* <length> values */
  height: 120px;
  height: 10em;
  height: 100vh;

  /* <percentage> value */
  height: 75%;

  /* Keyword values */
  height: max-content;
  height: min-content;
  height: fit-content;
  height: fit-content(20em);
  height: auto;

#+end_src

**** box-sizing
Sets how the total width and height of an element is calculated. Can be ~content-box~ (no incluyen borde, relleno y/o margen) *default* value or ~border-box~ (incluyen el borde y relleno.).

The ~box-sizing~ property can be used to adjust this behavior:

- [[The standard CSS box model][content-box]] :: gives you the default CSS box-sizing behavior. If you set an element's width to 100 pixels, then the element's content box will be 100 pixels wide, and the width of any border or padding will be added to the final rendered width, making the element wider than 100px.

- [[The alternative CSS box model][border-box]] ::  tells the browser to account for any border and padding in the values you specify for an element's width and height. If you set an element's width to 100 pixels, that 100 pixels will include any border or padding you added, and the content box will shrink to absorb that extra width. This typically makes it much easier to size elements. ~box-sizing: border-box~ is the default styling that browsers use for the ~<table>~ , ~<select>~ , and ~<button>~ elements, and for ~<input>~ elements whose type is ~radio~ , ~checkbox~ , ~reset~ , ~button~ , ~submit~ , ~color~ , or ~search~.

*Note*:
- It is often useful to set ~box-sizing~ to ~border-box~ to *lay out elements*. This makes dealing with the sizes of elements much easier, and generally eliminates a number of pitfalls you can stumble on while laying out your content.
- When using ~position: relative~ or ~position: absolute~, use of ~box-sizing: content-box~ allows the positioning values to be *relative to the content*, and independent of changes to border and padding sizes, which is sometimes desirable.

#+begin_src css

  box-sizing: content-box; /* default */
  box-sizing: border-box;

#+end_src

**** inline-size
The ~inline-size~ CSS property defines the *horizontal or vertical size of an element's block*, depending on its writing mode. It corresponds to either the ~width~ or the ~height~ property, depending on the value of [[writing-mode]].

If the writing mode is vertically oriented, the value of ~inline-size~ relates to the height of the element; otherwise, it relates to the width of the element. A related property is [[block-size]], which defines the other dimension of the element.

*Note*: The CSS ~inline-size~ and ~block-size~ properties are very similar to CSS properties ~width~ and ~height~, but the ~inline-size~ and ~block-size~ properties are *dependent on inline and block directions*.

**** block-size
The ~block-size~ CSS property defines the *horizontal or vertical size of an element's block*, depending on its writing mode. It corresponds to either the ~width~ or the ~height~ property, depending on the value of [[writing-mode]].

If the writing mode is vertically oriented, the value of ~block-size~ relates to the width of the element; otherwise, it relates to the height of the element. A related property is [[inline-size]], which defines the other dimension of the element.

**** writing-mode
The ~writing-mode~ CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (~html~ element for HTML documents).

**** transform-box
The ~transform-box~ CSS property defines the layout box to which the [[transform]], individual transform properties ~translate~, ~scale~, and ~rotate~, and ~transform-origin~ properties relate.

The ~transform-box~ property is specified as one of the next keyword values.

#+begin_src css

/* Keyword values */
transform-box: content-box | border-box | fill-box | stroke-box | view-box;

/* Global values */
transform-box: inherit | initial | revert | revert-layer | unset;

#+end_src

*** Alignment
**** justify-items
Alinea los *elementos* (hijos) en *horizontal* (eje principal) dentro de cada celda.

#+begin_src css

  justify-items: start | end | center | stretch

#+end_src

**** align-items
Alinea los *elementos* (hijos) en *vertical* (eje principal) dentro de cada celda.

#+begin_src css

  align-items: start | end | center | stretch

#+end_src

**** justify-content
Alinea el *contenido* (la cuadricula) en *horizontal* (eje secundario) en el contenedor padre.

#+begin_src css

  justify-content: start | end | center | strech |
                   space-around | space-between | space-evenly

#+end_src

**** align-content
Alinea el *contenido* (la cuadricula) en *vertical* (eje secundario) en el contenedor padre.

#+begin_src css

  align-content: start | end | center | strech |
                 space-around | space-between | space-evenly

#+end_src

*** Font
**** font-family
Takes font name as values, in order of preference. At the end of the list it is always convenient tu put a generic family name.

#+begin_src css

  font-family : Georgia, "Times New Roman", Times, serif;

#+end_src

**** font
*Shorthand font property*. The first three values ~font-style~, ~font-variant~ and ~font-weigh~ are optional and can appear in any order. The fourth ~font-size~ is required. The fifth ~line-height~, line height is optional and if it appears it must be preceded by a slash. And at the end the typographic family ~font-family~ is mandatory.

#+begin_src css

  font : italic small-caps bold 1.5em/3em Arial, sans-serif

#+end_src

*** Background
**** background-image
It's a good idea to specify a background image and a background color at the same time, in case image fails to load.

*Nota*: Piensa que los navegadores, internamente, crean una imagen con el gradiente indicado en código. Por esa razón utilizamos ~background-image~ y no un /background-gradient/.

#+begin_src css

  body { background-image : url(ajedrez.gif) ; background-color : white }

  /* The default value is none. Show the color set on background-color */
  background-image : none

  /* No utiliza ninguna imagen de fondo */
  background-image: none

  /* Usa la imagen indicada como fondo */
  background-image: url("imagen.jpg")

  /* Indica una imagen con fallbacks */
  background-image: image-set(...)

  /* Utiliza un gradiente de tipo lineal, radial o cónico */
   background-image: gradient

  /* Establece imágenes de fondo en un elemento */
  background-image: image1, image2, image3, ...

  /* Multiple image same size */
  .element {
    width: 320px;
    height: 320px;
    background-image: url("https://manz.dev/manz-logo.png");

    /* La imagen es de 320x320 píxels, la cambiamos a 160x160 */
    background-size: 160px 160px;
  }

  /* Multiple image diferent size */
  .element {
    width: 800px;
    height: 400px;
    background-image:
      url("manzdev-large.png"),
      url("beach.jpg");
    /* applied to the two images */
    background-repeat: no-repeat;
    /* contain applied to the first image, cover applied to the first image */
    background-size: contain, cover;
    /* shorthand */
    /* background: */
    /*   url("manzdev-large.png") no-repeat 0 0 / contain, */
    /*   url("beach.jpg") no-repeat 0 0 / cover */
  }


  /* Crea un cuadrado con una circunferencia transparente inscrita */
  <div class="circle"></div>
  <style>
  .circle {
    height: 400px;
    width: 400px;
    /* De 0% a 71% es completamente transparente, de 71% a 72% degrada */
    /* de transparente a negro y de 72% a 100% es completamente negro */
    background-image: radial-gradient(#0000 71%, #000 72%);
    /* Descomentar para que tenga un fondo rojo */
    /* background: red; */
  }
  </style>

#+end_src

**** background-repeat
Sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.

By default, the repeated images are clipped to the size of the element, but they can be scaled to fit (using ~round~) or evenly distributed from end to end (using ~space~).

*Note*: ~space~ y ~round~ asumen implícitamente que se repite el fondo. En el caso de que tengamos una imagen de fondo que se repita varias veces en mosaico, ~space~ evita que se corte la imagen, introduciendo un espacio entre las repeticiones individuales. ~round~ ajusta la imagen individual, de modo que la expande o contrae para ajustarla al espacio disponible.

*Note* Siempre se podrá combinar en cada eje, con valores mixtos.
~background-repeat: space round~, lo que aplicará ~space~ al eje X y ~round~ al eje Y. Si sólo se especifica uno, se aplicará a ambos ejes.

#+begin_src css

  /* Keyword values */
  background-repeat: repeat-x;
  background-repeat: repeat-y;
  background-repeat: repeat;
  background-repeat: space;
  background-repeat: round;
  background-repeat: no-repeat;

  /* Two-value syntax: horizontal | vertical */
  background-repeat: repeat space;
  background-repeat: repeat repeat;
  background-repeat: round space;
  background-repeat: no-repeat round;

#+end_src

| /Single value/ | /Two-value equivalent/ |
|--------------+----------------------|
| repeat-x     | repeat no-repeat     |
| repeat-y     | no-repeat repeat     |
| repeat       | repeat repeat        |
| space        | space space          |
| round        | round round          |
| no-repeat    | no-repeat no-repeat  |

**** background-attachment
The image is set to the botton ~fixed~ or moves along the rest of the content  ~scroll~.

#+begin_src css

  body {
    background-image : url(ajedrez.gif);
    background-color : white;
    background-repeat : repeat;
    background-attachment : fixed;
  }

#+end_src

**** background-position
Sets the initial position for each background image. The position is relative to the position layer set by ~background-origin~.

The ~background-position~ property is specified as one or more ~<position>~ values, separated by commas.

#+begin_src css

  /* Keyword values */
  background-position: top | bottom | left | right | center;

  background-position: 0% 0% /* default */

  /* 1 parámetro. Desplaza la imagen de fondo al punto (x, 50%). */
  background-position: posx

  /* 2 parámetros. Desplaza la imagen de fondo al punto (x, y). */
  background-position: posx posy

  /* <percentage> values */
  background-position: 25% 75%;

  /* <length> values */
  background-position: 0 0;
  background-position: 1cm 2cm;
  background-position: 10ch 8em;

  /* Multiple images */
  background-position:
    0 0,
    center;

  /* Edge offsets values */
  background-position: bottom 10px right 20px;
  background-position: right 3em bottom 10px;
  background-position: bottom 10px right;
  background-position: top right 10px;

#+end_src

**** background-clip
Sets whether an element's background extends underneath its border box, padding box, or content box.

~background-clip~ establece el área externa que afectará la imagen de fondo, utiliza ~border-box~ por defecto.

#+begin_src css

  /* Área externa afectada por el fondo */
  background-clip: border-box | padding-box | content-box

#+end_src

**** background-origin
Sets the background's origin: from the border start, inside the border, or inside the padding.

~background-origin~ establece el área interna que afectará la imagen de fondo. Utiliza ~padding-box~ por defecto.

#+begin_src css

  /* Área interna afectada por el fondo */
  background-origin: border-box | padding-box | content-box

#+end_src

**** background-size
Sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.

*Note*: Por defecto, una imagen de fondo toma automáticamente el tamaño de la imagen (que podría ser demasiado grande). Para no tener que modificar la imagen original de forma manual con un editor de imágenes, podemos utilizar esta propiedad y ajustarla a nuestro agrado mediante CSS

#+begin_src css

  /* Aplica un de (ancho×auto) a la imagen de fondo. Mantiene la proporción */
  background-size: size

  /* Aplica un de (ancho×alto) a la imagen de fondo. */
  /* Hay que vigilar la proporción */
  background-size: size size

  /* No escala la imagen. Utiliza el tamaño original. default value */
  background-size: auto

  /* Indicamos el tamaño específico que queremos usar (píxels, porcentaje) */
  background-size: unidad

  /* Escala el ancho de la imagen de fondo al ancho del elemento */
  background-size: cover

  /* Escala el alto de la imagen de fondo al alto del elemento. */
  background-size: contain

#+end_src

**** background
*Shorthand background property*. All values are optional and can be in any order.

#+begin_src css

  /* Syntax */
  background: color image position / size repeat attachment origin clip


  /* This one line: */
  body {
    background: red url(bg-graphic.png) 10px 10px repeat-x fixed;
  }

  /* is equivalent to these five lines: */
  body {
    background-color: red;
    background-image: url(bg-graphic.png);
    background-position: 10px 10px;
    background-repeat: repeat-x;
    background-attachment: fixed;
  }


  .element {
    /* Atajo simple */
    background: #fff url("imagen.jpg") top center repeat-x;

    /* Atajo completo */
    background: deeppink url("imagen.jpg") 0 0 / 150px space scroll
                padding-box padding-box;

    /* Atajo múltiple */
    background:
      url("primer-plano.jpg") center center / cover,
      deeppink url("imagen.jpg") 0 0 / 150px space scroll
               padding-box padding-box;
  }

#+end_src

#+end_src

*** Mask
**** mask
Shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.

*Nota*: si no se necesita indicar algún valor, se puede omitir y se utilizará el valor por defecto.

*Note*: The main difference between the mask property and [[clip-path()]] is that the first is used for *images* and *gradients*, and the latter is used for *paths*.

*Nota*: las máscaras pueden no estar soportadas por completo en ciertos navegadores, por lo que se recomienda examinar bien la necesidad de utilizar prefijos como ~-webkit-~ antes de las propiedades o estrategias similares.

*Note*: As well as the properties listed below, the ~mask~ shorthand also resets ~mask-border~ to its initial value. It is therefore recommended to use the ~mask~ shorthand rather than other shorthands or the individual properties to override any mask settings earlier in the cascade. This will ensure that ~mask-border~ has also been reset to allow the new styles to take effect.

| /PROPIEDAD/     | /DESCRIPCIÓN/                                        |
|---------------+----------------------------------------------------|
| /mask-image/    | imagen, gradiente o SVG pa usar como máscara       |
| /mask-mode/     | si usar canales alfa o de luz como máscara         |
| /mask-repeat/   | cómo se repetirá una máscara con tamaño y posición |
| /mask-position/ | la posición donde debe empezar la máscara          |
| /mask-clip/     | el área al que afectará la máscara                 |
| /mask-origin/   | como posicionar el área que afectará a la máscara  |
| /mask-size/     | permite darle un tamaño específico a la máscara    |
| /mask-composit/ | si hay máscaras, define como aplicas composición   |

#+begin_src css

  /* Keyword values */
  mask: none;

  /* Image values */
  mask: url(mask.png); /* Pixel image used as mask */
  mask: url(masks.svg#star); /* Element within SVG graphic used as mask */

  /* Combined values */
  /* Element within SVG graphic used as luminance mask */
  mask: url(masks.svg#star) luminance;
  /* Element within SVG graphic used as mask positioned 40px
  from the top and 20px from the left */
  mask: url(masks.svg#star) 40px 20px;
  /* Element within SVG graphic used as mask with a
  width and height of 50px */
  mask: url(masks.svg#star) 0 0/50px 50px;
  /* Element within SVG graphic used as horizontally repeated mask */
  mask: url(masks.svg#star) repeat-x;
  /* Element within SVG graphic used as mask extending to
  the box enclosed by the stroke */
  mask: url(masks.svg#star) stroke-box;
  /* Element within SVG graphic used as mask and combined
   with background using non-overlapping parts */
  mask: url(masks.svg#star) exclude;


  /* Multiple masks */
  mask:
    /* Element within SVG graphic is used as a mask
  on the left-hand side with a width of 16px */
    url(masks.svg#star) left / 16px repeat-y,
    /* Element within SVG graphic is used as a mask
  on the right-hand side with a width of 16px */
    url(masks.svg#circle) right / 16px repeat-y;


  /* ManzDev */
  .element {
  /* <image> <position> / <size> <repeat> <origin> <clip> <composite> <mode> */
    mask:
      linear-gradient(black, transparent)
      50px 50px / 200px 200px
      repeat-x
      border-box border-box
      add
      match-source;
  }

#+end_src

**** mask-image
Sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the ~mask-mode~ property.

*Values*
- none :: this keyword is interpreted as an opaque white image layer (no aplicar máscara), default value.
- <mask-source> :: a ~url()~ reference to a ~<mask>~ or to a CSS image (imagen externa referenciada).
- <image> :: an image value used as mask image layer.
- gradient :: gradiente creado con CSS (linear, radial o conic).

*Nota*: en algunos navegadores la propiedad ~mask-image~ requiere el prefijo ~-webkit~.

*Note*: The main difference between the mask property and [[clip-path()]] is that the first is used for *images* and *gradients*, and the latter is used for *paths*.

*Nota*: al igual que con [[background-image]], es posible indicar múltiples máscaras de imágenes, simplemente separando por coma, que se sumarán y aplicarán a la vez. Si lo haces, recuerda que las propiedades ~mask-*~ relacionadas utilizarán el valor para todas las máscaras, o tendrás que separar por comas para hacer referencia a cada máscara.

#+begin_src css

  /* <mask-source> value */
  mask-image: url(masks.svg#mask1);

  /* <image> values */
  mask-image: linear-gradient(rgb(0 0 0 / 100%), transparent);
  mask-image: image(url(mask.png), skyblue);

  /* Multiple values */
  mask-image: image(url(mask.png), skyblue),
              linear-gradient(rgb(0 0 0 / 100%), transparent);


  /* Pasando el ratón por encima se quita la mascara. */
  <div class="element"></div>
  <style>
  .element {
    width: 600px;
    height: 400px;
    background-image: radial-gradient(circle, red 25%, black 50%, blue 75%);
    mask-image: radial-gradient(circle 250px at 40% 50%, black 75%,
                                transparent 76%);
    &:hover {
      mask-image: none;
    }
  }
  </style>


  /* Crea un cuadrado con una circunferencia transparente inscrita */
  <div class="circle"></div>
  <style>
  .circle {
    height: 400px;
    width: 400px;
    background: red;
    /* De 0% a 71% es completamente transparente, de 71% a 72% degrada */
    /* de transparente a negro y de 72% a 100% es completamente negro */
    mask-image: radial-gradient(#0000 71%, #000 72%);
  }
  </style>

#+end_src

**** mask-mode
Cambia el modo en el que se crea la máscara.

En el caso de utilizar un modo ~alpha~, la máscara utilizará los valores alfa de la máscara para utilizarlos como transparencia. Sin embargo, si configuramos el valor ~luminance~ utilizará los valores con más brillo para utilizarlos como transparencia. Esto nos podría servir por ejemplo, para invertir la máscara de forma rápida.

#+begin_src css

  /* Syntax: */
  mask-mode: match-source (default) | alpha | luminance


  /* Modificado de la máscara para que sea con colores negro-blanco en */
  /* lugar de negro-transparente. Al utilizar mask-mode: luminance, se toma */
  /* el color blanco, en lugar del transparente. */
  <div class="test"></div>
  <style>
  .element {
    width: 600px;
    height: 400px;
    background-image: radial-gradient(circle, red 25%, black 50%, blue 75%);
    mask-image: radial-gradient(circle 250px at 40% 50%,black 75%,white 76%);
    mask-mode: luminance;
  }
  </style>

#+end_src

**** mask-repeat
Por defecto, la máscara de imagen establecida se repetirá en el *eje x* y en el *eje y*, ya que tiene establecido el valor *repeat*. Utilizaríamos ~repeat-x~ si queremos que se repita solo en horizontal, ~repeat-y~ para repetir en vertical o ~no-repeat~ para que no se repita en ningún eje.

Los valores ~space~ o ~round~ se pueden añadir para indicar como quieres que ajuste el espacio sobrante.

#+begin_src css

  /* Syntax: */
  mask-repeat: repeat | repeat-x | repeat-y | no-repeat | space | round


  /* Example: */
  <div class="element"></div>
  <style>
  .element {
    width: 600px;
    height: 400px;
    background-image: radial-gradient(circle, red 25%, black 50%, blue 75%);
    mask-image: radial-gradient(circle 50px at 50px 50px,
                                black 75%, transparent 78%);
    mask-repeat: repeat;
    mask-size: 100px 100px;
  }
  </style>

#+end_src

**** mask-position
Permite colocar la máscara de imagen y desplazarla una cierta cantidad de espacio. Por defecto, el valor indicado es ~0% 0%~, por lo que se colocará lo más a la izquierda y arriba posible.

- ~left~, ~center~ o ~right~ para el eje x
- ~top~, ~center~ o ~bottom~ para el eje y
- Valores de tamaño ~size~ para ambos ejes

#+begin_src css

  /* Syntax: */
  mask-position:	0% 0% | x y


  /* Example: */
  <div class="element"></div>
  <style>
  .element {
    width: 600px;
    height: 400px;
    background-image: radial-gradient(circle, red 25%, black 50%, blue 75%);
    mask-image: radial-gradient(circle 250px at 40% 50%,
                                black 75%, transparent 76%);
    mask-position: 160px 0px;
  }
  </style>

#+end_src

**** mask-origin
Permite indicar el origen del área de la máscara de imagen. Con los valores puedes marcar como se comportará el área respecto a su posición de origen.

- padding-box :: el área incluye padding y contenido (excluye borde)
- content-box :: el área incluye sólo contenido (excluye padding y borde)
- border-box :: la imagen o color de fondo cubrirá la zona del borde, espaciado y contenido

- view-box :: el área incluye el viewbox (lienzo)
- fill-box :: el área incluye el contenido del SVG
- stroke-box :: el área incluye los trazos (bordes) del SVG

*Nota*: usando ~border-box~ la imagen de fondo se extenderá en todo el elemento, incluyendo borde, espaciado y contenido. El valor ~padding-box~ extenderá la imagen de fondo sólo mediante el padding y el contenido, y por último, la propiedad ~content-box~ extenderá la imagen de fondo sólo en la zona del contenido.

#+begin_src css

  /* Syntax */
  mask-origin: border-box | content-box | padding-box |
                          fill-box | stroke-box | view-box


  /* En este caso hemos utilizado dos máscaras idénticas, pero hemos */
  /* añadido un padding y con mask-origin hemos cambiado su origen. Usando */
  /* también la composición, hemos conseguido que se quede sólo con el */
  /* borde de una de las máscaras */
  <div class="element"></div>
  <style>
  .element {
    width: 600px;
    height: 400px;
    background-image: radial-gradient(circle, red 25%, black 50%, blue 75%);
    mask-image:
      radial-gradient(circle 250px at 40% 50%, black 75%, transparent 76%),
      radial-gradient(circle 250px at 40% 50%, black 75%, transparent 76%);
    mask-origin: padding-box, content-box;
    mask-repeat: no-repeat;
    mask-composite: exclude, add;
    padding: 6rem;
  }
  </style>

#+end_src

**** mask-size
Specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.

- ~auto~ establece el valor de forma automática (default para ambos ejes)
- ~size~ valor medido en un tamaño concreto o en porcentajes
- utilizar un único valor ~cover~, para un ajuste automático del alto
- utilizar un único valor ~contain~, para un ajuste automático del ancho

*Note*: If the value of this property is not set in a mask shorthand property that is applied to the element after the mask-size CSS property, the value of this property is then reset to its initial value by the shorthand property.

#+begin_src css

  /* Syntax: */
  mask-size: auto auto | size size | cover | contain


   /* Crea un cuadrado con una circunferencia transparente inscrita
   despues al aplicar  mask-size hace un efecto como si se refujiera
   tanto porcertanje en el eje X y tanto en el eje Y (no verificado) */
  <div class="circle"></div>
  <style>
  .sparkle {
    height: 400px;
    width: 400px;
    background: #EDC951;
    mask-image: radial-gradient(#0000 71%, #000 72%);
    /* Descomentar para ver el efecto */
    /* mask-size: 50% 50%; */
  }
  </style>


  /* En el gradiente, hemos definido que tenga una forma circular con un */
  /* radio de 50px. Como en el mask-size hemos establecido un tamaño de */
  /* máscara de 50x50, sólo cabe una cuarta parte del círculo, que es la */
  /* que se repite continuamente. */
  <div class="element"></div>
  <style>
  .element {
    width: 600px;
    height: 400px;
    background-image: radial-gradient(circle, red 25%, black 50%, blue 75%);
    mask-image: radial-gradient(circle 50px at 50px 50px,
                                black 75%, transparent 76%);
    mask-repeat: repeat;
    mask-size: 50px 50px;
  }
  </style>

#+end_src

**** mask-composite
Permite indicarle al navegador como se va a componer la máscara de imagen en el caso de tener múltiples máscaras definidas.

El valor ~add~ es el valor por defecto, por lo que por norma general, se suman (superponen) las máscaras. Estos métodos de composición se utilizan aplicándose a la máscara actual y al resto de máscaras inferiores a ella.

- add :: superpone o *suma* la máscara actual sobre el resto de máscaras inferiores (source over)
- subtract :: la máscara actual *resta* el contenido del resto de máscaras inferiores (source out)
- intersect :: se queda con la *intersección* de la máscara actual y las inferiores (source in)
- exclude :: se queda con la parte *no intersectada* de la máscara actual e inferiores (xor)

*Note*: ~exclude~ The non-overlapping regions of source and destination are combined (combinan las regiones de origen y destino que no se superponen, es decir, combina las regiones y después quita las zonas comunes).

#+begin_src css

  /* Syntax: */
  mask-composite: add | subtract | intersect | exclude



  /* La primera máscara es un radial-gradient en forma de círculos de radio */
  /* de 50px que se repiten a lo largo de la imagen con un tamaño 100x100. */
  /* La segunda máscara es un radial-gradient en forma de círculo grande de */
  /* 400px, no se repite y cubre el alto de la imagen. */
  /* Mediante la propiedad mask-composite podemos determinar como se */
  /* mezclan esas dos máscaras: */
   <p>
     Valor de <code>mask-composite</code>:
     <select>
       <option>add</option>
       <option>subtract</option>
       <option>intersect</option>
       <option>exclude</option>
     </select>
   </p>
   <div class="element"></div>
   <style>
   .element {
    width: 600px;
    height: 400px;
    background-image: radial-gradient(circle, red 25%, black 50%, blue 75%);
    mask-image:
      radial-gradient(circle 50px at 50px 50px, black 75%, transparent 78%),
      radial-gradient(circle 400px, black 50%, transparent 50.5%);
    mask-repeat: repeat, no-repeat;
    mask-size: 100px 100px, cover;
    mask-composite: add;
  }
  </style>
  <script>
  const select = document.querySelector("select");
  const element = document.querySelector(".element");
  select.addEventListener("change", () => {
      const selected = select.querySelector("option:checked");
      element.style.maskComposite = selected.value;
    });
  </script>

#+end_src

**** mask-clip
Se puede usar para indicar el área que será afectada por una máscara. Por defecto, el valor establecido es ~border-box~, que incluye contenido, relleno y borde. Sin embargo, se pueden utilizar otros valores:

- padding-box :: el área incluye padding y contenido (excluye borde)
- content-box :: el área incluye sólo contenido (excluye padding y borde)
- no-clip :: el contenido no es recortado
- margin-box :: el área incluye márgenes

El resto de valores, se utilizan específicamente en ficheros SVG:

- view-box :: el área incluye el viewbox (lienzo)
- fill-box :: el área incluye el contenido del SVG
- stroke-box :: el área incluye los trazos (bordes) del SVG

*Nota*: usando ~border-box~ la imagen de fondo se extenderá en todo el elemento, incluyendo borde, espaciado y contenido. El valor ~padding-box~ extenderá la imagen de fondo sólo mediante el padding y el contenido, y por último, la propiedad ~content-box~ extenderá la imagen de fondo sólo en la zona del contenido.

#+begin_src css

  /* Syntax */
  mask-clip: border-box | no-clip | content-box | padding-box |
             fill-box | stroke-box | view-box

#+end_src

*** Border
**** border-radius
Rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.

The radius applies to the whole ~background~, even if the element has no border; the exact position of the clipping is defined by the ~background-clip~ property.

*Nota*: Cuando uses un valor de 0 en uno de los extremos, el opuesto también estará a 0. Valores negativos no están permitidos.

#+begin_src css

  /* top-left, top-right, bottom-right, bottom-left */
  border-radius: 15px 50px 30px 5px;

  /* top-left-and-bottom-right, top-right-and-bottom-left */
  border-radius: 10px 20px;

  /* top-left , top-right-and-bottom-left, bottom-right  */
  border-radius: 10px 20px 30px;

  /* A Cartesian axis with center at each corner is established */
  /* and the x and y distances are taken */
  border-radius: 20px / 40px; /* x / y */

#+end_src

*** Functions
**** var()
Can be used to insert the value of a [[Custom properties (--)][custom property]] (sometimes called a "CSS variable") instead of any part of a value of another property.

The ~var()~ function cannot be used in property names, selectors or anything else besides property values. (Doing so usually produces invalid syntax, or else a value whose meaning has no connection to the variable.)

#+begin_src css

  /* Syntax */
  /* Simple usage */
  var(--custom-prop);

  /* With fallback */
  var(--custom-prop,);  /* empty value as fallback */
  var(--custom-prop, initial); /* initial value of the property as fallback */
  var(--custom-prop, #FF0000);
  var(--custom-prop, var(--default-value));
  var(--custom-prop, var(--default-value, red));
  var(--foo, red, blue) /* anything between the first comma and */
  /* the end of the function is considered a fallback value */


  /* Using a custom property set on :root */
  :root {
    --main-bg-color: pink;
  }
  body {
    background-color: var(--main-bg-color);
  }

  /* Using a custom property before it is set */
  body {
    background-color: var(--main-bg-color);
  }
  :root {
    --main-bg-color: pink;
  }

#+end_src

**** calc()
Which can do simple math within CSS

#+begin_src css

  /* The values define the width of this box to be 90% of the containing */
  /* block width, minus 30 pixels. */
  .box {
    padding: 10px;
    width: calc(90% - 30px);
    background-color: rebeccapurple;
    color: white;
  }

#+end_src

**** transform
This property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.

#+begin_src css

  /* Function values */
  transform: matrix(1, 2, 3, 4, 5, 6);
  transform: perspective(17px);
  transform: rotate(0.5turn);
  transform: rotateX(10deg);
  transform: translate(12px, 50%);
  transform: translateX(2em);
  transform: scale(2, 0.5);
  transform: scaleZ(0.3);
  transform: skew(30deg, 20deg);
  transform: skewY(1.07rad);

  /* Multiple function values */
  transform: translateX(10px) rotate(10deg) translateY(5px);
  transform: perspective(500px) translate(10px, 0, 20px) rotateY(3deg);

#+end_src

**** translate()
Repositions an element in the horizontal and/or vertical directions. Its result is a ~<transform-function>~ data type.

This transformation is characterized by a two-dimensional vector [tx, ty]. Its coordinates define how much the element moves in each direction.

*Values*

- Single <length-percentage> values :: this value is a ~<length>~ or ~<percentage>~ representing the abscissa (horizontal, x-component) of the translating vector [tx, 0]. The ordinate (vertical, y-component) of the translating vector will be set to ~0~. For example, ~translate(2px)~ is equivalent to ~translate(2px, 0)~. A percentage value refers to the *width of the reference box* defined by the ~transform-box~ property.

- Double <length-percentage> values :: this value describes two ~<length>~ or ~<percentage>~ values representing both the abscissa (horizontal, x-component) and the ordinate (vertical, y-component) of the translating vector [tx, ty]. A percentage as first value refers to the width, as second part to the height of the reference box defined by the ~transform-box~ property.

#+begin_src

  The percentage value refers to the box itself.

          |
          |
  --------┌──────────┬─────────────────────────────┐
          │          │                             │
          │          │                             │
          │          │                             │
          ├──────────┘                             │
          │                                        │
          │                                        │
          └────────────────────────────────────────┘

  transform: translate(50%, 50%);

          |
          |
  --------┌────────────────────────────────────────┐
          ├─50%─┼─50%─┤                            │
          │     ┌──────────┐                       │
          │     │          │                       │
          │     │          │                       │
          │     │          │                       │
          │     └──────────┘                       │
          └────────────────────────────────────────┘

  transform: translate(-50%, 50%);

          |
          |
  --------┌────────────────────────────────────────┐
          │                                        │
     ┌──────────┐                                  │
     │          │                                  │
     │          │                                  │
     │          │                                  │
     └──────────┘                                  │
          └────────────────────────────────────────┘

  transform: translate(-50%, -50%);

          |
          |
     ┌──────────┐
     │    |     │
  --------┌─────┼──────────────────────────────────┐
     │    │     │                                  │
     └────┼─────┘                                  │
          │                                        │
          │                                        │
          │                                        │
          │                                        │
          └────────────────────────────────────────┘

#+end_src

#+begin_src css

  /* Single <length-percentage> values */
  transform: translate(200px);
  transform: translate(50%);

  /* Double <length-percentage> values */
  transform: translate(100px, 200px);
  transform: translate(100px, 50%);
  transform: translate(30%, 200px);
  transform: translate(30%, 50%);


  /* Align vertically */
  <div class="contenedor">
    <div class="hijo"></div>
  </div>
  <style>
  .contenedor {
    width: 300px;
    height: 300px;
    background-color: yellow;
    position: relative;
  }

  .hijo {
    width: 50px;
    height: 50px;
    background-color: red;
    position: absolute;
    top: 50%;
    transform: translate(0, -50%); /* -50% of 50px width = -25px */
    /* transform: translate(-50%, -50%); align vertically and horizontally */
  }
  </style>

#+end_src

**** polygon()
It's used to draw a polygon by providing one or more pairs of coordinates, each of which represents a vertex of the shape.

The ~polygon()~ parameters are separated by a comma and optional whitespace. The first parameter is an optional ~<fill-rule>~ value. Additional parameters are points that define the polygon. Each point is a pair of ~x/y~ coordinate ~<length-percentage>~ values separated by a space, e.g. "~0 0~" and "~100% 100%~" for the left/top and bottom right corners, respectively.

You can create almost any shape by specifying the coordinates of its points. The order in which you define the points matters and can result in different shapes.

*Tip*: podría ser guardar la forma poligonal creada con la función ~polygon()~ en una [[Custom properties (--)][variable CSS]] para reutilizarla después o añadirle un nombre de variable y hacerla más semántica.

#+begin_src css

  polygon(x1 y1, x2 y2, x3 y3, x4 y4, xn yn)

  /* polygon(<fill-rule> <length-percentage> <length-percentage>, ... )*/
  polygon(nonzero, 0% 0%, 50% 50%, 0% 100%)


  clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
  /* This would create a rectangle shape the size of its parent content by */
  /* specifying the coordinates of its four corners: top-left (0% 0%), */
  /* top-right (100% 0%), bottom-right (100% 100%), and bottom-left (0% */
  /* 100%). */


  /* Create a triangle */
  <div class="triangle"></div>

  <style>
  .triangle {
    width: 400px;
    height: 400px;
    background-color: magenta;
    clip-path: polygon(100% 0%, 50% 50%, 100% 100%);
  }
  </style>


  /* Setting a polygon for shape-outside */
  /* In this example a shape is created for text to follow using the */
  /* shape-outside property. */
  <style>
  .box {
    width: 250px;
  }

  .shape {
    float: left;
    shape-outside: polygon(
      0 5%,
      15% 12%,
      30% 15%,
      40% 26%,
      45% 35%,
      45% 45%,
      40% 55%,
      10% 90%,
      10% 98%,
      8% 100%,
      0 100%
    );
    width: 300px;
    height: 320px;
  }

  p {
    font-size: 0.9rem;
  }
  </style>
  <div class="box">
    <div class="shape"></div>
    <p>
      One November night in the year 1782, so the story runs, two
      brothers sat over their winter fire in the little French town of
      Annonay, watching the grey smoke-wreaths from the hearth curl up
      the wide chimney. Their names were Stephen and Joseph Montgolfier,
      they were papermakers by trade, and were noted as possessing
      thoughtful minds and a deep interest in all scientific knowledge
      and new discovery. Before that night—a memorable night, as it was
      to prove—hundreds of millions of people had watched the rising
      smoke-wreaths of their fires without drawing any special
      inspiration from the fact.
    </p>
    </div>

#+end_src

**** path()
Crea un trayecto personalizado. Puede definir un trayecto SVG para crear formas complejas.

En los parámetros de ~path()~ se pasa un string que es una serie de coordenadas de un trayecto SVG, o lo que es lo mismo, el atributo ~d~ (data) de un elemento ~<path>~ de SVG:

#+begin_src css

  /* Definido una estrella a través de coordenadas de un trayecto SVG */
  <div class="box"></div>
  <style>
  .box {
    width: 256px;
    height: 256px;
    background: red;
    clip-path:
      path("m4,87l93,0l29,-84l29,84l93,0l-76,52l29,84l-76,
                  -52l-76,52l29,-84l-76,-52z");
  }
  </style>

#+end_src

**** clip-path()
Creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.

*Note*: The main difference between the [[mask]] property and ~clip-path()~ is that the first is used for *images* and *gradients*, and the latter is used for *paths*.

#+begin_src css

  /* <clip-source> values */
  /* A url() referencing an SVG <clipPath> element. */
  clip-path: url(resources.svg#c1);

  /* <geometry-box> values */
  clip-path: margin-box;
  clip-path: border-box;

  /* <basic-shape> values */
  /* A shape whose size and position is defined by the <geometry-box> */
  /* value. If no geometry box is specified, the border-box will be used as */
  /* the reference box. */
  clip-path: inset(100px 50px);
  clip-path: circle(50px at 0 100px); /* radious position */
  clip-path: circle(40%);
  clip-path: ellipse(50px 60px at 0 10% 20%);
  clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
  clip-path: path(
    "M0.5,1 C0.5,1,0,0.7,0,0.3 A0.25,0.25,1,1,1,0.5,
  0.3 A0.25,0.25,1,1,1,1,0.3 C1,0.7,0.5,1,0.5,1 Z");
  clip-path: rect(5px 5px 160px 145px round 20%);
  clip-path: xywh(0 5px 100% 75% round 15% 0);

  /* Box and shape values combined */
  clip-path: padding-box circle(50px at 0 100px);


  /* Create a triangle */
  <div class="triangle"></div>

  <style>
  .triangle {
    width: 400px;
    height: 400px;
    background-color: magenta;
    clip-path: polygon(100% 0%, 50% 50%, 100% 100%);
  }
  </style>

#+end_src

**** inset()
Defines a rectangle at the specified inset distances from each side of the reference box. It is a basic shape function used to define one of the <basic-shape> data types.

*ManzDev*
Crea una forma rectangular "hacia dentro".

*Values*
- <length-percentage>{1,4} :: When all of the four arguments are supplied they represent the top, right, bottom and left offsets from the reference box inward that define the positions of the edges of the inset rectangle. These arguments follow the syntax of the margin shorthand, that let you set all four insets with one, two or four values.
- <border-radius> :: The optional ~<border-radius>~ argument(s) define rounded corners for the inset rectangle using the border-radius shorthand syntax.

#+begin_src css

  shape-outside: inset(20px 50px 10px 0 round 50px);


  <div class="box"></div>
  <style>
  .box {
    border: 4px solid black;
    background: hotpink;
    width: 200px;
    height: 200px;
    /* (top, right, bottom, left) */
    /* c/u representa la distancia desde su punto concreto */
    /* 0% top (no se empuja nada desde arriba) */
    /* 0% right (no se empuja nada desde la derecha) */
    /* 50% bottom (se empuja 50% desde abajo hacia arriba) */
    /* 50% left (se empuja 50% desde la izquierda hacia la derecha) */
    clip-path: inset(0 0 50% 50%);
    /* Otra forma de verlo es: parte desde el 0% de la parte superior, */
    /* desde el 0% de la parte derecha, desde la mitad (50%) de la parte */
    /* inferior y desde la mitad (50%) de la parte izquierda: */
  }
  </style>


  /* También es posible redondear los bordes del cuadrado o rectángulo, */
  /* indicando al final la palabra clave round junto al radio de borde que */
  /* quieres especificar. */
  <div class="box"></div>
  <style>
  .box {
    border: 4px solid black;
    background: hotpink;
    width: 200px;
    height: 200px;
    clip-path: inset(50px round 20px);
    /* equivalente a  */
    /* clip-path: inset(50px 50px 50px 50px round 20px); */
  }
  </style>

#+end_src

**** xywh()
Define un recorte basado en una posición concreta x,y (los dos primeros parámetros) y un tamaño de ancho y de alto w,h (los dos últimos parámetros).

#+begin_src css

  clip-path: xywh(20px 50px 10px 0 round 50px);
  /* El parámetro round size indica redondeo de las esquinas. */

  <div class="box"></div>
  <style>
  .box {
    background: indigo;
    width: 200px;
    height: 200px;
    clip-path: xywh(25px 25px 150px 50px);
  }
  </style>

#+end_src

**** circle() ellipse()
Establece una forma circular o eliptipa en una porción del elemento, pudiendo recortar formas como círculos, medias lunas, etc.

#+begin_src css

  <div class="semicircle"></div>
  <div class="ellipse"></div>
  <style>
  .semicircle {
    background: hotpink;
    width: 200px;
    height: 200px;
    /* clip-path: circle(radius at x y); */
    clip-path: circle(50% at 50% 0);
    /* circulo simple */
    /* clip-path: circle(50% at 50% 50%); */
  }
  .ellipse {
    background: hotpink;
    width: 200px;
    height: 200px;
    /* clip-path: ellipse(semi-major-axis semi-minor-axis at x y); */
    clip-path: ellipse(50% 25% at 50% 0);
  }
  </style>

#+end_src

**** radial-gradient()
Creates an image consisting of a progressive transition between two or more colors that radiate from an origin. Its shape may be a circle or an ellipse. The function's result is an object of the ~<gradient>~ data type, which is a special kind of ~<image>~.

A radial gradient is specified by indicating the center of the gradient (where the 0% ellipse will be) and the size and shape of the ending shape (the 100% ellipse).

#+begin_src css

  /* A gradient at the center of its container,
     starting red, changing to blue, and finishing green */
  radial-gradient(circle at center, red 0, blue, green 100%)

  /* hsl color space with longer hue interpolation */
  radial-gradient(circle at center in hsl longer hue, red 0, blue, green 100%)


  /* Ellipse (this is default): */
  background-image: radial-gradient(red, yellow, green);

  /* Circle */
  background-image: radial-gradient(circle, red, yellow, green);

  /* Eclipse lunar */
  <div class="moon"></div>
  <style>
  .moon {
    background: white;
    width: 150px;
    height: 150px;
    border-radius: 50%;
    mask-image: radial-gradient(
      circle 75px at 70% 50%,
      transparent 100%,
      black 101%
    );
  }
  </style>

#+end_src

**** image-set()
Is a method of letting the browser pick the most appropriate CSS image from a given set, primarily for high pixel density screens.

Resolution and bandwidth differ by device and network access. The ~image-set()~ function delivers the most appropriate image resolution for a user's device, providing a set of image options — each with an associated resolution declaration — from which the browser picks the most appropriate for the device and settings. Resolution can be used as a proxy for filesize — a user agent on a slow mobile connection with a high-resolution screen may prefer to receive lower-resolution images rather than waiting for a higher resolution image to load.

#+begin_src css

  /* Select image based on resolution */
  image-set(
    "image1.jpg" 1x,
    "image2.jpg" 2x
  );

  image-set(
    url("image1.jpg") 1x,
    url("image2.jpg") 2x
  );

  /* Select gradient based on resolution */
  image-set(
    linear-gradient(blue, white) 1x,
    linear-gradient(blue, green) 2x
  );

  /* Select image based on supported formats */
  image-set(
    url("image1.avif") type("image/avif"),
    url("image2.jpg") type("image/jpeg")
  );



  /* Fallback */
  /* There is no inbuilt fallback for image-set(); therefore to include a */
  /* background-image for those browsers that do not support the function, */
  /* a separate declaration is required before the line using image-set(). */
  .box {
    background-image: url("large-balloons.jpg"); /* Fallback */
    background-image: image-set(
      "large-balloons.avif" type("image/avif"),
      "large-balloons.jpg" type("image/jpeg")
    );
  }


  /* Example */
  .element {
    background-image: image-set(
      linear-gradient(indigo, black) 1x,
      url("imagen-hq.webp") 2x
    );
  }

#+end_src

**** filter()
Applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.

Several functions, such as ~blur()~ and ~contrast()~, are available to help you achieve predefined effects.

#+begin_src css

  /* <filter-function> values */
  filter: blur(5px);
  filter: brightness(0.4);
  filter: contrast(200%);
  filter: drop-shadow(16px 16px 20px blue);
  filter: grayscale(50%);
  filter: hue-rotate(90deg);
  filter: invert(75%);
  filter: opacity(25%);
  filter: saturate(30%);
  filter: sepia(60%);

  /* URL */
  filter: url("filters.svg#filter-id");

  /* Multiple filters */
  filter: contrast(175%) brightness(3%);
  filter: drop-shadow(3px 3px red) sepia(100%) drop-shadow(-3px -3px blue);

#+end_src

**** drop-shadow()
Applies a drop shadow effect to the input image. Its result is a ~filter-function~.

The ~drop-shadow()~ function accepts a parameter of type ~<shadow>~ (defined in the ~box-shadow~ property), with the exception that the ~inset~ keyword and ~spread~ parameters are not allowed.

Specify a single box-shadow using:

- Two, three, or four ~<length>~ values.
  - If only two values are given, they are interpreted as ~<offset-x>~ and ~<offset-y>~ values. Negative ~<offset-x>~ value places the shadow to the left of the element. Negative ~<offset-y>~ value places the shadow above the element. If not specified, the value of 0 is used for the missing length. If both ~<offset-x>~ and ~<offset-y>~ are set to 0, the shadow is placed behind the element (and may generate a blur effect if ~<blur-radius>~ and/or ~<spread-radius>~ is set).
  - If a third value is given, it is interpreted as a ~<blur-radius>~. If not specified, it will be set to 0 (meaning that the shadow's edge will be sharp)
  - If a fourth value is given, it is interpreted as a ~<spread-radius>~.
  Optionally, the ~inset~ keyword.
  Optionally, a ~<color>~ value.

#+begin_src css

  /* Three length values */
  drop-shadow(5px 5px 15px)

  /* Two length values and a color */
  drop-shadow(5px 5px red)

  /* The order of color and length values can be changed */
  drop-shadow(#e23 0.5rem 0.5rem 1rem)


  /* Crea un triángulo pero los bordes son incompletos */
  <div class="element"></div>
  <style>
  .element {
    width: 200px;
    height: 200px;
    clip-path: polygon(0 0, 50% 100%, 100% 0);
    background: red;
    border: 3px solid black;
  }
  </style>

  /* Crea un triángulo con todos sus bordes */
  <div class="container">
    <div class="element"></div>
  </div>
  <style>
  .container {
    filter:
      drop-shadow(0 -3px 0 black)
      drop-shadow(0 3px 0 black)
      drop-shadow(-3px 0 0 black)
      drop-shadow(3px 0 0 black);
  }

  .element {
    width: 200px;
    height: 200px;
    clip-path: polygon(0 0, 50% 100%, 100% 0);
    background: red;
  }
  </style>

#+end_src

**** attr()
Is used to retrieve the value of an attribute of the selected element and use it in the stylesheet. It can also be used on pseudo-elements, in which case the value of the attribute on the pseudo-element's originating element is returned.

*Note*: The ~attr()~ function can be used with any CSS property, but support for properties other than ~content~ is experimental, and support for the type-or-unit parameter is sparse.

#+begin_src css

  <p data-foo="hello">world</p>

  <style>
  [data-foo]::before {
    content: attr(data-foo) " ";
  }
  </style>
  /* Output: */
  /* hello world */

#+end_src

**** scale()
Defines a transformation that resizes an element on the 2D plane. Because the amount of scaling is defined by a vector [sx, sy], it can resize the horizontal and vertical dimensions at different scales. Its result is a ~<transform-function>~ data type.

This scaling transformation is characterized by a two-dimensional vector. Its coordinates define how much scaling is done in each direction. If both coordinates are equal, the scaling is uniform (isotropic) and the aspect ratio of the element is preserved.

When a coordinate value is outside the [-1, 1] range, the element grows along that dimension; when inside, it shrinks. A negative value results in a point reflection in that dimension. The value ~1~ has no effect.

*Note*: The ~scale()~ function only scales in 2D. To scale in 3D, use ~scale3d()~ instead.

~scaleX()~ defines a transformation that resizes an element along the x-axis (horizontally). Its result is a ~<transform-function>~ data type, whereas ~scaleY()~ defines a transformation that resizes an element along the y-axis (vertically).

~scaleX()~ modifies the abscissa (horizontal, x-coordinate) of each element point by a constant factor, except when the scale factor is 1, in which case the function is the identity transform. The scaling is not isotropic, and the angles of the element are generally not conserved, except for multiples of 90 degrees. ~scaleX(-1)~ defines an axial symmetry, with a vertical axis passing through the origin (as specified by the ~transform-origin~ property).

*Notes*:
- ~scaleX(sx)~ is equivalent to ~scale(sx, 1)~ or ~scale3d(sx, 1, 1)~.
- ~scaleY(sy)~ is equivalent to ~scale(1, sy)~ or ~scale3d(1, sy, 1)~.
- ~transform: rotateX(180deg);~ == ~transform: scaleY(-1);~

#+begin_src css

  /* Syntax */
  scale(sx)
  scale(sx, sy)

  scaleX(s)
  scaleY(s)


  /* Scaling the X and Y dimensions together */
  <div>Normal</div>
  <div class="scaled">Scaled</div>
  <style>
  div {
    width: 80px;
    height: 80px;
    background-color: skyblue;
  }
  .scaled {
    transform: scale(0.7); /* Equal to scaleX(0.7) scaleY(0.7) */
    background-color: pink;
  }
  </style>

#+end_src

*** Object
**** object-fit
Sets how the content of a [[Replaced elements][replaced element]], such as an ~<img>~ or ~<video>~, should be resized to fit its container.

You can alter the alignment of the replaced element's content object within the element's box using the [[object-position]] property.

*Note*: Al insertar en un documento HTML algunos objetos como imágenes a través de la etiqueta ~<img>~, elementos multimedia a través de ~<video>~ u otros como ~<textarea>~ o ~<input>~, dichos elementos tienen su propia forma de mostrarse en pantalla ya que tienen características ajenas a CSS.

- fill :: «Rellena» la imagen ocupando todo el espacio. Habitualmente, se produce un estiramiento de la imagen.
- cover :: Mantiene proporción, cubriendo lo máximo posible, sin que queden huecos sin cubrir. Suele ocultar partes.
- contain :: Mantiene proporción, conteniendo el máximo posible de la imagen. Suelen sobrar partes.
- none :: Mantiene el aspecto natural.
~scale-down~	Similar a contain, pero si la imagen es más pequeña, no la amplía.

#+begin_src css

  object-fit: contain | cover | fill | none | scale-down;

  <div class="parent">
    <img class="item item-1" src="cat.jpg" alt="Cat">
    <img class="item item-2" src="cat.jpg" alt="Cat">
    <img class="item item-3" src="cat.jpg" alt="Cat">
    <img class="item item-4" src="cat.jpg" alt="Cat">
    <img class="item item-5" src="cat.jpg" alt="Cat">
  </div>

  .parent {
    display: flex;
  }
  .item {
    margin: 10px;
    width: 150px;
    height: 150px;
    background: lightgrey;
  }

  .item-1 { object-fit: fill; }
  .item-2 { object-fit: cover; }
  .item-3 { object-fit: contain; }
  .item-4 { object-fit: scale-down; }
  .item-5 { object-fit: none; }

#+end_src

**** object-position
Specifies the alignment of the selected [[Replaced elements][replaced]] element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.

You can adjust how the replaced element's object's [[The natural or intrinsic size of things][intrinsic size]] (that is, its natural size) is adjusted to fit within the element's box using the [[object-fit]] property.

*Note*: Al insertar en un documento HTML algunos objetos como imágenes a través de la etiqueta ~<img>~, elementos multimedia a través de ~<video>~ u otros como ~<textarea>~ o ~<input>~, dichos elementos tienen su propia forma de mostrarse en pantalla ya que tienen características ajenas a CSS.

*Note*: ~object-position~ sirve para utilizar junto a la propiedad ~object-fit~ y cambiar la posición donde aparece la imagen, especialmente cuando está recortada y sólo aparece un fragmento o parte de la imagen. La propiedad funciona de forma muy parecida a como lo hace la propiedad [[background-position]]:

#+begin_src css

  /* Keyword values */
  object-position: top | bottom | left | right | center;

  /* <percentage> values */
  /* 50% 50% Por defecto, la imagen está centrada tanto en X como en Y. */
  object-position: 25% 75%;

  /* <length> values */
  object-position: 0 0;
  object-position: 1cm 2cm;
  object-position: 10ch 8em;

  /* Edge offsets values */
  object-position: bottom 10px right 20px;
  object-position: right 3em bottom 10px;
  object-position: top 0 right 10px;


  <div class="container">
    <img class="normal" src="bad-manzdev.png" alt="Bad ManzDev">
    <img class="positioned" src="bad-manzdev.png" alt="Bad ManzDev">
  </div>

  .container {
    --size: 256px;

    display: flex;
    gap: 1rem;
  }

  img {
    width: var(--size);
    height: var(--size);
    object-fit: none;
  }

  .normal { object-position: 50% 50%; }
  .positioned { object-position: left 50% top 0%; }

#+end_src

**** object-view-box
Permite indicar al navegador la región visible de un elemento a visualizar, es decir, su viewbox (caja de visualización). Con esta herramienta, se puede mostrar sólo una parte de una imagen o video, o incluso hacer zoom con animaciones si activamos las transiciones.

#+begin_src css

  <div class="container">
    <img src="bad-manzdev.png" alt="Bad ManzDev">
  </div>

  .container img {
    width: 256px;
    height: 256px;
    transition: all 0.5s;
    object-view-box: inset(0% 0% 0% 0%);
  }

  /* Al mover el ratón por encima... */
  .container img:hover {
    object-view-box: inset(20% 20% 20% 20%);
  }

#+end_src

*** Color
**** color
Cambia el color del texto que está en el interior de un elemento.

**** background-color
Cambia el color de fondo de un elemento.

#+begin_src css

  .element {
    background-color: rgb(100% 50% 25% / 50%);
    background-color: rgb(100% 50% 25% / 0.5);
    background-color: rgb(0 0 0 / 50%);
  }

#+end_src

**** hsl():
- El valor ~h~ es el matiz de color, con un valor de ~0deg~ a ~360deg~. En caso de omitir la unidad como number, se asumen ~deg~.
- La cifra ~s~ es el porcentaje de saturación (más apagado o más vivo), de ~0%~ a ~100%~.
- La cifra ~l~ es el porcentaje de luminosidad (más oscuro o más claro), de ~0%~ a ~100%~.

#+begin_src css

  .element {
    background-color: hsl(120deg 25% 75%);
    background-color: hsl(120 25% 75%); /* omite las unidades */
    background-color: hsl(360deg 0% 25%);
  }

  /* Colores relativos */
  /* Modifica el color, variando sus componentes r, g b y/o alpha. */
  hsl(from h s l / alpha)

  /* En este caso estamos anulando el canal r (rojo) con un 0, mientras que */
  /* el canal g y b se mantiene igual. Esto crearía el color relativo */
  /* #00201a desde el original #a8201a. */
  .item-a {
    width: 100px;
    height: 100px;
    background: rgb(from #a8201a 0 g b);
  }

#+end_src

**** color-mix()
Permite mezclar una cierta cantidad de dos colores determinados en un espacio de color concreto.

#+begin_src css

  /* Syntax */
  color-mix(space,color, color)
  color-mix(space method hue,color size, color size)
  .item-3 { background: color-mix(in oklch shorter hue, red 40%, blue 60%);}


  /* Ejemplo */
  <div class="container">
    <div class="item item-a"></div>
    <div class="item item-b"></div>
    <div class="item item-result"></div>
  </div>

  <style>
  .container {
    display: flex;
    gap: 1rem;
  }

  .item {
    width: 100px;
    height: 100px;
  }

  .item-a { background: red; }
  .item-b { background: blue; }
  .item-result { background: color-mix(in srgb, red, blue); }
  </style>

#+end_src

**** color()
Indica un color mediante un espacio de color diferente, tiene como primer parámetro el espacio de color, y luego, separado con espacios los valores de cada uno de los componentes.

#+begin_src css

  .normal { background: rgb(50% 25% 75%); }
  .item-1 { background: color(srgb 50% 25% 75%); }
  .item-2 { background: color(srgb-linear 50% 25% 75%); }
  .item-3 { background: color(display-p3 50% 25% 75%); }

#+end_src

*** Gradients
**** linear-gradient()
Define un gradiente lineal, o sea, en una dirección específica.

*Note*: Piensa que los navegadores, internamente, crean una imagen con el gradiente indicado en código. Por esa razón utilizamos [[background-image]] y no un ~background-gradient~.

#+begin_src css

  /* Gradiente de colores (hacia abajo). */
  linear-gradient(color ,color , ... )
  /* Gradiente con dirección específica. */
  linear-gradient(direction ,color ,color , ... )
  /* Se indica donde comienza a cambiar el color. */
  linear-gradient(direction ,color ,size ,color, size, ... )
  /* Se indica inicio y fin de cada color. */
  linear-gradient(direction ,color ,size ,size, color, size, size, size ... )

  /* to top 0 | to top right 45deg | to right 90deg */
  /* to bottom right 145deg | to bottom 180deg |to bottom left 215deg */
  /* to left 270deg | to top left 325deg */


  /* A repeating gradient tilted 45 degrees,
     starting blue and finishing red, repeating 3 times */
  repeating-linear-gradient(45deg, blue, red 33.3%)

  /* A repeating gradient going from the bottom right to the top left,
     starting blue and finishing red, repeating every 20px */
  repeating-linear-gradient(to left top, blue, red 20px)

  /* A gradient going from the bottom to top,
     starting blue, turning green after 40%,
     and finishing red. This gradient doesn't repeat because
     the last color stop defaults to 100% */
  repeating-linear-gradient(0deg, blue, green 40%, red)

  /* A gradient repeating five times, going from the left to right,
     starting red, turning green, and back to red */
  repeating-linear-gradient(to right, red 0%, green 10%, red 20%)

  /* Interpolation in rectangular color space */
  repeating-linear-gradient(in oklab, blue, red 50px)

  /* Interpolation in polar color space */
  repeating-linear-gradient(in hsl, blue, red 50px)

  /* Interpolation in polar color space
    with longer hue interpolation method */
  repeating-linear-gradient(in hsl longer hue, blue, red 50px)


  /* Example */
  <div class="element"></div>

  <style>
  .element {
    width: 600px;
    height: 100px;

    /* Primer ejemplo */
    background-image: linear-gradient(to right, blue, red);

    /* Segundo ejemplo, sobreescribe al anterior */
    background-image: linear-gradient(to right, blue, yellow, red);
  }
  </style>

  <style>
  .element {
    width: 500px;
    height: 100px;

    /* Básico, con colores con distancias equilibradas */
    background: linear-gradient(to right, black, blue, gold, green, red);

    /* Equivalente al anterior */
    background:
      linear-gradient(
        to right,
        black 0%,  /* 100% negro en el punto 0% y comienza a cambiar */
        blue 25%,  /* 100% azul en el punto 25% y comienza a cambiar */
        gold 50%,  /* 100% dorado en el punto 50% y comienza a cambiar */
        green 75%, /* 100% verde en el punto 75% y comienza a cambiar */
        red 100%   /* 100% rojo en el punto 100% */
      );
  }
  </style>

  <style>
  .element {
    width: 500px;
    height: 100px;

    /* Delimitando los colores con corte brusco */
    background:
      linear-gradient(
        to right,
        black 0% 25%,  /* negro desde 0% hasta 25%, sin degradación */
        blue 25% 50%,  /* azul desde 25% hasta 50%, sin degradación */
        gold 50% 75%,  /* dorado desde 50% hasta 75%, sin degradación */
        green 75% 100% /* verde desde 75% hasta 100%, sin degradación */
      );

    /* Equivalente al anterior */
    background:
      linear-gradient(
        to right,
        /* Si se omite, el punto de partida, al ser el primer color es 0% */
        black 25%,
        blue 25% 50%,
        gold 50% 75%,
        /* Si se omite, el punto de final, al ser el último color es 100% */
        green 75%
      );
  }
  </style>

  <style>
  .element {
    width: 500px;
    height: 100px;

    background:
      linear-gradient(
        to right,
        blue 0 10%,
        yellow 10% 20%,
        red 20% 30%,
        blue 30% 40%,
        yellow 40% 50%,
        red 50% 60%,
        blue 60% 70%,
        yellow 70% 80%,
        red 80% 90%,
        blue 90% 100%,
      );

    /* La propiedad anterior, se puede resumir: */
    background:
      repeating-linear-gradient(
        blue 0 10%,
        yellow 10% 20%,
        red 20% 30%
      );
  }
  </style>

#+end_src

**** radial-gradient()
Creates an *image* consisting of a progressive transition between two or more colors that radiate from an origin. Its shape may be a circle or an ellipse. The function's result is an object of the ~<gradient>~ data type, which is a special kind of ~<image>~.

*Nota*: Piensa que los navegadores, internamente, crean una imagen con el gradiente indicado en código. Por esa razón utilizamos [[background-image]] y no un /background-gradient/.

~start-color, ..., last-color~ : color *stops* are the colors you want to render smooth transitions among. This value consists of a color value, followed by an optional stop position (a percentage between 0% and 100% or a length along the gradient axis).

#+begin_src css

  /* Syntax */
  background-image: radial-gradient(shape size at position, start-color
                                    , ..., last-color);
  /* shape: ellipse(default) | circle */
  /* size: farthest-corner(default)| closest-side |  */
  /*            closest-corner | farthest-side */
  /* position: center(default) */


  /* Radial gradient with three color stops: red at 25% of the distance */
  /* from the center, blue at 50%, and black at 75%. */
  radial-gradient(circle, red 25%, blue 50%, black 75%);

  /* Al principio es rojo puro porque no esta degradando ningun color */
  /* En 25% esta en su rojo puro y comienza a degradar de rojo a negro */
  /* En 50% llega degradando a negro puro y comienza a degradar de negro a azul */
  /* En 75% esta en su azul puro pero como no hay más color para degradar */
  /* continua mandando solo azul puro */
  0%|----25%|----50%|----75%|----100%
  +-----------------------------------------------------------+
  |                                                           |
  +-----------------------------------------------------------+
  <div class="line-25%"></div>
  <div class="gradient"></div>
  <div class="line-50%"></div>
  <style>
  .gradient { height: 50px; width: 400px;
              background-image: radial-gradient(circle, red 25%, black 50%, blue 75%);
            }
  .line-25 { height: 5px; width: 250px; background: black; }
  .line-50 { height: 5px; width: 300px; background: black; }
  </style>


  /* A gradient at the center of its container,
     starting red, changing to blue, and finishing green */
  radial-gradient(circle at center, red 0, blue, green 100%)

  /* hsl color space with longer hue interpolation */
  radial-gradient(circle at center in hsl longer hue, red 0, blue, green 100%)

  /* Position */
  radial-gradient(closest-side at 60% 55%, blue, green, yellow, black);


  /* Simple gradient */
  <div class="proof"></div>
  <style>
  .proof {
    width: 200px;
    height: 100px;
    background-image: radial-gradient(cyan 0%, transparent 20%,
                                      salmon 40%);}
  </style>


  /* Non-centered gradient */
  <div class="proof"></div>
  <style>
  .proof {
    width: 200px;
    height: 100px;
    background-image: radial-gradient(
      farthest-corner at 40px 40px,
      #f35 0%,
      #43e 100%
    );
  }
  </style>


  /* Interpolating with hue */
  <div class="shorter"></div>
  <div class="longer"></div>
  <style>
  /* shorter interpolation, meaning the color goes straight from red to */
  /* blue using the shorter arc on color wheel. */
  .shorter {
    width: 200px;
    height: 200px;
    background-image: radial-gradient(
      circle at center in hsl shorter hue,
      red,
      blue
    );
  }
  /* longer interpolation, meaning the color goes from red to blue using */
  /* the longer arc, traversing through greens, yellows, and oranges. */
  .longer {
    width: 200px;
    height: 200px;
    background-image: radial-gradient(
      circle at center in hsl longer hue,
      red,
      blue
    );
  }
  </style>


  /* Crea un cuadrado con una circunferencia transparente inscrita */
  <div class="circle"></div>
  <style>
  .circle {
    height: 400px;
    width: 400px;
    /* De 0% a 71% es completamente transparente, de 71% a 72% degrada */
    /* de transparente a negro y de 72% a 100% es completamente negro */
    background-image: radial-gradient(#0000 71%, #000 72%);
    /* Descomentar para que tenga un fondo rojo */
    /* background: red; */
  }
  </style>

#+end_src

**** repeating-linear-gradient()
Define un gradiente lineal repetitivo.

**** repeating-conic-gradient()
Define un gradiente cónico repetitivo.

*** Shadow
**** box-shadow
Adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.

*Nota*: ~box-shadow~ solo hace sombras rectangulares, para otro tipo de sombras, por ejemplo, a una imagen con transparencia, donde se respeten los espacios transparentes, se utiliza la función [[drop-shadow()]] de la propiedad [[filter()]].

The ~box-shadow~ property enables you to cast a drop shadow from the frame of almost any element. If a ~border-radius~ is specified on the element with a box shadow, the box shadow takes on the same rounded corners. The z-ordering of multiple box shadows is the same as multiple text shadows (the first specified shadow is on top).

#+begin_src css

  /* desplazado horizontal | desplazado vertical | difuminado */
  /* factor de crecimiento(crece px por cada lado) | color | */
  /* aplicado interno en lugar de externo */
  box-shadow: posX posY size size(optional) color inset

              /* A color and two length values */
              box-shadow: red 60px -16px;

  /* inset, length values, and a color */
  box-shadow: inset 5em 1em gold;

  /* Any number of shadows, separated by commas */
  <div class="element"></div>
  <style>
  .element {
    width: 100px;
    height: 100px;
    background: red;
    box-shadow:
      5px 5px 10px yellow,
      10px 10px 10px red,
      20px 20px 10px blue,
      10px 10px 10px rgb(0,0,0, 0.5) inset;
  }
  </style>


  /* Moon */
  <div class="moon"></div>
  <style>
  .moon {
    width: 300px;
    aspect-ratio: 1;
    border-radius: 50%;
    box-shadow: -90px 0 0 80px black;
  }
  </style>

#+end_src

*** Transition
**** transition
Is a shorthand property for:

- transition-behavior
- transition-delay
- transition-duration
- transition-property
- transition-timing-function

Transitions enable you to define the transition between two states of an element. Different states may be defined using pseudo-classes like ~:hover~ or ~:active~ or dynamically set using JavaScript.

If you specify ~all~ as the transition property for one single-property transition, but then specify subsequent single-property transitions with ~<custom-ident>~ values, those subsequent transitions will override the first one.

#+begin_src css

  /* Apply to 1 property */
  /* property name | duration */
  transition: margin-right 4s;

  /* property name | duration | delay */
  transition: margin-right 4s 1s;

  /* property name | duration | easing function */
  transition: margin-right 4s ease-in-out;

  /* property name | duration | easing function | delay */
  transition: margin-right 4s ease-in-out 1s;

  /* property name | duration | behavior */
  transition: display 4s allow-discrete;

  /* Apply to 2 properties */
  transition:
    margin-right 4s,
    color 1s;

  /* Apply to all changed properties */
  transition: all 0.5s ease-out allow-discrete;
  transition: 200ms linear 50ms;

  /* all value */
  transition:
    all 200ms,
    opacity 400ms;
  /* In this case, all the properties that change as the element changes */
  /* state will transition with a duration of 200ms except for opacity, */
  /* which will take 400ms to transition. */


  /* Example: */
  <a class="target">Hover over me</a>
  <style>
  .target {
    font-size: 14px;
    transition: font-size 4s 1s;
  }
  .target:hover {
    font-size: 36px;
  }
  </style>

#+end_src

** The Box model
*** Box model
In CSS we have several types of boxes that generally fit into the categories of block boxes and inline boxes. The *type* refers to how the box behaves in terms of page flow and in *relation to other boxes* on the page. Boxes have an [[Inner display type][inner display type]] and an [[Outer display type][outer display type]].

The CSS box model as a whole applies to block boxes and defines how the different parts of a box — margin, border, padding, and content — work together to create a box that you can see on a page. Inline boxes use just some of the behavior defined in the box model.

This concept of the outer and inner display type is important as this tells us that a container using a layout method such as [[Flexbox]] (~display: flex~) and [[Grid]] Layout (~display: grid~) is still participating in block and inline layout, due to the outer display type of those methods being ~block~.

*Note*: Changing the value of the [[display property]] can change whether the outer display type of a box is block or inline. This changes the way it displays alongside other elements in the layout. The display property defines how a box and any boxes inside it behave.

*** Containing block
**** Containing Block
The *size* and [[Position property][position]] of an element are often impacted by its containing block. Most often, the containing block is the *content area of an element's nearest containing block-level ancestor*, but this is not always the case.

*Percentage values that are applied to* the ~width~ , ~height~ , ~padding~ , ~margin~ , and offset properties of an absolutely positioned element (i.e., which has its ~position~ set to ~absolute~ or ~fixed~) are *computed from the element's containing block*.

*Note*: the *containing block* is the nearest containing block-level of the element (obviously the element must be nested inside the containing) or the containing block has a ~position~ value other than ~static~ ( ~fixed~ , ~absolute~ , ~relative~ , or ~sticky~ ), if there are no other positioned containing ancestors, then ~<html>~ will be the containing block. (INS)

**** Percentage values from the containing block
When certain properties are given a percentage value, the *computed value depends on the element's containing block*. The properties that work this way are *box model properties* and *offset properties*:

- The ~height~ , ~top~ , and ~bottom~ properties compute percentage values from the ~height~ of the containing block.
- The ~width~ , ~left~ , ~right~ , ~padding~ , and ~margin~ properties compute percentage values from the ~width~ of the containing block.

*Note*: A *block container* (such as an inline-block, block, or list-item element) either contains only inline-level boxes participating in an inline formatting context, or only block-level boxes participating in a block formatting context. An element is a block container only if it contains block-level or inline-level boxes.

**** Identifying the containing block
The process for identifying the containing block depends entirely on the value of the element's *position* property:

- If the ~position~ property is ~static~ , ~relative~ , or ~sticky~ , the containing block is formed by the *edge of the content box (content area) of the nearest ancestor element* that is either a block container (such as an inline-block, block, or list-item element) or establishes a formatting context (such as a table container, flex container, grid container, or the block container itself).
- If the ~position~ property is ~absolute~ , the containing block is formed by the *edge of the padding box of the nearest ancestor element* that has a ~position~ value other than ~static~ ( ~fixed~ , ~absolute~ , ~relative~ , or ~sticky~ ).
- If the ~position~ property is ~fixed~ , the containing block is established by the *viewport* (in the case of continuous media) or *the page area* (in the case of paged media).
- If the ~position~ property is ~absolute~ or ~fixed~, the containing block may also be formed by the *edge of the padding box of the nearest ancestor element* that has the following:
  - A ~transform~ or ~perspective~ value other than /none/
  - A ~will-change~ value of /transform/ or /perspective/
  - A ~filter~ value other than /none/ or a /will-change/ value of /filter/ (only works on Firefox).
  - A ~contain~ value of /paint/ (e.g. /contain: paint;/)
  - A ~backdrop-filter~ other than /none/ (e.g. /backdrop-filter: blur(10px);/)

*Note*: The containing block in which the *root* element ( ~<html>~ ) resides is a rectangle called the initial containing block. It has the dimensions of the viewport (for continuous media) or the page area (for paged media).

**** Examples position property block container
***** static position, ancestor block container
In the example below, the paragraph is statically positioned, so its containing block is ~<section>~ because it's the nearest ancestor that is a block container (because of ~display: block~).

The containing block is formed by the *edge of the content box (content area) of the nearest ancestor element*.

#+begin_src css

  <section>
    <p>This is a paragraph!</p>
  </section>
  <style>
  body {
    background: beige;
  }
  section {
    display: block;
    width: 400px;/* content area width is 400px but the box width is 480px */
    height: 160px;/* content area height is 160px but the box height 240px */
    padding: 30px;
    border: 10px solid black;
    margin: 20px;
    background: lightgray;
  }
  p {
    width: 50%; /* == 400px * .5 = 200px */
    height: 25%; /* == 160px * .25 = 40px */
    margin: 5%; /* == 400px * .05 = 20px */
    padding: 5%; /* == 400px * .05 = 20px */
    background: cyan;
  }
  </style>

#+end_src

***** static position, ancestor block container (<body>)
In the example below, the paragraph's containing block is the ~<body>~ element, because ~<section>~ is not a block container (because of ~display: inline~) and doesn't establish a formatting context.

The containing block is formed by the *edge of the content box (content area) of the nearest ancestor element*.

#+begin_src css

  <section>
    <p>This is a paragraph!</p>
  </section>
  <style>
  body {
    background: beige;
  }
  section {
    display: inline;
    background: lightgray;
  }
  p {
    width: 50%; /* == half the body's width */
    height: 200px; /* Note: a percentage would be 0 */
    background: cyan;
  }
  </style>

#+end_src

***** absolute position, ancestor block container (ancestor absolute)
In the example below,the paragraph's containing block is ~<section>~ because the latter's ~position~ is ~absolute~. The paragraph's percentage values are affected by the ~padding~ of its containing block, though if the containing block's ~box-sizing~ value were ~border-box~ this would not be the case.

The containing block is formed by the *edge of the padding box of the nearest ancestor element* that has a ~position~ value other than ~static~.

#+begin_src css

  <section>
    <p>This is a paragraph!</p>
  </section>
  <style>
  body {
    background: beige;
  }
  section {
    position: absolute;
    left: 60px;
    top: 30px;
    width: 400px;
    height: 160px;
    padding: 30px 20px;
    background: lightgray;
  }
  p {
    position: absolute;
    width: 50%; /* == (400px + 20px + 20px) * .5 = 220px */
    height: 25%; /* == (160px + 30px + 30px) * .25 = 55px */
    margin: 5%; /* == (400px + 20px + 20px) * .05 = 22px */
    padding: 5%; /* == (400px + 20px + 20px) * .05 = 22px */
    background: cyan;
  }
  </style>

#+end_src

***** fixed position, ancestor block cointainer (viewport)
In the example below,the paragraph's ~position~ is ~fixed~, so its containing block is the initial containing block (on screens, the *viewport*). Thus, the paragraph's dimensions change based on the size of the browser window.

#+begin_src css

  <section>
    <p>This is a paragraph!</p>
  </section>
  <style>
  body {
    background: beige;
  }
  section {
    width: 400px;
    height: 480px;
    margin: 30px;
    padding: 15px;
    background: lightgray;
  }
  p {
    position: fixed;
    width: 50%; /* == (50vw - (width of vertical scrollbar)) */
    height: 50%; /* == (50vh - (height of horizontal scrollbar)) */
    margin: 5%; /* == (5vw - (width of vertical scrollbar)) */
    padding: 5%; /* == (5vw - (width of vertical scrollbar)) */
    background: cyan;
  }
  </style>

#+end_src

***** absolute position, ancestor with a transform property
In the example below, the paragraph's position is absolute, so its containing block is ~<section>~, which is the nearest ancestor with a transform property that isn't none.

#+begin_src css

  <section>
    <p>This is a paragraph!</p>
  </section>
  <style>
  body {
    background: beige;
  }
  section {
    transform: rotate(0deg);
    width: 400px;
    height: 160px;
    background: lightgray;
  }
  p {
    position: absolute;
    left: 80px;
    top: 30px;
    width: 50%; /* == 200px */
    height: 25%; /* == 40px */
    margin: 5%; /* == 20px */
    padding: 5%; /* == 20px */
    background: cyan;
  }
  </style>

#+end_src

*** Parts of a box
**** Box areas
When a user agent (such as your browser) lays out a document, it generates a box for every element. Each box is divided into four areas.

- margin :: es la distancia que se usa para *separar la caja* de otra cualquiera que este adjacente o que la contenga (contenedor)
- padding :: es la distancia que *separa* la caja de su propio *contenido*. Si el contenido es otra caja, la separación sería con respecto a el margin de es caja de adentro, es decir, el *padding* de la caja mayor se separa conrespecto al *margin* de la caja de adentro.
- border ::
- content ::

#+begin_src artist

  +-----------------------------------------------------------------+
  |                                                                 |
  |   +---------------------------------------------------------+   |
  |   |                                                         |   |
  |   |   +-------------------------------------------------+   |   |
  |   |   |                                                 |   |   |
  |   |   |   +-----------------------------------------+   |   |   |
  |   |   |   |              content area               |   |   |   |
  |   |   |   +-----------------------------------------+   |   |   |
  |   |   | padding area (push the content away from        |   |   |
  |   |   |        the border(separa el contenido))         |   |   |
  |   |   +-------------------------------------------------+   |   |
  |   |        border                                           |   |
  |   +---------------------------------------------------------+   |
  | margin (pushes other elements away from the box (separa         |
  |          cajas una de las otras))                               |
  +-----------------------------------------------------------------+

#+end_src

**** margin
The margin is an invisible space around box. *It pushes other elements away from the box*. Margins can have positive or negative values. Setting a negative margin on one side of your box can cause it to overlap other things on the page. Whether you are using the standard or alternative box model, the margin is always added after the size of the visible box has been calculated.

*Margin collapsing*:
Depending on whether two elements whose margins touch have positive or negative margins, the results will be different:
- two positive margins :: will combine to become one margin. Its size will be equal to the largest individual margin.
- two negative margins :: will collapse and the smallest (furthest from zero) value will be used.
- if one margin is negative :: its value will be subtracted from the total.

*Note*:
- Collapsing margins is only relevant in the vertical direction.
- Margins don't collapse in a container with display set to [[Flexbox][flex]] or [[Grid]].

#+begin_src css

  /* Apply to all four sides */
  margin: 1em; /* relative to the text size */
  margin: -3px; /* An absolute length */
  margin: 5%; /* relative to the nearest block container's width */

  /* top and bottom | left and right */
  margin: 5% auto;

  /* top | left and right | bottom */
  margin: 1em auto 2em;

  /* top | right | bottom | left */
  margin: 2px 1em 0 auto;

  margin: auto; /* top and bottom: 0 margin     */
  /* Box is horizontally centered */

  margin-top: 60px; /* just top */

#+end_src

**** border
The border is drawn between the margin and the padding of a box. (límite que separa el interior del exterior del elemento)

If you are using the *standard box model*, the size of the border is added to the width and height of the content box.

If you are using the *alternative box model* then the size of the border makes the content box smaller as it takes up some of that available width and height of the element box.

#+begin_src css

  /* style */
  border: solid;

  /* width | style */
  border: 2px dotted;

  /* style | color */
  border: outset #f33;

  /* width | style | color */
  border: medium dashed green;


  /* Radius is set for all 4 sides */
  border-radius: 10px;

  /* top-left-and-bottom-right | top-right-and-bottom-left */
  border-radius: 10px 5%;

  /* top-left | top-right-and-bottom-left | bottom-right */
  border-radius: 2px 4px 2px;

  /* top-left | top-right | bottom-right | bottom-left */
  border-radius: 1px 0 3px 4px;


  border-top: 1px solid #ccc;

#+end_src

**** padding
The padding sits between the border and the content area and is used to *push the content away from the border*. Unlike margins, you cannot have a negative padding. Any background applied to your element will display behind the padding.

#+begin_src css

  /* Apply to all four sides */
  padding: 1em;

  /* top and bottom | left and right */
  padding: 5% 10%;

  /* top | left and right | bottom */
  padding: 1em 2em 2em;

  /* top | right | bottom | left */
  padding: 5px 1em 0 2em;

#+end_src

**** content
The area where your content is displayed; size it using properties like ~inline-size~ and ~block-size~ or ~width~ and ~height~.

#+begin_src css

  /* Keywords that cannot be combined with other values */
  content: normal;
  content: none;

  /* <content-replacement>: <image> values */
  content: url("http://www.example.com/test.png");
  content: linear-gradient(#e66465, #9198e5);
  content: image-set("image1x.png" 1x, "image2x.png" 2x);

  /* speech output: alternative text after a "/"  */
  content: url("../img/test.png") / "This is the alt text";

  /* <string> value */
  content: "unparsed text";

  /* attr() value linked to the HTML attribute value */
  content: attr(href);

#+end_src

*** Standar and Alternative box model
**** The standard CSS box model
In the standard box model, if you give a box an ~inline-size~ and a ~block-size~ (or ~width~ and a ~height~) attributes, this defines the inline-size and block-size (*width* and height in horizontal languages) of the content box. Any padding and border is then added to those dimensions to get the total size taken up by the box.
(width = content area)

#+begin_src artist

  +--------------------------------------------------------------+
  |                                                              |
  |   +-----------------------------------------------------+    |
  |   5                                                     5    |
  |   |   +--------------------------------------------+    |    |
  |10 |25 |           content area    350 x 150        |  25|  10|
  |   |   +--------------------------------------------+    |    |
  |   |       padding area                                  |    |
  |   +--------------------------------+--------------------+    |
  |     margin                         |                         |
  +------------------------------------|-------------------------+
                         410 x 210     |
                                       |
                                     border

#+end_src

#+begin_src css

  .box { width: 350px; height: 150px; margin: 10px;
         padding: 25px; border: 5px solid black; }

#+end_src

The actual space taken up by the box will be ~410px~ wide (350 + 25 + 25 + 5 + 5) and ~210px~ high (150 + 25 + 25 + 5 + 5).

*Note*: The margin is not counted towards the actual size of the box — sure, it affects the total space that the box will take up on the page, but only the space outside the box. The box's area stops at the border — it does not extend into the margin.

**** The alternative CSS box model
In the alternative box model, any width is the width of the visible box on the page. The *content area width* is that width minus the width for the padding and border. No need to add up the border and padding to get the real size of the box.
(width = content area + padding + border)

#+begin_src artist

  +--------------------------------------------------------------+
  |                                                              |
  |   +-----------------------------------------------------+    |
  |   5                                                     5    |
  |   |   +--------------------------------------------+    |    |
  |10 |25 |          content area    290 x  90         |  25|  10|
  |   |   +--------------------------------------------+    |    |
  |   |       padding area                                  |    |
  |   +---------------------------------+-------------------+    |
  |     margin                          |                        |
  +-------------------------------------|------------------------+
                         350 x 150      |
                                        |
                                      border

#+end_src

#+begin_src css

  /* To turn on the alternative model for an element, */
  /* set box-sizing: border-box on it: */
  .box { box-sizing: border-box; }

  .box { width: 350px; inline-size: 350px; height: 150px; block-size: 150px;
         margin: 10px; padding: 25px; border: 5px solid black; }


#+end_src

The actual space taken up by the box will be ~350px~ (290+25+25+5+5) in the inline direction and ~150px~ (90+25+25+5+5) in the block direction.

*Note*: To use the alternative box model for all of your elements, set the ~box-sizing~ property on the [[html][<html>]] element and set all other elements to inherit that value.

#+begin_src css

  html {
    box-sizing: border-box;
  }
  *,
  *::before,
  *::after {
    box-sizing: inherit;
  }

#+end_src

*** Notes
- The margin is what separates some block elements from others.
- The vertical margins of two adjacent block element are not added together, but reduced to the greater of the two. (If the top box has a margin of 4 and an adjacent box below has a margin of 2, the distance separating them is the maxiumum between 2 and 4, that is, 4 not 6 as expected)
- If a box is floating, the text in the other boxes will surround it, always respecting the margins of the floating element.
- For block elements you can specify the ~width~ and ~height~ of the element.
- For inline elements the ~width~ and ~height~ of the element is generally the minimum to fit the element.

** Layout
*** Page layout
CSS page layout techniques allow us to take elements contained in a web page and control where they're positioned relative to the following factors: their default position in normal layout flow, the other elements around them, their parent container, and the main viewport/window.

*** Normal flow
**** Definition
Normal flow is how the browser lays out HTML pages by default when you do nothing to control page layout. The HTML is displayed in the exact order in which it appears in the source code, with elements stacked on top of one another.

The [[Position property][position]] property *allows you to precisely control the placement of boxes inside other boxes*. ~static~ positioning is the default in normal flow.

Standard values such as ~block~, ~inline~ or [[inline-block]] can change how elements behave in normal flow. We also have entire layout methods that are enabled via specific display values, for example, CSS [[Grid]] and [[Flexbox]], which alter how child elements are laid out inside their parents.

**** How elements are structured individually
By default, a *block level element's* content *fills the available inline space of the parent element containing it* and the element grows along the block dimension to accommodate its content. The size of *inline elements* is *just the size of their content*. You can't set width or height on inline elements — they just sit inside the content of block level elements — except for images. Unlike other inline elements, images can be resized without changing their [[Display property][display]] property. If you want to control the size of an inline element in this manner, you need to set it to behave like a block level element.

**** How about the structured when the elements interact with one another
The normal layout flow is the system by which elements are placed inside the browser's viewport. By default, *block-level elements* are laid out in the *block flow direction*, which is based on the parent's writing mode (initial: horizontal-tb). *Each element will appear on a new line below the last one*, with each one separated by whatever margin that's been specified. In English, for example, (or any other horizontal, top to bottom writing mode) block-level elements are laid out *vertically*.

*Inline elements* behave differently. They don't appear on new lines; instead, *they all sit on the same line* along with any adjacent (or wrapped) text content as long as there is space for them to do so inside the width of the parent block level element. If there isn't space, then the overflowing content will move down to a new line.

*Note*: The direction in which block element contents are laid out is described as the Block Direction. The *Block Direction runs vertically in a language such as English*, which has a horizontal writing mode. The corresponding *Inline Direction is the direction in which inline contents* (such as a sentence) would run.

*** Position
**** position
Specifies the *type of positioning method* used for an element, that is, *how an element is positioned in a document*. The ~top~ , ~right~ , ~bottom~ , and ~left~ properties determine the final location of positioned elements.

Positioning allows you to *move an element from where it would otherwise be placed in [[Normal flow][normal flow]] over to another location*. Positioning isn't a method for creating the main layouts of a page; it's more about managing and *fine-tuning the position of specific items on a page*.

The ~position~ property allows you to *precisely control the placement of boxes inside other boxes*.

There are five possible values of the ~position~ property. ~static~ positioning is the default in normal flow. *If an item is positioned in any way other than* ~static~ ( ~fixed~ , ~absolute~ , ~relative~ , or ~sticky~ ), then the further properties ~top~, ~bottom~, ~left~, and ~right~ *are used to specify offsets and positions*. The element having position static is not affected by the ~top~, ~bottom~ , ~left~ or ~right~ properties, that is , *the element needs to have one of these* ~fixed~ , ~absolute~ , ~relative~ , or ~sticky~ properties to be able to use ~top~, ~bottom~, ~left~ or ~right~.

The size and position of an element are often impacted by its [[Containing block][containing block]] (*this is why it's so important to learn it*).

*Eloquent*:
The ~position~ style property *influences layout in a powerful way*. By default it has a value of ~static~, meaning the element sits in its normal place in the document. When it is set to ~relative~, the element still takes up space in the document, but now the ~top~ and ~left~ style properties can be used to move it relative to that normal place.

When ~position~ is set to ~absolute~, the element is removed from the normal document flow—that is, it no longer takes up space and may overlap with other elements. Also, its ~top~ and ~left~ properties can be used to absolutely position it relative to the top-left corner of the nearest enclosing element whose ~position~ property isn’t ~static~, or relative to the document if no such enclosing element exists.

#+begin_src css

  /* Syntax */
  position: static|absolute|fixed|relative|sticky|initial|inherit;
  /* Default value: static */

#+end_src

*ManzDev: Grid or Flex + position*
Si se tiene un contenedor con ~display: flex~ o ~display: grid~ con sus items alineados, por ejemplo, al centro ~justify-items: center; align-items: center;~ y se quiere alinear separadamente uno(s) de sus items hijos, se debe colocar la propiedad  ~position: relative~ que haría al contenedor relativo a sus items hijos y la propiedad ~position: absolute~ en los hijos que se quieran reposicionar.

Al hacer esto los items hijos con la propiedad ~position: absolute~ se colocan por decirlo así en otra capa, y se alinearían al centro del contenedor debido a que son hijos de un grid o flex que previamente los alinea al centro. Si por ejemplo se quiere mover verticalemente, basta con solo usar la propiedad ~top~ o ~bottom~.

#+begin_src css

  <div class="card" data-card="7" data-suit="*">
    <span class="item">*</span>
    <span class="item">*</span>
    <span class="item">*</span>
    <span class="item">*</span>
    <span class="item">*</span>
    <span class="item">*</span>
    <span class="item">*</span>
  </div>

  <style>
  .card {
    width: 100px;
    height: 150px;
    background: red;
  }

  [data-card="7"] {
    display: grid;
    grid-template-rows: repeat(3, 1fr);
    grid-template-columns: repeat(2, 1fr);
    justify-items: center;
    align-items: center;

    & .item:nth-child(1) {
      position: absolute;
      top: 25%;
    }
  }
  </style>

#+end_src

**** static
Is the *default* that every element gets. It just means "*put the element into its normal position in the document layout flow*".

#+begin_src css

    <h1>Static positioning</h1>

  <p class="positioned">By default we span 100% of the width of our
  parent element, and our are as tall as our child content. Our total
  width and height is our content + padding + border width/height.</p>
  <p>We are separated by our margins. Because of margin collapsing, we
  are separated by the width of one of our margins, not both.</p>

  <p>inline elements <span>like this one</span> and <span>this
  one</span> sit on the same line as one another, and adjacent text
  nodes, if there is space on the same line. Overflowing inline
  elements <span>wrap onto a new line if possible — like this one
  containing text</span>, or just go on to a new line if not, much like
  this image will do: <img src="long.jpg" alt="a wide but short section
  of a photo of several fabrics"></p>
  <style>                                                                       body {
      width: 500px;
      margin: 0 auto;
    }
    p {
      background: aqua;
      border: 3px solid blue;
      padding: 10px;
      margin: 10px;
    }
    span {
      background: red;
      border: 1px solid black;
    }
    .positioned {
      position: static;
      background: yellow;
    }
    </style>

#+end_src

**** relative
The item is *placed in the normal flow, and then shifted or offset from that position*. Subsequent flow items are laid out as if the item had not been moved.

This is very similar to [[static]] positioning, allows you to modify an element's position on the page, moving it *relative to its position in normal flow*, as well as making it overlap other elements on the page. This means you could achieve a task such as moving an icon down a bit so it lines up with a text label.

~top~ , ~bottom~ , ~left~ , and ~right~ are used alongside position to specify exactly where to move the positioned element to.

*Note*: You need to think of it as if there's an invisible force that pushes the specified side of the positioned box, moving it in the opposite direction. So, for example, if you specify ~top: 30px;~, it's as if a force will push the top of the box, causing it to move downwards by 30px.

#+begin_src css

  <h1>Relative positioning</h1>

  <p>I am a basic block level element. My adjacent block level elements
  sit on new lines below me.</p>

  <p class="positioned">Now Im absolutely positioned relative to
  the <code>&lt;body&gt;</code> element, not
  the <code>&lt;html&gt;</code> element!</p>

  <p>We are separated by our margins. Because of margin collapsing, we
  are separated by the width of one of our margins, not both.</p>

  <p>inline elements <span>like this one</span> and <span>this
  one</span> sit on the same line as one another, and adjacent text
  nodes, if there is space on the same line. Overflowing inline
  elements <span>wrap onto a new line if possible — like this one
  containing text</span>, or just go on to a new line if not, much like
  this image will do: <img src="long.jpg" alt="a wide but short section
  of a photo of several fabrics"></p>
  <style>
  body {
    width: 500px;
    margin: 0 auto;
   }

    p {
      background: aqua;
      border: 3px solid blue;
      padding: 10px;
      margin: 10px;
    }
    span {
      background: red;
      border: 1px solid black;
    }
    .positioned {
      position: relative; /* relative to its initial size */
      top: 30px;
      left: 30px;
      background: yellow;
    }
    </style>

#+end_src

**** absolute
***** Definition
*Moves an element completely out of the page's normal layout flow*, like it's sitting on its own *separate layer*. From there, you can fix it to a position relative to the edges of its closest positioned ancestor (which becomes ~<html>~ or ~<body>~ if no other ancestors are positioned) (sometimes ~absolute~ positions an element in place relative to the visible portion of the viewport (INS)). The element is *positioned in relation to its nearest non-static ancestor*, that is, the [[Containing Block][containing block]] of element must have any property other than ~static~.

An absolutely positioned element is very useful: it means that *we can create isolated UI features that don't interfere with the layout of other elements on the page*. For example, popup information boxes, control menus, rollover panels, UI features that can be dragged and dropped anywhere on the page, and so on.

~top~ , ~bottom~ , ~left~ , and ~right~ behave in a different way with absolute positioning. Rather than positioning the element based on its [[relative]] position within the normal document flow, they specify the distance the element should be from each of the *containing element's sides*. So in this case, we are saying that the absolutely positioned element should sit 30px from the top of the "containing element" and 30px from the left. (In this case, the "containing element" is the initial containing block)

*Note*: Try setting ~top: 0; bottom: 0; left: 0; right: 0;~ and ~margin: 0;~ on your positioned elements. The results is that the element will take up the full window.

*Note*: Margins still affect positioned elements. Margin collapsing doesn't, however.

*Nota*: ~position: absolute~ envia los items a otra capa, de esta manera puede haber ocaciones donde otro item tenga overflow y sin embargo se vea por debajo de otro elemento, eso puede pasar porque dicho elemento tiene la propiedad ~position: absolute~ y esta en una capa por encima del resto de los elementos.

#+begin_src css

  <h1>Absolute Positioning</h1>

  <p>I am a basic block level element. My adjacent block level elements
  sit on new lines below me.</p>

  <p class="positioned">Now Im absolutely positioned relative to
  the <code>&lt;body&gt;</code> element, not
  the <code>&lt;html&gt;</code> element!</p>

  <p>We are separated by our margins. Because of margin collapsing, we
  are separated by the width of one of our margins, not both.</p>

  <p>inline elements <span>like this one</span> and <span>this
  one</span> sit on the same line as one another, and adjacent text
  nodes, if there is space on the same line. Overflowing inline
  elements <span>wrap onto a new line if possible — like this one
  containing text</span>, or just go on to a new line if not, much like
  this image will do: <img src="long.jpg" alt="a wide but short section
  of a photo of several fabrics"></p>
  <style>
  body {
    width: 500px;
    margin: 0 auto;
  }

  p {
    background: aqua;
    border: 3px solid blue;
    padding: 10px;
    margin: 10px;
  }
  span {
    background: red;
    border: 1px solid black;
  }
  .positioned {
    position: absolute;
    top: 30px;
    left: 30px;
    background: yellow;
  }
  </style>

#+end_src

***** Containing element of an absolutely positioned element
Which element is the "[[Containing Block][containing element]]" of an absolutely positioned element? This is very much dependent on the [[position]] property of the ancestors of the positioned element.

If no ancestor elements have their position property explicitly defined, then by default all ancestor elements will have a [[static]] position. The result of this is the absolutely positioned element will be contained in the *initial containing block*. The initial containing block has the dimensions of the viewport and is also the block that contains the ~<html>~ element. In other words, *the absolutely positioned element will be displayed outside of the ~<html>~ element and be positioned relative to the initial viewport*.

The positioned element is nested inside the ~<body>~ in the HTML source, but in the final layout it's 30px away from the top and the left edges of the page. We can change the positioning context, that is, which element the absolutely positioned element is positioned relative to. This is done by *setting positioning on one of the element's ancestors*: to one of the elements it's nested inside of (you can't position it relative to an element it's not nested inside of).

#+begin_src css

  <h1>Positioning context</h1>

  <p>I am a basic block level element. My adjacent block level elements
  sit on new lines below me.</p>

  <p class="positioned">Now Im absolutely positioned relative to
  the <code>&lt;body&gt;</code> element, not
  the <code>&lt;html&gt;</code> element!</p>

  <p>We are separated by our margins. Because of margin collapsing, we
  are separated by the width of one of our margins, not both.</p>

  <p>inline elements <span>like this one</span> and <span>this
  one</span> sit on the same line as one another, and adjacent text
  nodes, if there is space on the same line. Overflowing inline
  elements <span>wrap onto a new line if possible — like this one
  containing text</span>, or just go on to a new line if not, much like
  this image will do: <img src="long.jpg" alt="a wide but short section
  of a photo of several fabrics"></p>
  <style>
  body {
    width: 500px;
    margin: 0 auto;
    position: relative;
  }
  p {
    background: aqua;
    border: 3px solid blue;
    padding: 10px;
    margin: 10px;
  }
  span {
    background: red;
    border: 1px solid black;
  }
  .positioned {
    position: absolute;
    background: yellow;
    top: 30px;
    left: 30px;
  }
  </style>


  /* ManzDev example */
  <div class="container">
    <div class="middle">
      <div class="element"></div>
  </div>
  </div>
  <style>
  .container {
    border: 5px solid indigo;
    width: 600px;
    height: 300px;
    margin: 20px;
    /* position: relative; uncomment to make this the reference container */
  }
  .middle {
    border: 5px solid steelblue;
    width: 300px;
    height: 150px;
    margin: 50px;
    /* position: relative; uncomment to make this the reference container */
  }
  .element {
    width: 50px;
    height: 50px;
    background: red;
    position: absolute;
    top: 0;
    left: 0;
  }
  </style>

#+end_src

***** Contexto de apilamiento
Al añadir un posicionamiento absoluto a un elemento, se dice que el elemento entra en un contexto de apilamiento diferente, ya que este ha sido posicionado en un espacio tridimensional (una capa diferente), por lo que no interactua de la misma forma respecto a otros elementos.

En CSS existen múltiples formas de crear contextos de apilamiento, a parte de cuando posicionas de forma absoluta un elemento:

- A los hijos (directos) de un elemento ~display: flex~ o ~display: grid~ con ~z-index~ especificado.
- A elementos con un ~opacity~ diferente de ~1~ y sus elementos descendientes
- A elementos con un [[transform]] , [[filter()]] , [[clip-path()]] , ~mask~ (o similares)
- A elementos con un ~will-change~ o un ~contain~ establecido
- A ciertos elementos con un ~container-type~ o un ~contain~ establecido
- A elementos con un ~mix-blend-mode~ establecido
- A elementos con un ~isolation~ establecido a ~isolate~

**** fixed
The item is absolutely positioned in a *fixed position on the screen even as the rest of the document is scrolled*.

This works in exactly the same way as [[absolute]] positioning, with one key difference: whereas absolute positioning fixes an element in place relative to its nearest positioned ancestor (the initial containing block if there isn't one), fixed positioning usually fixes an element in place *relative to the visible portion of the viewport*. (An exception to this occurs if one of the element's ancestors is a fixed containing block because its transform property has a value other than none.)

This means that *you can create useful UI items that are fixed in place, like persistent navigation menus that are always visible*.

In the example below some content is initially clipped under the heading. This is because the positioned heading no longer appears in the document flow, so the rest of the content moves up to the top. We could improve this by moving the paragraphs all down a bit. We can do this by setting some top margin on the first paragraph. Apply the last selector to see this.

#+begin_src css

  <h1>Fixed positioning</h1>

  <p>I am a basic block level element. My adjacent block level elements
  sit on new lines below me.</p>

  <p class="positioned">Now Im absolutely positioned relative to
  the <code>&lt;body&gt;</code> element, not
  the <code>&lt;html&gt;</code> element!</p>

  <p>We are separated by our margins. Because of margin collapsing, we
  are separated by the width of one of our margins, not both.</p>

  <p>inline elements <span>like this one</span> and <span>this
  one</span> sit on the same line as one another, and adjacent text
  nodes, if there is space on the same line. Overflowing inline
  elements <span>wrap onto a new line if possible — like this one
  containing text</span>, or just go on to a new line if not, much like
  this image will do: <img src="long.jpg" alt="a wide but short section
  of a photo of several fabrics"></p>
  <style>
  body {
    width: 500px;
    height: 1400px;
    margin: 0 auto;
  }
  h1 {
    position: fixed;
    top: 0;
    width: 500px;
    margin-top: 0;
    background: silver;
    padding: 10px;
  }
  p {
    background: aqua;
    border: 3px solid blue;
    padding: 10px;
    margin: 10px;
  }
  span {
    background: red;
    border: 1px solid black;
  }
  /* Uncomment this to see all the paragraphs in the proper way */
  /* p:nth-of-type(1) { */
  /*   margin-top: 60px; */
  /* } */
  </style>

#+end_src

**** sticky
***** Definition
This is basically a hybrid between [[relative]] and [[fixed]] position. It allows a *positioned element to act like it's relatively positioned until it's scrolled* to a certain threshold (e.g., 10px from the top of the viewport), after which it becomes fixed.

Sticky positioning can be used, for example, to cause a navigation bar to scroll with the page until a certain point and then stick to the top of the page.

#+begin_src css

  <h1>Sticky positioning</h1>

  <p>
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla
  luctus aliquam dolor, eu lacinia lorem placerat vulputate. Duis
  felis orci, pulvinar id metus ut, rutrum luctus orci. Cras porttitor
  imperdiet nunc, at ultricies tellus laoreet sit amet. Sed auctor
  cursus massa at porta. Integer ligula ipsum, tristique sit amet orci
  vel, viverra egestas ligula. Curabitur vehicula tellus neque, ac
  ornare ex malesuada et. In vitae convallis lacus. Aliquam erat
  volutpat. Suspendisse ac imperdiet turpis. Aenean finibus
  sollicitudin eros pharetra congue. Duis ornare egestas augue ut
  luctus. Proin blandit quam nec lacus varius commodo et a urna. Ut id
  ornare felis, eget fermentum sapien.
</p>

  <div class="positioned">Sticky</div>

  <p>
    Nam vulputate diam nec tempor bibendum. Donec luctus augue eget
    malesuada ultrices. Phasellus turpis est, posuere sit amet dapibus
    ut, facilisis sed est. Nam id risus quis ante semper consectetur
    eget aliquam lorem. Vivamus tristique elit dolor, sed pretium metus
    suscipit vel. Mauris ultricies lectus sed lobortis finibus. Vivamus
    eu urna eget velit cursus viverra quis vestibulum sem. Aliquam
    tincidunt eget purus in interdum. Cum sociis natoque penatibus et
    magnis dis parturient montes, nascetur ridiculus mus.
  </p>

  <p>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla
    luctus aliquam dolor, eu lacinia lorem placerat vulputate. Duis
    felis orci, pulvinar id metus ut, rutrum luctus orci. Cras porttitor
    imperdiet nunc, at ultricies tellus laoreet sit amet. Sed auctor
    cursus massa at porta. Integer ligula ipsum, tristique sit amet orci
    vel, viverra egestas ligula. Curabitur vehicula tellus neque, ac
    ornare ex malesuada et. In vitae convallis lacus. Aliquam erat
    volutpat. Suspendisse ac imperdiet turpis. Aenean finibus
    sollicitudin eros pharetra congue. Duis ornare egestas augue ut
    luctus. Proin blandit quam nec lacus varius commodo et a urna. Ut id
    ornare felis, eget fermentum sapien.
  </p>

  <p>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla
    luctus aliquam dolor, eu lacinia lorem placerat vulputate. Duis
    felis orci, pulvinar id metus ut, rutrum luctus orci. Cras porttitor
    imperdiet nunc, at ultricies tellus laoreet sit amet. Sed auctor
    cursus massa at porta. Integer ligula ipsum, tristique sit amet orci
    vel, viverra egestas ligula. Curabitur vehicula tellus neque, ac
    ornare ex malesuada et. In vitae convallis lacus. Aliquam erat
    volutpat. Suspendisse ac imperdiet turpis. Aenean finibus
    sollicitudin eros pharetra congue. Duis ornare egestas augue ut
    luctus. Proin blandit quam nec lacus varius commodo et a urna. Ut id
    ornare felis, eget fermentum sapien.
  </p>
  <style>
  body {
    width: 500px;
    margin: 0 auto;
  }
  .positioned {
    background: rgb(255 84 104 / 30%);
    border: 2px solid rgb(255 84 104);
    padding: 10px;
    margin: 10px;
    border-radius: 5px;
  }
  .positioned {
    position: sticky;
    top: 30px;
    left: 30px;
  }
  </style>

#+end_src

***** Example of a scrolling index
An interesting and common use of ~position: sticky~ is to create a scrolling index page where different headings stick to the top of the page as they reach it.

In normal flow the ~<dt>~ elements will scroll with the content. When we add ~position: sticky~ to the ~<dt>~ element, along with a ~top~ value of 0, supporting browsers will stick the headings to the top of the viewport as they reach that position. Each subsequent header will then replace the previous one as it scrolls up to that position.

#+begin_src css

  <h1>Sticky positioning</h1>

  <dl>
    <dt>A</dt>
    <dd>Apple</dd>
    <dd>Ant</dd>
    <dd>Altimeter</dd>
    <dd>Airplane</dd>
    <dt>B</dt>
    <dd>Bird</dd>
    <dd>Buzzard</dd>
    <dd>Bee</dd>
    <dd>Banana</dd>
    <dd>Beanstalk</dd>
    <dt>C</dt>
    <dd>Calculator</dd>
    <dd>Cane</dd>
    <dd>Camera</dd>
    <dd>Camel</dd>
    <dt>D</dt>
    <dd>Duck</dd>
    <dd>Dime</dd>
    <dd>Dipstick</dd>
    <dd>Drone</dd>
    <dt>E</dt>
    <dd>Egg</dd>
    <dd>Elephant</dd>
    <dd>Egret</dd>
  </dl>
  <style>
  body {
    width: 500px;
    height: 1400px;
    margin: 0 auto;
  }
  dt {
    background-color: black;
    color: white;
    padding: 10px;
    position: sticky;
    top: 0;
    left: 0;
    margin: 1em 0;
  }
  </style>

#+end_src

**** z-index
You can change the *stacking order* by using the ~z-index~ property. "z-index" is a reference to the z-axis.

For languages that run left to right, (0,0) is at the top left of the page (or element), and the x- and y-axes run across to the right and down the page.

~z-index~ values affect where positioned elements sit on that axis; positive values move them higher up the stack, negative values move them lower down the stack. By default, positioned elements all have a ~z-index~ of ~auto~ , which is effectively 0.

~z-index~ only accepts unitless index values. Higher values will go above lower values and it's up to you what values you use. Using values of 2 or 3 would give the same effect as values of 300 or 40000.

*Nota*: la propiedad z-index, no funcionará con elementos que estén utilizando posicionamiento ~static~, debe tener un tipo de posicionamiento diferente ( ~fixed~ , ~absolute~ , ~relative~ , or ~sticky~ ).

#+begin_src css

  <h1>z-index</h1>

  <p>I am a basic block level element. My adjacent block level elements
  sit on new lines below me.</p>

  <p class="positioned">Now Im absolutely positioned relative to
  the <code>&lt;body&gt;</code> element, not
  the <code>&lt;html&gt;</code> element!</p>

  <p>We are separated by our margins. Because of margin collapsing, we
  are separated by the width of one of our margins, not both.</p>

  <p>inline elements <span>like this one</span> and <span>this
  one</span> sit on the same line as one another, and adjacent text
  nodes, if there is space on the same line. Overflowing inline
  elements <span>wrap onto a new line if possible — like this one
  containing text</span>, or just go on to a new line if not, much like
  this image will do: <img src="long.jpg" alt="a wide but short section
  of a photo of several fabrics"></p>
  <style>
  body {
      width: 500px;
      margin: 0 auto;
      position: relative;
  }
  p {
    background: aqua;
    border: 3px solid blue;
    padding: 10px;
    margin: 10px;
  }
  span {
    background: red;
    border: 1px solid black;
  }
  .positioned {
    position: absolute;
    top: 20px;
    left: 30px;
    background: yellow;
  }
  p:nth-of-type(1) {
    position: absolute;
    background: lime;
    top: 10px;
    right: 30px;
    z-index: 1;
  }
  </style>

#+end_src

**** inset
~inset~ es un shorthand de: ~top~ , ~right~ , ~bottom~ y ~left~. Podemos utilizarla indicando diferentes parámetros:

- 1 parámetro :: aplica el mismo valor a todos: ~top~ , ~right~ , ~bottom~ y ~left~.
- 2 parámetros :: primer valor  ~top~ y ~bottom~ , segundo ~left~ y ~right~.
- 3 parámetros :: primer valor  ~top~  segundo ~right~ y ~left~ y el tercero ~bottom~.
- 4 parámetros :: primer valor ~top~ , segundo ~right~ , tercero ~bottom~ y cuarto ~left~.

*** Flexbox
**** Flex brief
Flexbox is the short name for the Flexible Box Layout CSS module, designed to make it easy for us to *lay things out in one dimension* — either as a row or as a column. Items flex (*expand*) to fill additional space or shrink to fit into smaller spaces. To use flexbox, you apply ~display: flex~ to the parent element of the elements you want to lay out; all its direct children then become flex items.

*Graph Flex Model*:
- The *main axis* is the axis running in the *direction the flex items are laid out* in (for example, as a row across the page, or a column down the page.) The start and end of this axis are called the *main start* and *main end*.
- The *cross axis* is the axis running *perpendicular to the direction* the flex items are laid out in. The start and end of this axis are called the *cross start* and *cross end*.
- The parent element that has ~display: flex~ set on it is called the *flex container*.
- The items laid out as flexible boxes inside the flex container are called *flex items*.

*When to use Flexbox*:
- *Vertically centering* a block of content inside its parent.
- Making all the children of a container take up an *equal amount of the available* width/height, regardless of how much width/height is available.
- Making all columns in a multiple-column layout adopt the *same height* even if they contain a different amount of content.

#+begin_src artist

  +-------------------------------------------------------------+
  |flex container     ^                   ^                     |
  |                   | cross start       │  cross axis         |
  |                   |                   │                     |
  |<──────────────────────────────────────┼────────────────────>|
  |                    main axis          │                     |
  | +--------------+   +---------------+  │  +----------------+ |
  | |              |   |               |  │  |             ^  | |
  | | felx item    |   | flex item     |  │  | flex item   │  | |
  | |              |   |               |  │  |             │  | |
  | |              |   |               |  │  |             │  | |
  | |              |   |               |  │  |             │  | |
  | |              |   |<─────────────>|  │  |   cross size│  | |
  | |              |   |  main size    |  │  |             v  | |
  | +--------------+   +---------------+  │  +----------------+ |
  |                   cross end           │                     |
  |<---main start     |                   │    main end   ----->|
  |                   v                   v                     |
  +-------------------------------------------------------------+

#+end_src

**** display: flex
The HTML markup below gives us a containing element with a class of ~wrapper~, inside of which are three ~<div>~ elements. By default these would display as block elements, that is, below one another in our English language document.

However, if we add ~display: flex~ to the parent (it acting like a block-element in terms of how it interacts with the rest of the page, but its children are laid out as flex items) the three items now arrange themselves into *columns*. This is due to them becoming flex items and being affected by some initial values that flexbox sets on the flex container. They are displayed (*direction* the flexbox children are laid out in) in a row because the property ~flex-direction~ of the parent element has an initial value of ~row~.

They all appear to stretch in height because the property ~align-items~ of their parent element has an initial value of ~stretch~. This means that the items stretch to the height of the flex container, which in this case is defined by the tallest item. The items all line up at the start of the container, leaving any extra space at the end of the row.

#+begin_src artist

  +-------------------------------+
  | +---------------------------+ |
  | |  1                        | |
  | +---------------------------+ |
  | +---------------------------+ |
  | |  2                        | |
  | +---------------------------+ |
  | +---------------------------+ |
  | |  3                        | |
  | +---------------------------+ |
  +-------------------------------+

  +-------------------------------+
  | +---+  +---+  +---+           |
  | | 1 |  | 2 |  | 3 |           | arrange columns
  | +---+  +---+  +---+           | direction row
  +-------------------------------+

#+end_src

#+begin_src css

  <div class="wrapper">
    <div class="box box1">One</div>
    <div class="box box2">Two</div>
    <div class="box box3">Three</div>
  </div>
  <style>
  .wrapper {
    display: flex;
    background: blue;
    /* flex-direction: row; by default */
  }
  .box {
    background: red;
    border: 1px solid yellow;
  }
  </style>

#+end_src

**** display: inline-flex
Establece un contenedor en línea, similar a [[inline-block]] (ocupa solo el contenido) a diferencia de [[display: flex]] el cual establece un contenedor en bloque, similar a ~block~ (ocupa todo el ancho del padre).

**** flex-direction
It specifies which direction the [[Flex brief][main axis]] runs (which direction the flexbox children are laid out in). By default this is set to ~row~, which causes them to be laid out in a row in the direction your browser's default language works in (left to right, in the case of an English browser).

| /VALOR/          | /DESCRIPCIÓN/                                    |
|----------------+------------------------------------------------|
| /row/            | dirección del eje principal horizontal         |
| /row-reverse/    | dirección del eje principal horizontal inverso |
| /column/         | dirección del eje principal vertical           |
| /column-reverse/ | dirección del eje principal vertical inverso   |

#+begin_src css

  <div class="wrapper">
    <div class="box box1">One</div>
    <div class="box box2">Two</div>
    <div class="box box3">Three</div>
  </div>
  <style>
  .wrapper {
    display: flex;
    background: blue;
    flex-direction: column; /* row by default */
  }
  .box {
    background: red;
    border: 1px solid yellow;
  }
  </style>

#+end_src

**** flex-wrap (multicolumns)
Flex items are laid out in multiple rows in the flex container. The ~flex-wrap~ property is set to 'wrap' in the flex container to *displays the flex items in a new row if the flex items in the previous row overflow outside the flexbox container*. All the items are stretched to be the same height, as tall as the flex item with the most content.

*ManzDev*
En general, flex se suele utilizar para estructuras de una sola dimensión, es decir, contenedores que sólo van en una dirección. Sin embargo, existe una propiedad denominada ~flex-wrap~ con la que podemos especificar un comportamiento especial del contenedor.

Por defecto, si un elemento no cabe dentro de nuestro contenedor flex, los elementos se harán más pequeños (*son flexibles*) para ajustarlos al contenedor. Este es el comportamiento por defecto de un contenedor flex. Sin embargo, con la propiedad ~flex-wrap~ podemos cambiar este comportamiento y permitir que nuestro contenedor flex se desborde, convirtiéndose en un *contenedor flex multilínea*.

| /VALOR/        | /DESCRIPCIÓN/                                       |
|--------------+---------------------------------------------------|
| /nowrap/       | ajusta items para ocupar el tamaño del contenedor |
| /wrap/         | ítems en modo multilínea                          |
| /wrap-reverse/ | ítems en modo multilínea inverso                  |

#+begin_src artist

  +-------------------------------+
  |                               |
  | +-----+  +-----+  +-----+  +-----+
  | |  1  |  |  2  |  |  3  |  |  4  |
  | +-----+  +-----+  +-----+  +-----+
  |                               |
  +-------------------------------+

  +-------------------------------+
  |                               |
  | +-----+  +-----+  +-----+     |
  | |  1  |  |  2  |  |  3  |     |
  | +-----+  +-----+  +-----+     |
  | +-----+                       |
  | |  4  |                       |
  | +-----+                       |
  |                               |
  +-------------------------------+

#+end_src

#+begin_src css

  <style>
  html { font-family: sans-serif; }

  body {
    margin: 0;
  }

  header {
    background: purple;
    height: 100px;
  }

  h1 {
    text-align: center;
    color: white;
    line-height: 100px;
    margin: 0;
  }

  article {
    padding: 10px;
    margin: 10px;
    background: aqua;
  }

  /* Add your flexbox CSS below here */
  section {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
  }

  article {
    flex: 200px;
    /* means that each will be at least 200px wide */
  }
  </style>

  <header>
    <h1>Sample flexbox example</h1>
  </header>

  <section>
    <article>
      <h2>First article</h2>

  <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Second article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Third article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>

    <p>Cray food truck brunch, XOXO +1 keffiyeh pickled chambray
    waistcoat ennui. Organic small batch paleo 8-bit. Intelligentsia
    umami wayfarers pickled, asymmetrical kombucha letterpress kitsch
    leggings cold-pressed squid chartreuse put a bird on it. Listicle
    pickled man bun cornhole heirloom art party.</p>
  </article>

  <article>
    <h2>Fourth article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Fifth article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Sixth article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>

    <p>Cray food truck brunch, XOXO +1 keffiyeh pickled chambray
    waistcoat ennui. Organic small batch paleo 8-bit. Intelligentsia
    umami wayfarers pickled, asymmetrical kombucha letterpress kitsch
    leggings cold-pressed squid chartreuse put a bird on it. Listicle
    pickled man bun cornhole heirloom art party.</p>
  </article>

  <article>
    <h2>Seventh article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Eighth article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Ninth article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>

    <p>Cray food truck brunch, XOXO +1 keffiyeh pickled chambray
    waistcoat ennui. Organic small batch paleo 8-bit. Intelligentsia
    umami wayfarers pickled, asymmetrical kombucha letterpress kitsch
    leggings cold-pressed squid chartreuse put a bird on it. Listicle
    pickled man bun cornhole heirloom art party.</p>
  </article>

  <article>
    <h2>Tenth article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Eleventh article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Twelfth article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>

    <p>Cray food truck brunch, XOXO +1 keffiyeh pickled chambray
    waistcoat ennui. Organic small batch paleo 8-bit. Intelligentsia
    umami wayfarers pickled, asymmetrical kombucha letterpress kitsch
    leggings cold-pressed squid chartreuse put a bird on it. Listicle
    pickled man bun cornhole heirloom art party.</p>
  </article>
</section>

#+end_src

**** flex-flow (shorthand)
It is a shorthand for ~flex-direction~ and ~flex-wrap~ .

#+begin_src css

  /* can be replaced */
  flex-direction: row;
  flex-wrap: wrap;

  /* with */
  flex-flow: row wrap;

#+end_src

**** flex items (flexibilidad)
***** flex: properties
In addition to properties that can be applied to a *flex container*, there are also properties that can be applied to *flex items*. These properties, among other things, can change the way that *items flex*, enabling them to expand or contract according to available space.

As a simple example, we can add the ~flex~ property to all of our child items, and give it a value of ~1~. *This will cause all of the items to grow and fill the container, rather than leaving space at the end*. If there is more space then the items will become wider; if there is less space they will become narrower. In addition, if you add another element to the markup, the other items will all become smaller to make space for it; the items all together continue taking up all the space.

#+begin_src artist

  +-------------------------------+
  | +---------------------------+ |
  | |  1                        | |
  | +---------------------------+ |
  | +---------------------------+ |
  | |  2                        | |
  | +---------------------------+ |
  | +---------------------------+ |
  | |  3                        | |
  | +---------------------------+ |
  +-------------------------------+

  +-------------------------------+
  | +-------+ +-------+ +-------+ |
  | |   1   | |   2   | |    3  | |
  | +-------+ +-------+ +-------+ |
  +-------------------------------+

#+end_src

#+begin_src css

  <div class="wrapper">
    <div class="box1">One</div>
    <div class="box2">Two</div>
    <div class="box3">Three</div>
  </div>
  <style>
  .wrapper {
    display: flex;
    background: blue;
  }
  .wrapper > div {
    flex: 1;
    background: red;
    border: 1px solid yellow;
  }
  </style>

#+end_src

***** Flexible sizing of flex items
The proportion value in the example dictates how much available space along the [[Flex brief][main axis]] each flex item will take up compared to other flex items. In this case a value of *1*, which means *they'll all take up an equal amount* of the spare space left after properties like padding and margin have been set. This value is proportionally shared among the flex items.

Now adding the next rule, then the third ~<article>~ takes up twice as much of the available width as the other two. There are now four proportion units available in total (since 1 + 1 + 2 = 4). The first two flex items have one unit each, so they each take 1/4 of the available space. The third one has two units, so it takes up 2/4 of the available space (or one-half).

#+begin_src css

  <section>
    <article>
      <h2>First article</h2>
      <p>Tacos actually microdosing,....</p>
    </article>
    <article>
      <h2>Second article</h2>
      <p>Tacos actually microdosing...</p>
    </article>
    <article>
      <h2>Third article</h2>
      <p>Tacos actually microdosing,...</p>
      <p>Cray food truc....</p>
    </article>
  </section>
  <style>
  section {
    display: flex;
  }
  /* First take the following rule: */
  article {
    flex: 1;
    padding: 10px;
    margin: 10px;
    background: aqua;
  }
  /* Next rule */
  article:nth-of-type(3) {
    flex: 2;
  }
  </style>

#+end_src

***** Specify minimum value
You can also specify a minimum size value within the flex value. This basically states, "Each flex item will first be given 200px of the available space. After that, the rest of the available space will be shared according to the proportion units.

#+begin_src css

  <section>
    <article>
      <h2>First article</h2>
      <p>Tacos actually microdosing,....</p>
    </article>
    <article>
      <h2>Second article</h2>
      <p>Tacos actually microdosing...</p>
    </article>
    <article>
      <h2>Third article</h2>
      <p>Tacos actually microdosing,...</p>
      <p>Cray food truc....</p>
    </article>
  </section>
  <style>
  section {
      display: flex;
  }
  article {
    flex: 1 200px;
    /* flex: 1 auto; */
    padding: 10px;
    margin: 10px;
    background: aqua;
  }
  article:nth-of-type(3) {
    flex: 2 200px;
  }
  </style>

#+end_src

***** flex-basis flex-grow flex-shrink (ManzDev)
****** flex-basis
Define el *tamaño base* por defecto que tendrán los ítems antes de aplicarle una cierta distribución de espacio. Se suele aplicar un tamaño específico (unidades, porcentajes, etc...), pero también se puede aplicar la palabra clave ~content~ que ajusta automáticamente el tamaño al contenido del elemento. Este es el valor por defecto de la propiedad.

Un detalle interesante sobre esta propiedad, es que si le aplicamos un [[flex-direction][flex-direction: column]] y aumentamos el ~height~, invertiremos los ejes primario y secundario, y ~flex-basis~ actuará como ~height~ en lugar de como ~width~. Observa también que al estar usando la propiedad de atajo ~gap~, el hueco se aplica a ambos ejes, por lo que también actua.

#+begin_src css

  <div class="container">
    <div class="item">Elemento 1</div>
    <div class="item">Elemento 2</div>
    <div class="item">Elemento 3</div>
  </div>
  <style>
  .container {
    display: flex;
    justify-content: center;
    align-items: center;
    background: blue;
    height: 150px;
    gap: 20px;
  }
  .item {
    flex-basis: 200px;
    background: red;
  }
  </style>

#+end_src

****** flex-grow
Esta propiedad actúa en situaciones donde:

- Hay un ~flex-basis~ definido.
- Los ítems *si* cubren el tamaño total del contenedor flex padre.

En esas situaciones, la propiedad ~flex-grow~ indica el *factor de crecimiento* de los ítems en el caso de que no tengan un ancho o alto específico.

Por omisión, todos los elementos tienen un ~flew-grow: 0~ definido, de modo que no hay factor de crecimiento en el elemento, y tendrá el tamaño definido por la propiedad ~flex-basis~. Sin embargo, si colocamos un ~flex-grow: 1~ al primer hijo, este crecerá hasta que la suma de los hijos ocupen el 100% del contenedor, mientras que el resto de hijos tendrá el tamaño base definido por ~flex-basis~.

#+begin_src css

  <div class="container">
    <div class="item">Elemento 1</div>
    <div class="item">Elemento 2</div>
    <div class="item">Elemento 3</div>
  </div>
  <style>
  .container {
    display: flex;
    justify-content: center;
    align-items: center;
    background: blue;
    height: 150px;
    gap: 20px;
  }
  .item {
    flex-basis: 200px;
    background: red;
  }
  /* factor de crecimiento 1 mide un poco más que el tercer elemento */
  .item:nth-child(1) { flex-grow: 1; }
  /* factor de crecimiento 2 mide un poco más que el segundo elemento */
  .item:nth-child(2) { flex-grow: 2; }
  /* el elemento 3 no tiene factor de crecimiento, su flex-grow será */
  /* o por defecto y medira exactamente 200px */
  </style>

#+end_src

****** flex-shrink
Esta propiedad actúa en situaciones donde:

- Hay un ~flex-basis~ definido.
- Los ítems *no* cubren el tamaño total del contenedor flex padre.

Es la propiedad opuesta a ~flex-grow~, indica un *factor de decrecimiento*.

#+begin_src css

  <div class="container">
    <div class="item">Elemento 1</div>
    <div class="item">Elemento 2</div>
    <div class="item">Elemento 3</div>
  </div>
  <style>
  .container {
    display: flex;
    justify-content: center;
    align-items: center;
    background: blue;
    height: 150px;
    gap: 20px;
  }
  .item {
    flex-basis: 600px;
    background: red;
  }
  .item:nth-child(1) { flex-shrink: 2; }
  .item:nth-child(2) { flex-shrink: 6; }
  </style>

#+end_src

****** flex shorthand
- Si en la propiedad ~flex~ indicamos *un sólo parámetro* podemos indicar la palabra clave ~none~, que es equivalente a ~0 0 auto~, podemos establecer un ~flex-grow~ si lo que escribimos es un ~number~ o en otro caso, podemos escribir un ~size~ y definir un ~flex-basis~.

- Si en la propiedad ~flex~ indicamos *dos parámetros* estaremos estableciendo un factor de crecimiento y luego, el factor de decrecimiento.

- Si en la propiedad ~flex~ indicamos *tres parámetros* estaremos estableciendo los dos factores de crecimiento, y además un tamaño base.

Por defecto, el valor por omisión de esta propiedad es ~0 1 auto~.

| /PROPIEDAD/      | /DESCRIPCIÓN/                                   |
|----------------+-----------------------------------------------|
| flex (1 parám) | establece tamaño base o factor de crecimiento |
| flex (2 parám) | establece factor crecimiento y decrecimiento  |
| flex (3 parám) | establece factor crecimiento y decrecimiento  |
|                | y tamaño base                                 |

#+begin_src css

  .item {
    /* flex: <flex-grow> <flex-shrink> <flex-basis> */
    flex: 1 3 35%;

    /* Equivalente a... */
    flex-grow: 1;
    flex-shrink: 3;
    flex-basis: 35%;
  }

#+end_src

**** Horizontal and vertical alignment
***** ~justify-content~ main axis
~justify-content~ controls where the flex items sit on the [[Flex brief][main axis]].

- The default value is ~flex-start~ (new notation ~start~ ), which makes all the items sit at the start of the main axis.
- You can use ~flex-end~ (new notation ~end~ ), to make them sit at the end.
- ~center~ will make the flex items sit in the center of the main axis.
- ~space-around~ distributes all the items evenly along the main axis with a bit of space left at either end.
- ~space-between~ is very similar to ~space-around~ except that it doesn't leave any space at either end.
- ~space-evenly~ like ~space-around~ but with an equal space at the beginning, at the end and all around them.

The ~justify-items~ property is ignored in flexbox layouts.

*Note*: to strech horizontal, make [[flex items][flex:1]] in the flex items.

#+begin_src artist

  +---------------------------------+
  | +-----++-----++-----+           |
  | |  1  ||  2  ||  3  |           |
  | +-----++-----++-----+           |
  |                                 |
  |                                 |
  +---------------------------------+

  +---------------------------------+
  |   +-----+   +-----+   +-----+   |
  |   |  1  |   |  2  |   |  3  |   |
  |   +-----+   +-----+   +-----+   |
  |                                 |
  |                                 |
  +---------------------------------+

#+end_src

#+begin_src css

  <div>
    <button>Smile</button>
    <button>Laugh</button>
    <button>Wink</button>
    <button>Shrug</button>
    <button>Blush</button>
  </div>
  <style>
  div {
    height: 100px;
    border: 1px solid black;
    display: flex;
    /* align-items: center; */
    justify-content: space-around;
  }
  /* You can override the align-items behavior for individual flex items by */
  /* applying the align-self property to them. */
  button:first-child {
    align-self: flex-end;
  }
  </style>

#+end_src

***** ~align-items~ cross axis
~align-items~ controls where the flex items sit on the [[Flex brief][cross axis]].

- By default, the value is ~stretch~, which stretches all flex items to fill the parent in the direction of the cross axis. If the parent doesn't have a fixed height in the cross axis direction, then all flex items will become as tall as the tallest flex item.
- The ~center~ value causes the items to maintain their [[The natural or intrinsic size of things][intrinsic dimensions]], but be centered along the cross axis.
- You can also have values like ~flex-start~ (new notation ~start~ ) and ~flex-end~ (new notation ~end~ ), which will align all items at the start and end of the cross axis respectively.
- ~baseline~ all flex items are aligned such that their flex container baselines align. The item with the largest distance between its cross-start margin edge and its baseline is flushed with the cross-start edge of the line.

#+begin_src artist

  +---------------------------------+
  | +-----+ +-----+ +-----+         |
  | |  1  | |  2  | |  3  |         |
  | +-----+ +-----+ +-----+         |
  |                                 |
  |                                 |
  +---------------------------------+

  +---------------------------------+
  |                                 |
  |+-----++-----++-----+            |
  ||  1  ||  2  ||  3  |            |
  |+-----++-----++-----+            |
  |                                 |
  +---------------------------------+

#+end_src

#+begin_src css

  <div>
    <button>Smile</button>
    <button>Laugh</button>
    <button>Wink</button>
    <button>Shrug</button>
    <button>Blush</button>
  </div>
  <style>
  div {
    height: 100px;
    border: 1px solid black;
    display: flex;
    align-items: center;
  }
  /* You can override the align-items behavior for individual flex items by */
  /* applying the align-self property to them. */
  button:first-child {
    align-self: flex-end;
  }
  </style>

#+end_src

***** ~align-content~ vertical (contenedores multilínea)
Se utiliza para alinear el contenido del eje [[Flex brief][cross axis]] entre cada una de las líneas, a diferencia de ~align-items~ que solo actua en una línea.

*Nota*: sólo en contenedor multilinea, no tiene efecto si no usamos [[flex-wrap]].

| /VALOR/         | /DESCRIPCIÓN/                                      |
|---------------+--------------------------------------------------|
| /start/         | agrupa al inicio del eje principal               |
| /end/           | agrupa al final del eje principal                |
| /center/        | agrupa al centro del eje principal               |
| /space-between/ | distribuye desde el inicio hasta el final        |
| /space-around/  | distribuye dejando el mismo espacio a los lados  |
| /stretch/       | estira para ocupar equitativamente todo el espac |

#+begin_src html

  <div>
    <button>Smile</button>
    <button>Laugh</button>
    <button>Wink</button>
    <button>Shrug</button>
    <button>Blush</button>
  </div>
  <style>
  div {
    background: blue;
    display: flex;
    width: 200px;
    height: 200px;

    flex-wrap: wrap;
    align-content: end;
  }
  button {
    background: red;
    width: 50%;
    height: 50px;
  }
  </style>

#+end_src

***** ~align-self~ (alineación específica)
~align-self~ actúa exactamente igual que ~align-items~ solo que sobre un ítem hijo específico y no sobre el elemento padre contenedor.

| /VALOR/    | /DESCRIPCIÓN/                                        |
|----------+----------------------------------------------------|
| /start/    | alinea al inicio del contenedor                    |
| /end/      | alinea al final del contenedor                     |
| /center/   | alinea al centro del contenedor                    |
| /stretch/  | alinea estirándolos al tamaño del contenedor       |
| /baseline/ | alinea en el contenedor según la base de los ítems |
| /auto/     | hereda el valor de align-items del padre           |
|          | (si no se ha definido, es stretch)                 |

#+begin_src css

  <div>
    <button>Smile</button>
    <button>Laugh</button>
    <button>Wink</button>
    <button>Shrug</button>
    <button>Blush</button>
  </div>
  <style>
  div {
    height: 100px;
    border: 1px solid black;
    display: flex;
    align-items: center;
  }
  /* You can override the align-items behavior for individual flex items by */
  /* applying the align-self property to them. */
  button:first-child {
    align-self: flex-end;
  }
  </style>

#+end_src

***** ~place-content~ shorthand
Shortahand de las propiedades ~align-content~ y ~justify-content~.

#+begin_src css

  .container {
    display: flex;

    /* 2 parámetros */
    place-content: start end;
    /* Equivalente a... */
    align-content: start;
    justify-content: end;

    /* 1 parámetro */
    place-content: start;
    /* Equivalente a... */
    align-content: start;
    justify-content: start;
  }

#+end_src

***** Example of vertical alignment
1 - setear alto de ~100vh~ a ~<html>~. Ocupará exactamente el tamaño de alto de pantalla.
2 - setear un alto de ~100%~ a ~<body>~. Tomará el alto del padre, o sea, de ~<html>~.
3 - asegurarse de tener reseteado el margen de ~<body>~ con ~margin: 0~.

#+begin_src css

  <div class="container">ManzDev, tu streamer de CSS de confianza</div>

  <style>
    html {
      background: hotpink;
      height: 100vh;
    }

    body {
      margin: 0;
      height: 100%;
      background: black;
      display: flex; /* or other layout mechanism */
      place-items: center;
    }

    .container {
      width: 300px;
      min-height: 250px;
      margin: auto;
      background: indigo;
      color: white;
      padding: 2rem;
    }
    </style>

#+end_src

**** Ordering flex items
Flexbox also has a feature for changing the layout order of flex items without affecting the source order. This is another thing that is impossible to do with traditional layout methods.

#+begin_src css

  <div>
    <button>1</button>
    <button>2</button>
    <button>3</button>
    <button>4</button>
    <button>5</button>
  </div>
  <style>
  div {
    display: flex;
  }
  button:first-child {
    order: 1;
  }
  </style>

#+end_src

- By default, all flex items have an ~order~ value of 0.
- Flex items with higher specified order values will appear later in the display order than items with lower order values.
- Flex items with the same order value will appear in their source order.

You can set negative order values to make items appear earlier than items whose value is 0.

**** Gaps
~row-gap~ y ~column-gap~ permiten establecer el tamaño de un «hueco» entre ítems desde el elemento padre contenedor, y que eliminan la necesidad de estar utilizando ~padding~ o ~margin~ en los elementos hijos.

| /PROPIEDAD/  | /DESCRIPCIÓN/                                           |
|------------+-------------------------------------------------------|
| /row-gap/    | espacio entre filas (sólo con flex-direction: column) |
| /column-gap/ | espacio entre columnas (sólo con flex-direction: row) |
| /gap/        | shorthand (value ambos ejes ¦ value ejeX size ejeY)   |

Como flex es un sistema para diseños de una sola dimensión, sólo una de las dos propiedades tendrá efecto. Si la propiedad [[flex-direction]] está establecida en ~column~, se podría usar ~row-gap~, y en el caso de que la propiedad ~flex-direction~ se encuentre en ~row~, se podría usar ~column-gap~.

Es posible usar ambas si tenemos la propiedad [[flex-wrap]] definida a ~wrap~ y, por lo tanto, disponemos de multicolumnas flexbox, ya que en este caso si podemos separar elementos por filas y por columnas.

#+begin_src css

  /* Shorthand gap */
  /* 2 parámetros: <row> <column> */
  gap: 4px 8px;
  /* Equivalente a */
  row-gap: 4px;
  column-gap: 8px;

  /* 1 parámetro: usa el mismo para ambos */
  gap: 4px;
  /* Equivalente a */
  row-gap: 4px;
  column-gap: 4px;

#+end_src

*** Grid
**** Grid brief
A grid is a *collection of horizontal and vertical lines creating a pattern* against which we can line up our design elements. They help us to create layouts in which our elements *won't jump around or change width as we move from page to page*, providing greater consistency on our websites.

A grid will typically have columns, rows, and then gaps between each row and column. The gaps are commonly referred to as gutters.

Lines can be addressed using their line number. In a left-to-right language such as English, column line 1 will be on the left of the grid, row line 1 on the top. Lines numbers respect the writing mode of the document and so in a right-to-left language for example (arabe), column line 1 will be on the right of the grid. The image below shows the line numbers of the grid, assuming the language is left-to-right.

CSS Grid Layout excels at dividing a page into major regions or defining the relationship in terms of size, position, and layer, between parts of a control built from HTML primitives.

Like tables, grid layout enables an author to align elements into columns and rows. However, many more layouts are either possible or easier with CSS grid than they were with tables.

#+begin_src artist

  COLUMN LINES                         ROW LINES
  +-------------------------------1--------------------------------+
  |                   |                       |                    |
  1                   2                       3                    4
  |       One         |          Two          |       Three        |
  |                   |                       |                    |
  |                   |                       |                    |
  |-------------------+-----------2-----------+--------------------|
  |                   |                       |                    |
  |                   |                       |                    |
  |      Four         |         Five          |        Six         |
  |                   |                       |                    |
  |                   |                       |                    |
  +-------------------------------3--------------------------------+

#+end_src

**** Defining a grid (~grid-template-columns/rows~)
***** Brief
To define a grid we use ~display: grid~ property. As with [[Flexbox]], this enables Grid Layout; all of the direct children of the container become grid items.

Declaring ~display: grid~ gives you a one column grid, so your items will continue to display one below the other as they do in normal flow. To see something that looks more grid-like, we'll need to add some columns to the grid with ~grid-template-columns~ property.

***** Fixed grid using values (columns not necessarily take up all space)

#+begin_src artist

  +-------------------------------+
  | +---------------------------+ |
  | |  1                        | |
  | +---------------------------+ |
  | +---------------------------+ |
  | |  2                        | |
  | +---------------------------+ |
  | +---------------------------+ |
  | |  3                        | |
  | +---------------------------+ |
  | +---------------------------+ |
  | |  4                        | |
  | +---------------------------+ |
  |                               |
  +-------------------------------+

  +-------------------------------+
  | +-------++-------++-------+   |
  | |   1   ||   2   ||   3   |   |
  | +-------++-------++-------+   |
  | +-------+                     |
  | |   4   |                     |
  | +-------+                     |
  +-------------------------------+

#+end_src

#+begin_src css

  <div class="container">
    <div>One</div>
    <div>Two</div>
    <div>Three</div>
    <div>Four</div>
    <div>Five</div>
    <div>Six</div>
    <div>Seven</div>
  </div>
  <style>
  body {
    width: 90%;
    max-width: 900px;
    margin: 2em auto;
  }
  .container > div {
    border-radius: 5px;
    padding: 10px;
    background-color: rgb(207,232,220);
    border: 2px solid rgb(79,185,227);
  }
  .container {
    display: grid;
    /*grid-template-columns: repeat(3, 200px) */ /* other notation */
    grid-template-columns: 200px 200px 200px;
    /* grid-template-columns: 33.3% 33.3% 33.3%; */
    /* can also define the row size */
    /* grid-template-rows: 150px 150px 150px; */
  }
  </style>

#+end_src

***** Flexible grid using fr unit (columns may take up all the space)
In addition to creating grids using lengths and percentages, we can use ~fr~. The ~fr~ unit represents *one fraction of the available* space in the grid container to flexibly size grid rows and columns.

You can mix ~fr~ units with fixed length units. In this case, the space needed for the fixed tracks is used up first before the remaining space is distributed to the other tracks.

*Note*: The ~fr~ unit distributes *available* space, not all space. Therefore, if one of your tracks has something large inside it, there will be less free space to share.

#+begin_src artist

  +-------------------------------+
  | +---------------------------+ |
  | |  1                        | |
  | +---------------------------+ |
  | +---------------------------+ |
  | |  2                        | |
  | +---------------------------+ |
  | +---------------------------+ |
  | |  3                        | |
  | +---------------------------+ |
  | +---------------------------+ |
  | |  4                        | |
  | +---------------------------+ |
  |                               |
  +-------------------------------+

  +-------------------------------+
  | +-----------++------++------+ |
  | |     1     ||  2   ||  3   | |
  | +-----------++------++------+ |
  | +-----------+                 |
  | |     4     |                 |
  | +-----------+                 |
  +-------------------------------+

#+end_src

#+begin_src css

  <div class="container">
    <div>One</div>
    <div>Two</div>
    <div>Three</div>
    <div>Four</div>
  </div>
  <style>
  body {
    width: 90%;
    max-width: 900px;
    margin: 2em auto;
  }
  .container > div {
    border-radius: 5px;
    padding: 10px;
    background-color: rgb(207,232,220);
    border: 2px solid rgb(79,185,227);
  }
  .container {
    display: grid;
    grid-template-columns: 2fr 1fr 1fr;
    /* can also define the row fr */
    /* grid-template-rows: 2fr 1fr; */
  }
  </style>

#+end_src

***** Shorthand (~grid-template~)
Shorthand for ~grid-template-columns~ and ~grid-template-rows~.

#+begin_src css

  /* Keyword value */
  grid-template: none;

  /* grid-template-rows / grid-template-columns values */
  grid-template: 100px 1fr / 50px 1fr;
  grid-template: auto 1fr / auto 1fr auto;
  grid-template: [linename] 100px / [columnname1] 30% [columnname2] 70%;
  grid-template: fit-content(100px) / fit-content(40%);

  /* grid-template-areas grid-template-rows / grid-template-column values */
  grid-template:
    "a a a"
    "b b b";
  grid-template:
    "a a a" 20%
    "b b b" auto;
  grid-template:
    [header-top] "a a a" [header-bottom]
    [main-top] "b b b" 1fr [main-bottom]
    / auto 1fr auto;

#+end_src

***** inline-grid
~display: inline-grid~ establece una cuadrícula con ítems *en línea*, de forma equivalente a [[inline-block]].

**** Propiedades de alineación
***** ~justify-items~ (items eje principal)
Coloca los ítems de un contenedor grid *a lo largo de sus celdas* correspondientes, siempre en el *eje principal* (por defecto, en horizontal).

~stretch~ hace que cada ítem se estire y ocupe todo el espacio disponible de su celda en el eje principal.

#+begin_src css

  /* Syntax */
  justify-items: start | end | center | strech

  /* Example */
  <div class="container">
    <div class="item">Item 1</div>
    <div class="item">Item 2</div>
    <div class="item">Item 3</div>
    <div class="item">Item 4</div>
    <div class="item">Item 5</div>
    <div class="item">Item 6</div>
  </div>
  <style>
  .container {
    display: grid;
    grid-template-columns: repeat(2, 250px);
    grid-template-rows: repeat(3, 50px);
    gap: 10px;
    background: grey;
    height: 300px;

    /* Value strech by default */
    justify-items: center;
    /* Value strech by default */
    align-items: center;
    /* Value start by default */
    justify-content: center;
    /* Value start by default */
    align-content: center;
  }
  .item {
    padding: 10px;
    background: red;
    border: 1px solid yellow;
    color: white;
  }
  </style>

#+end_src

***** ~align-items~ (items eje secundario)
Coloca los ítems de un contenedor grid *a lo largo de sus celdas* correspondientes, siempre en el *eje secundario* (por defecto, en vertical).

#+begin_src css

  /* Syntax */
  align-items: start | end | center | strech

#+end_src

***** ~justify-content~ (contenedor eje principal)
Permite modificar la distribución del contenido de la *cuadrícula en su contenedor padre*, a lo largo de su *eje principal* (por defecto, el horizontal).

- start :: coloca la cuadrícula en su conjunto al inicio del contenedor padre en su eje principal (horizontal).
- stretch :: estira la cuadrícula ocupando todo el espacio disponible del contenedor padre en su eje principal (horizontal).
- space-between :: establece espacios sólo entre las celdas, en su eje principal (horizontal).
- space-around :: establece espacios alrededor de las celdas, en su eje principal (horizontal).
- space-evenly :: iedem al anterior, pero solapando los espacios, de modo que sean todos de tamaño equivalente.

#+begin_src css

  /* Syntax */
  align-items: start | end | center | strech | space-between
               space-around | space-evenly

#+end_src

***** ~align-content~ (contenedor eje secundario)
Coloca el contenido de la *cuadrícula en su contenedor padre*, pero a lo largo de su *contenedor secundario* (por defecto, el vertical).

#+begin_src css

  /* Syntax */
  align-content: start | end | center | strech | space-between
                 space-around | space-evenly

#+end_src

***** ~justify/align-self~ (alineación específica)
Sobreescribe su distribución general, aplicando una específica.

- justify-self :: altera la alineación del ítem hijo en el eje horizontal y la sobreescribe con la indicada.
- align-self :: altera la alineación del ítem hijo en el eje vertical y la sobreescribe con la indicada.

Estas propiedades funcionan exactamente igual que sus análogas [[justify-items (items eje principal)][justify-items]] o [[align-items (items eje secundario)][align-items]] y tienen los mismos valores, sólo que en lugar de indicarse en el elemento padre contenedor, se hace sobre un elemento hijo y repercute en dicho elemento hijo específicamente.

***** ~place-items/content/self~ (shorthand)

- place-items :: ~[align-items] [justify-items]~
- place-content :: ~[align-content] [justify-content]~
- place-self :: ~[align-self] [justify-self]~

#+begin_src css

  .container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 1fr);

    place-items: center;
    /* Equivale a... */
    justify-items: center;
    align-items: center;

    place-content: center;
    /* Equivale a... */
    justify-content: center;
    align-content: center;
  }

  .item:first-child {
    place-self: end;
    /* Equivale a... */
    justify-self: end;
    align-self: end;
  }

#+end_src

***** order
Propiedad mediante la cual se puede modificar y establecer un orden de los elementos mediante números que actuarán como «peso» del elemento.

Funciona exactamente igual a como funciona la [[Ordering flex items][propiedad order]] en flex.

**** Gaps between tracks (~gap~)
To create gaps between tracks, we use the properties:

- ~column-gap~ for gaps between columns
- ~row-gap~ for gaps between rows
- ~gap~ as a shorthand for both (~gap: <row-gap> <column-gap>~)

*Note*: These gaps can be any length unit or percentage, but not an ~fr~ unit.

#+begin_src artist

  +-------------------------------+
  | +-----++-----++-----+         |
  | |  1  ||  2  ||  3  |         |
  | +-----++-----++-----+         |
  | +-----+                       |
  | |  4  |                       |
  | +-----+                       |
  +-------------------------------+

  +-------------------------------+
  | +-----+   +-----+   +-----+   |
  | |  1  |   |  2  |   |  3  |   |
  | +-----+   +-----+   +-----+   |
  | +-----+                       |
  | |  4  |                       |
  | +-----+                       |
  +-------------------------------+

#+end_src

#+begin_src css

  <div class="container">
    <div>One</div>
    <div>Two</div>
    <div>Three</div>
    <div>Four</div>
  </div>
  <style>
  .container > div {
    border-radius: 5px;
    padding: 10px;
    background-color: rgb(207,232,220);
    border: 2px solid rgb(79,185,227);
  }
  .container {
    display: grid;
    grid-template-columns: 2fr 1fr 1fr;
    gap: 20px;
  }
  /* Note: The gap properties (column-gap, row-gap and gap) used to be */
  /* prefixed by grid-. The spec has changed but the prefixed versions will */
  /* be maintained as an alias. To be on the safe side and make your code */
  /* more bulletproof, you can add both properties: */
  /* .container { */
  /*   display: grid; */
  /*   grid-template-columns: 2fr 1fr 1fr; */
  /*   grid-gap: 20px; */
  /*   gap: 20px; */
  /* } */
  </style>

#+end_src

**** Grid and absolutely positioned elements
***** Brief
Grid interacts with absolutely positioned elements, which can be useful if you want to position an item inside a grid or grid area. The specification defines the behavior when a grid container is a containing block and a parent of the absolutely positioned item.

***** A grid container as containing block
To make the grid container a containing block you need to add the position property to the container with a value of relative, just as you would make a containing block for any other absolutely positioned items. Once you have done this, if you give a grid item ~position: absolute~ it will take as its containing block the grid container or, if the item also has a grid position, the area of the grid it is placed into.

In the below example I have a wrapper containing four child items. Item three is absolutely positioned and also placed on the grid using line-based placement. The grid container has ~position: relative~ and so becomes the positioning context of this item.

#+begin_src css

  <div class="wrapper">
    <div class="box box1">One</div>
    <div class="box box2">Two</div>
    <div class="box3">
      This block is absolutely positioned. In this example the grid
      container is the containing block and so the absolute positioning
      offset values are calculated in from the outer edges of the area
      it has been placed into.
  </div>
  /* <div class="box box3">Three</div> */
  <div class="box box4">Four</div>
  </div>
  <style>
  .box {
    background: pink;
    border: 1px solid lightblue;
  }
  .wrapper {
    background: gray;
    border: 1px solid orange;
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-auto-rows: 100px;
    gap: 20px;
    position: relative;
  }
  .box3 {
    grid-column-start: 2;
    grid-column-end: 4;
    grid-row-start: 1;
    grid-row-end: 3;
    /* Uncoment to see the difference */
    /* position: absolute; */
    top: 40px;
    left: 40px;
    background: yellow;
  }
  </style>

#+end_src

***** A grid container as parent
If the absolutely positioned child has a grid container as a parent but that container does not create a new positioning context, then it is taken out of flow as in the previous example. The positioning context will be whatever element creates a positioning context as is common to other layout methods. In our case, if we remove ~position: relative~ from the wrapper above, positioning context is from the viewport.

Once again the item no longer participates in the grid layout in terms of sizing or when other items are auto-placed.

***** With a grid area as the parent
If the absolutely positioned item is nested inside a grid area then you can create a positioning context on that area. In the below example we have our grid as before but this time I have nested an item inside ~.box3~ of the grid.

I have given ~.box3~ position relative and then positioned the sub-item with the offset properties. In this case, the positioning context is the grid area.

#+begin_src css

  <div class="wrapper">
    <div class="box box1">One</div>
    <div class="box box2">Two</div>
    <div class="box box3">
      Three
      <div class="abspos">
        This block is absolutely positioned. In this example the grid
        area is the containing block and so the absolute positioning
        offset values are calculated in from the outer edges of the grid
        area.
      </div>
    </div>
  <div class="box box4">Four</div>
  </div>
  <style>
  .wrapper {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-auto-rows: 200px;
    gap: 20px;
    background: gray;
    border: 2px solid purple;
  }
  .box {
    background: orange;
    border: 2px solid blue;
  }
  .box3 {
    grid-column-start: 2;
    grid-column-end: 4;
    grid-row-start: 1;
    grid-row-end: 3;
    position: relative;
  }
  .abspos {
    position: absolute;
    top: 40px;
    left: 40px;
    background-color: rgb(255 255 255 / 50%);
    border: 1px solid rgb(0 0 0 / 50%);
    color: #000;
    padding: 10px;
  }
  </style>

#+end_src

**** Alinear items individualmente
Las siguientes propiedades se aplican a los ítems hijos de una cuadrícula, para alterar o cambiar el comportamiento específico de dicho elemento, que no se comportará como el resto.

| /PROPIEDAD/         | /DESCRIPCIÓN/                      |
|-------------------+----------------------------------|
| /grid-column-start/ | en que columna empezará el ítem  |
| /grid-column-end/   | en que columna terminará el ítem |
| /grid-row-start/    | en que fila empezará el ítem     |
| /grid-row-end/      | en que fila terminará el ítem    |
| /grid-column/       | shorthand /grid-column-start/end/  |
| /grid-row/          | shorthand /grid-row-start/end/     |

| /VALOR/         | /DESCRIPCIÓN/                                   |
|---------------+-----------------------------------------------|
| auto          | no se indica ningún comportamiento particular |
| línea         | indica la línea específica, es decir, la      |
|               | separación de columnas o filas                |
| span línea    | indica hasta cuántas líneas debe llegar       |
| nombre        | idem anterior, pero con líneas nombradas      |
|               |                                               |
| span nombre   | idem anterior, indicando nombre de            |
|               | línea hasta donde llegar                      |
| nombre número | idem anterior, pero busca el nombre que       |
|               | aparece por número vez                        |

Indicando un valor numérico haríamos referencia a la línea (linea que divide las celdas del grid), pero si indicamos la palabra clave ~span~ antes, haremos referencia a cuántas líneas deberemos alargar la celda.

#+begin_src css

  /* Estos dos ejemplos son equivalentes */
  /* se empieza en la línea 2 hasta la 4, por lo que */
  /* abarca dos celdas: 2-3 y 3-4 */
  .item-6 {
    grid-column-start: 2;
    grid-column-end: 4;
  }

  /* se empieza en la línea 2 y la celda se alargará 2  */
  /* celdas más: hasta la 3 y hasta la 4 */
  .item-6 {
    grid-column-start: 2;
    grid-column-end: span 2;
  }


  /* Ejemplo */
  <div class="container">
    <div class="item item-1">Item 1</div>
    <div class="item item-2">Item 2</div>
    <div class="item item-3">Item 3</div>
    <div class="item item-4">Item 4</div>
  </div>
  <style>
  .container {
    display: inline-grid;
    background: blue;
    border: 5px solid darkred;
  }
  .item {
    background: grey;
    color: white;
    padding: 1em;
    border: 5px solid yellow;
    min-width: 200px;
  }
  /* align itself column */
  .item-1 {
    background: purple;
    grid-column-start: 1;
    grid-column-end: 3;
  }
  /* align itself column and row */
  /* .item-1 { */
  /*   background: purple; */
  /*   grid-column-start: 1; */
  /*   grid-column-end: 3; */
  /*   grid-row-start: 3; */
  /* } */
  /* equivalent to above but using span notation */
  /* .item-1 { */
  /*   background: purple; */
  /*   grid-column-start: 1; */
  /*   grid-column-end: span 2; */
  /*   grid-row-start: 3; */
  /* } */
  </style>


  /* shorthand grid-column grid-row */
  .item-1 {
    /* Con propiedades individuales */
    grid-column-start: 2;
    grid-column-end: span 1;
    grid-row-start: 3;

    /* Equivalente a... */
    grid-column: 2 / span 1;
    grid-row: 3;
  }
  /* shorthand grid-column */
  .item-1 {
    /* Con propiedades individuales */
    grid-column-start: 2;
    grid-row-start: 3;

    /* Equivalente a... */
    grid-column: 2;
    grid-row: 3;
  }

#+end_src

**** The implicit and explicit grid (~grid-auto-rows/columns~)
***** Brief
The difference between explicit and the implicit grid:

- explicit grid :: created using ~grid-template-columns~ or ~grid-template-rows~.
- implicit grid :: extends the defined explicit grid when content is placed outside of that grid, such as into our rows by drawing additional grid lines.

By default, tracks created in the implicit grid are ~auto~ sized, which in general means that *they're large enough to accommodate their content*. If you wish to give implicit grid tracks a size, you can use the ~grid-auto-rows~ and ~grid-auto-columns~ properties. If you ~add grid-auto-rows~ with a value of ~100px~ to your CSS, you'll see that those created rows are now 100 pixels tall.

#+begin_src artist

  +-------------------------------+
  | +-------++-------++-------+   |
  | |   1   ||   2   ||   3   |   |
  | +-------++-------++-------+   |
  | +-------+                     |
  | |   4   |                     |
  | +-------+                     |
  +-------------------------------+

  +-------------------------------+
  | +-------++-------++-------+   |
  | |       ||       ||       |   |
  | |   1   ||   2   ||   3   |   |
  | |       ||       ||       |   |
  | +-------++-------++-------+   |
  | +-------+                     |
  | |       |                     |
  | |   4   |                     |
  | |       |                     |
  | +-------+                     |
  +-------------------------------+

#+end_src

#+begin_src css

  <div class="container">
    <div>One</div>
    <div>Two</div>
    <div>Three</div>
    <div>Four</div>
  </div>
  <style>
  .container > div {
    border-radius: 5px;
    padding: 10px;
    background-color: rgb(207,232,220);
    border: 2px solid rgb(79,185,227);
  }
  .container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);/*grid-template-columns: 1fr 1fr 1fr*/
    grid-auto-rows: 100px;
    gap: 20px;
  }
  </style>

#+end_src

***** ManzDev Colocación automática (~grid-auto-~)
****** Brief
Crea un layout donde no se quiere unas medidas concretas y específicas, sino que se repitan continuamente hasta que termine el layout, es decir, como *fluyen* los items.

****** grid-auto-flow
Permite indicar cuál es el *flujo del contenido de un Grid*, es decir, si queremos que los elementos *fluyen de manera horizontal* (~row~) o *de manera vertical* (~column~).

| /VALORES/      | /DESCRIPCIÓN/                                   |
|--------------+-----------------------------------------------|
| /row/          | elementos en filas, completando la fila       |
|              | antes de pasar a la siguiente                 |
| /column/       | elementos en columnas, completando la columna |
|              | antes de pasar a la siguiente                 |
| /row dense/    | Idem a row, pero rellenando huecos si hay     |
| /column dense/ | Idem a column, pero rellenando huecos si hay  |

#+begin_src css

  <div class="container">
    <div>1</div>
    <div>2</div>
    <div>3</div>
    <div>4</div>
    <div>5</div>
    <div>6</div>
    <div>7</div>
    <div>8</div>
    <div>9</div>
  </div>
  <p>
    La propiedad <code>grid-auto-flow</code>:
    <label>
      <select>
        <option selected>row</option>
        <option>column</option>
      </select>
    </label>
   </p>
   <style>
   .container {
    display: grid;
    grid-template-columns: repeat(3, 125px);
    grid-template-rows: repeat(3, 75px);
    /* «fluyen» en horizontal */
    grid-auto-flow: row;
    /* «fluyen» en vertical */
    /* grid-auto-flow: column;  */
    gap: 4px;
  }
  .container div {
    background: indigo;
    padding: 1rem;
    font-weight: 600;
    font-size: 1.5rem;
    color: white;
  }
  </style>
  <script>
  const container = document.querySelector(".container");
  const select = document.querySelector("select");

  select.addEventListener("input", () => {
      const selectedOption = select.querySelector("option:checked").value;
      container.style.gridAutoFlow = selectedOption;
    });
  </script>

#+end_src

****** grid-auto-rows
Permite indicar el tamaño de las filas que se han añadido de forma automática, ya sea porque no están definidas o porque son las celdas sobrantes fuera del ~grid-template-rows~ definido.

#+begin_src css

  <div class="container">
    <div>1</div>
    <div>2</div>
    <div>3</div>
    <div>4</div>
    <div>5</div>
    <div>6</div>
    <div>7</div>
    <div>8</div>
    <div>9</div>
  </div>
  <style>
  /* establecemos una repetición automática de 75px y 125px, por lo tanto, */
  /* el grid resultante tendrá dos columnas definidas, y sus filas irán */
  /* alternando entre 75px, 125px, 75px, 125px... hasta que se acaben los */
  /* elementos hijos */
  .container {
    display: grid;
    grid-template-columns: repeat(2, 125px);
    grid-auto-rows: 75px 125px;
    gap: 4px;
  }

  .container div {
    background: indigo;
    padding: 1rem;
    font-weight: 600;
    font-size: 1.5rem;
    color: white;
  }
  </style>

#+end_src

****** grid-auto-columns
Es exactamente la misma que [[grid-auto-rows]] pero respecto a las columnas.

#+begin_src css

  <div class="container">
    <div>1</div>
    <div>2</div>
    <div>3</div>
    <div>4</div>
    <div>5</div>
    <div>6</div>
    <div>7</div>
    <div>8</div>
    <div>9</div>
  </div>
  <style>
  .container {
    display: grid;
    grid-auto-columns: 75px 125px;
    grid-template-rows: repeat(2, 125px);
    /* indicar que los elementos se añaden en columna (vertical) */
    grid-auto-flow: column;
    gap: 4px;
  }

  .container div {
    background: indigo;
    padding: 1rem;
    font-weight: 600;
    font-size: 1.5rem;
    color: white;
  }
  </style>

#+end_src

****** dense
El valor ~dense~ es usado cuando tenemos un grid donde existen *huecos*. Esto puede ocurrir, por ejemplo, si movemos celdas concretas a otras posiciones.

#+begin_src css

  <div class="container">
    <div>1</div>
    <div>2</div>
    <div>3</div>
    <div>4</div>
    <div>5</div>
    <div>6</div>
    <div>7</div>
    <div>8</div>
    <div>9</div>
  </div>
  <p>
  La propiedad <code>grid-auto-flow</code>:
  <label>
   <select>
     <option selected>row</option>
     <option>column</option>
     <option>row dense</option>
     <option>column dense</option>
   </select>
   </label>
   </p>
   <style>
   .container {
    display: grid;
    grid-template-columns: repeat(3, 125px);
    grid-template-rows: repeat(3, 75px);
    grid-auto-flow: row;
    gap: 4px;
  }

  .container div {
    background: indigo;
    padding: 1rem;
    font-weight: 600;
    font-size: 1.5rem;
    color: white;
  }

  .container div:first-child {
    background: red;
    grid-column-start: 2;
  }

  .container div:nth-child(2) {
    background: green;
    grid-row-start: 2;
  }
  </style>
  <script>
  const container = document.querySelector(".container");
  const select = document.querySelector("select");

  select.addEventListener("input", () => {
      const selectedOption = select.querySelector("option:checked").value;
      container.style.gridAutoFlow = selectedOption;
    });
  </script>

#+end_src

**** Set a min and max size tall for a track (~minmax()~)
If we set 100-pixel tall tracks ~grid-auto-rows: 100px;~ won't be very useful if we add content into those tracks that is taller than 100 pixels, in which case it would cause an overflow. It might be better to have tracks that are at least 100 pixels tall and can still expand if more content becomes added.

The ~minmax()~ function lets us set a minimum and maximum size for a track, for example, ~minmax(100px, auto)~ .The minimum size is 100 pixels, but the maximum is ~auto~, which will expand to accommodate more content. Try changing ~grid-auto-rows~ to use a minmax value.

If you add extra content, you'll see that the track expands to allow it to fit. Note that the expansion happens right along the row.

#+begin_src css

  /* Syntax */
  minmax(min size, max size)

  /* Example */
  <div class="container">
    <div>One</div>
    <div>Two</div>
    <div>Three</div>
    <div>Four</div>
  </div>
  <style>
  .container > div {
    border-radius: 5px;
    padding: 10px;
    background-color: rgb(207,232,220);
    border: 2px solid rgb(79,185,227);
  }
  .container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: minmax(100px, auto);
    gap: 20px;
  }
  </style>


  /* ManzDev example */
  <div class="container">
    <div class="item item-1">Item 1</div>
    <div class="item item-2">Item 2</div>
    <div class="item item-3">Item 3</div>
    <div class="item item-4">Item 4</div>
  </div>
  <style>
  .container {
    display: grid;
    grid-template-columns: repeat(2, minmax(400px, 600px));
    grid-template-rows: repeat(2, 1fr);
    gap: 5px;
  }
  .item {
    background: black;
    color: white;
    padding: 1em;
  }
  </style>

#+end_src

**** As many columns as will fit (like Flex) (media queries) (~repeat()~)
Sometimes it's helpful to be able to ask grid to create as many columns as will fit into the container. We do this by setting the value of ~grid-template-columns~ using the ~repeat()~ function, but instead of passing in a number, pass in the keyword ~auto-fill~. For the second parameter of the function we use ~minmax()~ with a minimum value equal to the minimum track size that we would like to have and a maximum of ~1fr~.

This works because grid is creating as many 200-pixel columns as will fit into the container, then sharing whatever space is leftover among all the columns. The maximum is ~1fr~ which, as we already know, distributes space evenly between tracks.

*ManzDev*
~auto-fill~ indica al navegador que *rellene* el contenedor grid con múltiples elementos hijos dependiendo del tamaño del viewport (región visible del navegador). ~auto-fit~ *ajusta* el tamaño de los ítems para que cubran el tamaño máximo de la fila.

Si utilizamos ~repeat(auto-fill, minmax(300px, 1fr)~, el navegador se va a encargar de que los elementos hijos con el tamaño mínimo quepan en la primera fila, y los que no quepan, se desplacen a las siguientes filas del grid, consiguiendo un efecto similar al las [[Media Queries][media queries]].

~auto-fit~ behaves the same as ~auto-fill~, except that after placing the grid items any empty repeated tracks are collapsed. An empty track is one with no in-flow grid items placed into or spanning across it. (This can result in all tracks being collapsed, if they're all empty.)

#+begin_src css

  /* Syntax */
  repeat(number of times, size)

  /* Example */
  <div class="container">
    <div>One</div>
    <div>Two</div>
    <div>Three</div>
    <div>Four</div>
  </div>
  <style>
  .container > div {
    border-radius: 5px;
    padding: 10px;
    background-color: rgb(207,232,220);
    border: 2px solid rgb(79,185,227);
  }
  .container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    grid-auto-rows: minmax(100px, auto);
    gap: 20px;
  }
  </style>

  /* ManzDev example auto-fill */
  <div class="grid">
    <div class="item">Item</div>
    <div class="item">Item</div>
    <div class="item">Item</div>
    <div class="item">Item</div>
    <div class="item">Item</div>
    <div class="item">Item</div>
  </div>
  <style>
  .grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    background: grey;
    gap: 10px;
  }
  .item {
    background: blue;
    color: #fff;
    border: 1px solid yellow;
    font-size: 2rem;
  }
  </style>

  /* ManzDev example auto-fit */
  <div class="grid">
    <div class="item">Item</div>
    <div class="item">Item</div>
    <div class="item">Item</div>
    <div class="item">Item</div>
    <div class="item">Item</div>
    <div class="item">Item</div>
  </div>
  <style>
  .grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(50px, 1fr));
    background: grey;
    gap: 10px;
  }
  .item {
    background: blue;
    color: #fff;
    border: 1px solid yellow;
    font-size: 2rem;
  }
  </style>

#+end_src

**** Line-based placement (creating a grid with ~/~ ) (~grid-column~, ~grid-row~)
Creating a grid to placing things on the grid. Grid always has [[Grid brief][lines]] — these are numbered beginning with 1 and relate to the writing mode of the document.

We can arrange things in accordance with these lines by specifying the start and end line. We do this using the following properties: ~grid-column-start~ , ~grid-column-end~ , ~grid-row-start~ , ~grid-row-end~ .

These properties can all have a line number as their value. You can also use the shorthand properties: ~grid-column~ , ~grid-row~ .These let you specify the start and end lines at once, separated by a forward slash (~/~).

*Note*: You can also use the value -1 to target the end column or row line, then count inwards from the end using negative values. Note also that lines count always from the edges of the [[The implicit and explicit grid (grid-auto-rows/columns)][explicit grid]], not the implicit grid.

#+begin_src css

  <div class="container">
    <header>This is my lovely blog</header>
    <article>
      <h1>My article</h1>
      <p>
        Duis felis orci, pulvinar id metus ut, rutrum luctus orci. Cras
        porttitor imperdiet nunc, at ultricies tellus laoreet sit amet. Sed
        auctor cursus massa at porta. Integer ligula ipsum, tristique sit amet
        orci vel, viverra egestas ligula. Curabitur vehicula tellus neque, ac
        ornare ex malesuada et. In vitae convallis lacus. Aliquam erat
        volutpat. Suspendisse ac imperdiet turpis. Aenean finibus sollicitudin
        eros pharetra congue. Duis ornare egestas augue ut luctus. Proin
        blandit quam nec lacus varius commodo et a urna. Ut id ornare felis,
        eget fermentum sapien.
      </p>

      <p>
        Nam vulputate diam nec tempor bibendum. Donec luctus augue eget
        malesuada ultrices. Phasellus turpis est, posuere sit amet dapibus ut,
        facilisis sed est. Nam id risus quis ante semper consectetur eget
        aliquam lorem. Vivamus tristique elit dolor, sed pretium metus
        suscipit vel. Mauris ultricies lectus sed lobortis finibus. Vivamus eu
        urna eget velit cursus viverra quis vestibulum sem. Aliquam tincidunt
        eget purus in interdum. Cum sociis natoque penatibus et magnis dis
        parturient montes, nascetur ridiculus mus.
      </p>
    </article>
    <aside>
      <h2>Other things</h2>
      <p>
        Nam vulputate diam nec tempor bibendum. Donec luctus augue eget
        malesuada ultrices. Phasellus turpis est, posuere sit amet dapibus ut,
        facilisis sed est.
      </p>
    </aside>
    <footer>Contact me@mysite.com</footer>
  </div>
  <style>
  body {
      width: 90%;
      max-width: 900px;
      margin: 2em auto;
  }
  .container {
    display: grid;
    grid-template-columns: 1fr 3fr;
    gap: 20px;
  }
  header,footer {
    border-radius: 5px;
    padding: 10px;
    background-color: rgb(207, 232, 220);
    border: 2px solid rgb(79, 185, 227);
  }
  aside {
    border-right: 1px solid #999;
  }

  /* Line-based placement */
  header {
    grid-column: 1 / 3; /* 1 column to 3 column */
    grid-row: 1; /* at 1 row */ /* same as 1/2 (1 column to 2 column)*/
  }
  article {
    grid-column: 2;
    grid-row: 2;
  }
  aside {
    grid-column: 1;
    grid-row: 2;
  }
  footer {
    grid-column: 1 / 3;
    grid-row: 3;
  }
  </style>

#+end_src

**** Example of line-based placement ( ~/~ )

#+begin_src artist

  +-----------------------------------------------------------------+
  | +-----------------+----------------------+--------------------+ |
  | | 1               | 2                    |                    | |
  | |                 |                      |                    | |
  | |                 |                      |                    | |
  | |                 |                      |                    | |
  | +-----------------+----------------------+                    | |
  | +---------------+ |                                           | |
  | | 3             | |                                           | |
  | |               | |                                           | |
  | |               | |                                           | |
  | |               | +-------------------------------------------+ |
  | |               |                        +--------------------+ |
  | |               |                        | 4                  | |
  | |               |                        |                    | |
  | |               |                        |                    | |
  | |               |                        |                    | |
  | |               |                        |                    | |
  | |               |                        +--------------------+ |
  | |               | +-------------------+  +--------------------+ |
  | |               | | 5                 |  | 6                  | |
  | |               | |                   |  |                    | |
  | |               | |                   |  |                    | |
  | |               | |                   |  |                    | |
  | |               | |                   |  |                    | |
  | +---------------+ +-------------------+  +--------------------+ |
  +-----------------------------------------------------------------+

#+end_src

#+begin_src css

  <div class="wrapper">
    <div class="one">One</div>
    <div class="two">Two</div>
    <div class="three">Three</div>
    <div class="four">Four</div>
    <div class="five">Five</div>
    <div class="six">Six</div>
  </div>
  <style>
  .wrapper > div {
    border-radius: 5px;
    padding: 10px;
    border: 2px solid rgb(79, 185, 227);
  }
  .wrapper {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px;
    grid-auto-rows: minmax(100px, auto);
  }
  /* Line-based placement */
  .one {
    background-color: rgb(207, 232, 220);
    grid-column: 1 / 3; /* 1 column to 3 column */
    grid-row: 1; /* at 1 row*/ /* same as 1/2 (1 column to 2 column)*/
  }
  .two {
    grid-column: 2 / 4;
    grid-row: 1 / 3;
  }
  .three {
    grid-column: 1;
    grid-row: 2 / 5;
  }
  .four {
    grid-column: 3;
    grid-row: 3;
  }
  .five {
    grid-column: 2;
    grid-row: 4;
  }
  .six {
    grid-column: 3;
    grid-row: 4;
  }
  </style>

#+end_src

**** Positioning with ~grid-template-areas~
An alternative way to arrange items on your grid is to use the ~grid-template-areas~ property and give the various elements of your design a name.

The rules for ~grid-template-areas~ are as follows:
- You need to have every cell of the grid filled.
- To span across two cells, repeat the name.
- To leave a cell empty, use a ~.~ (period).
- Areas must be rectangular — for example, you can't have an L-shaped area.
- Areas can't be repeated in different locations.

Propiedades:
- grid-template-areas :: indica la disposición de las áreas en el grid. Cada texto entre comillas simboliza una fila.
- grid-area :: indica el nombre del área. Se usa sobre ítems hijos del grid.

~grid-area~   atajo para ~grid-column-start~ , ~grid-column-end~ , ~grid-row-start~ y ~grid-row-end~ o equivalentemente ~grid-row~ y ~grid-column~.

*Notas*:
- añadir contenido de texto en cada celda del grid, ya que si no existe contenido y no has definido un tamaño de fila/columna, el grid se adaptará a su contenido (que no lo hay) y parecerá que no existe
- se puede combinar con propiedades como ~grid-template-columns~ y/o ~grid-template-rows~ para añadirle tamaño o dimensiones
- ~grid-are: auto~ coloca la celda en la próxima área vacía que se encuentre disponible

#+begin_src css

  <div class="container">
    <header>This is my lovely blog</header>
    <article>
      <h1>My article</h1>
      <p>
        Duis felis orci, pulvinar id metus ut, rutrum luctus orci. Cras
        porttitor imperdiet nunc, at ultricies tellus laoreet sit amet. Sed
        auctor cursus massa at porta. Integer ligula ipsum, tristique sit amet
        orci vel, viverra egestas ligula. Curabitur vehicula tellus neque, ac
        ornare ex malesuada et. In vitae convallis lacus. Aliquam erat
        volutpat. Suspendisse ac imperdiet turpis. Aenean finibus sollicitudin
        eros pharetra congue. Duis ornare egestas augue ut luctus. Proin
        blandit quam nec lacus varius commodo et a urna. Ut id ornare felis,
        eget fermentum sapien.
      </p>

      <p>
        Nam vulputate diam nec tempor bibendum. Donec luctus augue eget
        malesuada ultrices. Phasellus turpis est, posuere sit amet dapibus ut,
        facilisis sed est. Nam id risus quis ante semper consectetur eget
        aliquam lorem. Vivamus tristique elit dolor, sed pretium metus
        suscipit vel. Mauris ultricies lectus sed lobortis finibus. Vivamus eu
        urna eget velit cursus viverra quis vestibulum sem. Aliquam tincidunt
        eget purus in interdum. Cum sociis natoque penatibus et magnis dis
        parturient montes, nascetur ridiculus mus.
      </p>
    </article>
    <aside>
      <h2>Other things</h2>
      <p>
        Nam vulputate diam nec tempor bibendum. Donec luctus augue eget
        malesuada ultrices. Phasellus turpis est, posuere sit amet dapibus ut,
        facilisis sed est.
      </p>
    </aside>
    <footer>Contact me@mysite.com</footer>
  </div>
  <style>
  body {
      width: 90%;
      max-width: 900px;
      margin: 2em auto;
  }
  .container {
    display: grid;
    grid-template-columns: 1fr 3fr;
    gap: 20px;
  }
  header, footer {
    border-radius: 5px;
    padding: 10px;
    background-color: rgb(207, 232, 220);
    border: 2px solid rgb(79, 185, 227);
  }
  aside {
    border-right: 1px solid #999;
  }

  /* grid-template-areas */
  .container {
    display: grid;
    grid-template-areas:
      "header header"
      "sidebar content"
      "footer footer";
    grid-template-columns: 1fr 3fr;
    gap: 20px;
  }
  header {
    grid-area: header; /* no es un string no va entre comillas */
  }
  article {
    grid-area: content;
  }
  aside {
    grid-area: sidebar;
  }
  footer {
    grid-area: footer;
  }
  </style>


  /* shorthand grid-area */
  .item-1 {
    /* 4 parámetros: <row-start> / <column-start> / <row-end> / <column-end> */
    grid-area: auto / 2 / span 4 / span 1;
  }

#+end_src

*ManzDev* Ejemplo de la creación de la carta de poker número 5:

#+begin_src css

  <div class="card" data-card="5" data-suit="*">
    <span class="item">*</span>
    <span class="item">*</span>
    <span class="item">*</span>
    <span class="item">*</span>
    <span class="item">*</span>
  </div>

  <style>
  .card {
    width: 100px;
    height: 150px;
    background: red;
  }

  [data-card="5"] {
    display: inline-grid;
    grid-template-areas:
      "i1 . i2"
      ". i3 ."
      "i4 . i5";
    justify-items: center;
    align-items: center;

    & .item:nth-child(1) {
      grid-area: i1;
    }
    & .item:nth-child(2) {
      grid-area: i2;
    }
    & .item:nth-child(3) {
      grid-area: i3;
    }
    & .item:nth-child(4) {
      grid-area: i4;
    }
    & .item:nth-child(5) {
      grid-area: i5;
    }
  }
  </style>

#+end_src

**** Líneas con nombre (~grid-template-~)
Las líneas en un grid, son aquellas divisiones o líneas separadoras de cada celda, que existen tanto en horizontal (columnas, eje principal) como en vertical (filas, eje secundario) en nuestra cuadrícula. Cuando hablamos de «linenames» (o nombres de línea) hacemos referencia a las líneas separadoras de nuestra cuadrícula grid a las cuales se les ha dado un nombre.

| /PROPIEDAD/             | /VALORES/                                  |
|-----------------------+------------------------------------------|
| /grid-template-columns/ | [line1] col1 [line2] col2...[lastline]   |
| /grid-template-rows/    | [line1] fila1 [line2] fila2...[lastline] |

*Nota*:
- las líneas se definen entre corchetes.
- las líneas con nombre son opcionales y no es necesario utilizarlas si no las necesitas, si no simplifica tu casuística o no es útil en tu caso particular.

#+begin_src css

  <div class="container">
    <div class="header">Header</div>
    <div class="sidebar">Sidebar</div>
    <div class="content">Content</div>
    <div class="footer">Footer</div>
  </div>
  <style>
  .container {
    display: grid;
    grid-template-columns: [col-start] 1fr [mid-start] 1fr [mid-end]
                           1fr [col-end];
    grid-template-rows: [row-start] 1fr [row-mid-start]
                        1fr [row-mid-end] 1fr [row-end];
    min-height: 300px;
    background: blue;
    color: white;
    border: 5px solid black;
  }
  /* equivalent to  */
  /* .container { */
  /*   display: grid; */
  /*   grid-template-columns: repeat(3, 1fr); */
  /*   grid-template-rows: repeat(3, 1fr); */
  /*   min-height: 300px; */
  /*   color: white; */
  /*   background: blue; */
  /*   border: 5px solid black; */
  /* } */


  /* Ocupa toda la fila inicial, rueda el resto a las siguientes */
  .header {
    background: indigo;
    grid-column-start: col-start;
    grid-column-end: col-end;
  }
  /* Realmente no hace falta, porque ya está colocada en este lugar */
  .sidebar {
    background: black;
    grid-row-start: row-mid-start;
    grid-row-end: row-mid-end;
  }
  /* Ocupa las dos celdas de la derecha de la fila central */
  .content {
    background: orangered;
    grid-column-start: mid-start;
    grid-column-end: col-end;
    grid-row-start: row-mid-start;
    grid-row-end: row-mid-end;
  }
  /* Ocupa toda la fila final */
  .footer {
    background: royalblue;
    grid-column-start: col-start;
    grid-column-end: col-end;
    grid-row-start: row-mid-end;
    grid-row-end: row-end;
  }

  /* equivalent to (using shorthand) */
  /* .header { */
  /*   background: indigo; */
  /*   grid-column: col-start / col-end; */
  /* } */
  /* .sidebar { */
  /*   background: black; */
  /*   grid-row: row-mid-start / row-mid-end;  /\* Redundante *\/ */
  /* } */
  /* .content { */
  /*   background: orangered; */
  /*   grid-column: mid-start / col-end; */
  /*   grid-row: row-mid-start / row-mid-end;  /\* Redundante *\/ */
  /* } */
  /* .footer { */
  /*   background: royalblue; */
  /*   grid-column: col-start / col-end; */
  /*   grid-row: row-mid-end / row-end;  /\* Redundante *\/ */
  /* } */

  /* equivalent to (using more shorthand) */
  /* .header { */
  /*   background: indigo; */
  /*   grid-column: col; */
  /* } */
  /* .sidebar { */
  /*   background: black; */
  /*   grid-row: row-mid;  /\* Redundante *\/ */
  /* } */
  /* .content { */
  /*   background: orangered; */
  /*   grid-column: mid-start / col-end; */
  /*   grid-row: row-mid; /\* Redundante *\/ */
  /* } */
  /* .footer { */
  /*   background: royalblue; */
  /*   grid-column: col; */
  /*   grid-row: row-mid-end / row-end; */
  /* } */

  /* equivalent (using grid area) */
  /* .header { */
  /*   background: indigo; */
  /*   grid-column: col; */
  /* } */
  /* .sidebar { */
  /*   background: black; */
  /* } */
  /* .content { */
  /*   background: orangered; */
  /*   grid-area: auto / mid-start / auto / col-end; */
  /* } */
  /* .footer { */
  /*   background: royalblue; */
  /*   grid-area: auto / col; */
  /* } */
  </style>


#+end_src

**** Example of vertical alignment
1 - setear alto de ~100vh~ a ~<html>~. Ocupará exactamente el tamaño de alto de pantalla.
2 - setear un alto de ~100%~ a ~<body>~. Tomará el alto del padre, o sea, de ~<html>~.
3 - asegurarse de tener reseteado el margen de ~<body>~ con ~margin: 0~.

#+begin_src css

  <div class="container">ManzDev, tu streamer de CSS de confianza</div>

  <style>
    html {
      background: hotpink;
      height: 100vh;
    }

    body {
      margin: 0;
      height: 100%;
      background: black;
      display: grid; /* or other layout mechanism */
      place-items: center;
    }

    .container {
      width: 300px;
      min-height: 250px;
      margin: auto;
      background: indigo;
      color: white;
      padding: 2rem;
    }
    </style>

#+end_src

*** Floats
**** float
The ~float~ property was introduced to allow web developers to implement layouts involving an *image floating inside a column of text*, with the text *wrapping around the left or right* of it. The kind of thing you might get in a newspaper layout. But web developers quickly realized that *you can float anything, not just images*, so the use of float broadened.

The float property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to [[absolute]] positioning).

Absolutely positioned or [[fixed]] items cannot be floated (ellos estarían por arriba o abajo del elemento, no como float donde el elemento lo rodearía por la izquierda o derecha). Other elements normally flow around floated items, unless they are prevented from doing so by their ~clear~ property.

Floating an element changes the behavior of that element and the block level elements that follow it in normal flow. The floated element is moved to the left or right and removed from normal flow, and the surrounding content floats around it.

*Note*: The ~float~ and ~clear~ properties cease to affect the layout if floated or cleared items become [[Flexbox][flex]] or [[Grid][grid]] items.

*Note*: While we can add a margin to the float to push the text away, we can't add a margin to the text to move it away from the float. This is because a floated element is taken out of normal flow and the boxes of the following items actually run behind the float. To see this you can add a class ~special~ to the first paragraph of [[A float example][example]] text.

#+begin_src css

  .special { background-color: rgb(79, 185, 227); padding: 10px;color: #fff; }

#+end_src

**** Float values
The ~float~ property has four possible values:

- ~left~ —  floats to the left of the line that it would have appeared in; other items may flow around its right side.
- ~right~ — floats to the right of the line that it would have appeared in; other items may flow around its left side.
- ~none~ — Specifies no floating at all. This is the default value.
- ~inherit~ — Specifies that the value of the float property should be inherited from the element's parent element.
- ~clear~ — forces the element to appear underneath ('clear') floated elements to the left (~clear:left~), right (~clear:right~) or both sides (~clear:both~).

**** A float example
We float a ~<div>~ left and give it a ~margin~ on the right to push the surrounding text away from it. This gives us the effect of text wrapped around the boxed element.

#+begin_src css

    <style>
    body {
      width: 90%;
      max-width: 900px;
      margin: 0 auto;
      font:
        0.9em/1.2 Arial,
        Helvetica,
        sans-serif;
    }

    .box {
      float: left;
      margin-right: 15px;
      width: 150px;
      height: 100px;
      border-radius: 5px;
      background-color: rgb(207 232 220);
      padding: 1em;
    }

    /* While we can add a margin to the float to push the text away, we */
    /* can't add a margin to the text to move it away from the float. */
    /* This is because a floated element is taken out of normal flow and */
    /* the boxes of the following items actually run behind the float. */
    /* To see this uncomment next line */
    /* .special { */
    /*   background-color: rgb(79, 185, 227); */
    /*   padding: 10px; */
    /*   color: #fff; */
    /* } */
    </style>

    <h1>Float example</h1>

  <div class="box">Float</div>

  <p class="special">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla
    luctus aliquam dolor, eu lacinia lorem placerat vulputate. Duis
    felis orci, pulvinar id metus ut, rutrum luctus orci. Cras porttitor
    imperdiet nunc, at ultricies tellus laoreet sit amet.
  </p>

  <p>
    Sed auctor cursus massa at porta. Integer ligula ipsum, tristique
    sit amet orci vel, viverra egestas ligula. Curabitur vehicula tellus
    neque, ac ornare ex malesuada et. In vitae convallis lacus. Aliquam
    erat volutpat. Suspendisse ac imperdiet turpis. Aenean finibus
    sollicitudin eros pharetra congue. Duis ornare egestas augue ut
    luctus. Proin blandit quam nec lacus varius commodo et a urna. Ut id
    ornare felis, eget fermentum sapien.
  </p>

  <p>
    Nam vulputate diam nec tempor bibendum. Donec luctus augue eget
    malesuada ultrices. Phasellus turpis est, posuere sit amet dapibus
    ut, facilisis sed est. Nam id risus quis ante semper consectetur
    eget aliquam lorem. Vivamus tristique elit dolor, sed pretium metus
    suscipit vel. Mauris ultricies lectus sed lobortis finibus. Vivamus
    eu urna eget velit cursus viverra quis vestibulum sem. Aliquam
    tincidunt eget purus in interdum. Cum sociis natoque penatibus et
    magnis dis parturient montes, nascetur ridiculus mus.
  </p>

#+end_src

**** float (ManzDev)
Con la propiedad float podemos conseguir que un elemento «flote» a la izquierda o a la derecha de otro elemento.

- float:  none | left | right :: cambia el flujo para que el elemento flote a la izquierda o derecha.
- clear:  none | left | right | both :: impide que los elementos puedan flotar en la orientación indicada.

De esta forma, utilizando la propiedad float podemos cambiar donde aparecía un elemento, y mediante la propiedad clear podíamos resetearlo.

#+begin_src css

  /* Con esto conseguimos que los ítems de la lista floten uno a */
  /* continuación de otro. No obstante, hoy en día para conseguir este */
  /* comportamiento siempre recomiendo utilizar la propiedad display en */
  /* lugar de float. De esta forma se suele conseguir una solución y código */
  /* más limpio y organizado. */
  <ul>
    <li>Primer elemento</li>
    <li>Segundo elemento</li>
    <li class="fix">Tercer elemento</li>
    <li>Cuarto elemento</li>
    <li>Quinto elemento</li>
  </ul>
  <style>
  ul {
    background: grey;
    padding: 0;
  }
  li {
    list-style-type: none;
    background: blue;
    width: 100px;
    padding: 8px;
    margin: 8px;
    color: white;
  }
  ul, li {
    float: left;
  }

  /* Limpiar flujo flotante */
  /* La propiedad clear se encarga de impedir elementos flotantes en la */
  /* zona indicada, a la izquierda del elemento (left), a la derecha */
  /* (right) o en ambos lados (both). */
  /* Si queremos que el parrafo tercero aparezca en la parte inferior */
  /* .fix { */
  /*   background: orangered; */
  /*   clear: both; */
  /* } */
  </style>

#+end_src

*** Multi-column layout
The Multi-column layout properties can cause the content of a block to layout in columns, as you might see in a newspaper.

With multicol, you specify a ~column-count~ to indicate the maximum number of columns you want your content to be split into. The browser then works out the size of these, a size that will change according to the screen size.

#+begin_src css

    <style>
    .container {
      column-count: 3;
    }
    </style>

  <div class="container">
    <p>Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi
    welsh onion daikon amaranth tatsoi tomatillo melon azuki bean
    garlic.</p>

    <p>Gumbo beet greens corn soko endive gumbo gourd. Parsley shallot
    courgette tatsoi pea sprouts fava bean collard greens dandelion okra
    wakame tomato. Dandelion cucumber earthnut pea peanut soko
    zucchini.</p>

    <p>Turnip greens yarrow ricebean rutabaga endive cauliflower sea
    lettuce kohlrabi amaranth water spinach avocado daikon napa cabbage
    asparagus winter purslane kale. Celery potato scallion desert raisin
    horseradish spinach carrot soko. .</p>
  </div>

#+end_src

If you instead specify a ~column-width~ , you are specifying a minimum width. The browser will create as many columns of that width as will comfortably fit into the container, then share out the remaining space between all the columns. Therefore the number of columns will change according to how much space there is.

You can use the ~columns~ shorthand to provide a maximum number of columns and a minimum column width.

#+begin_src css

    <style>
    .container {
      column-width: 10em;
    }
    </style>

  <div class="container">
    <p>Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi
    welsh onion daikon amaranth tatsoi tomatillo melon azuki bean
    garlic.</p>

    <p>Gumbo beet greens corn soko endive gumbo gourd. Parsley shallot
    courgette tatsoi pea sprouts fava bean collard greens dandelion okra
    wakame tomato. Dandelion cucumber earthnut pea peanut soko
    zucchini.</p>

    <p>Turnip greens yarrow ricebean rutabaga endive cauliflower sea
    lettuce kohlrabi amaranth water spinach avocado daikon napa cabbage
    asparagus winter purslane kale. Celery potato scallion desert raisin
    horseradish spinach carrot soko. .</p>
  </div>

#+end_src

*** Fallback methods
**** Brief
CSS specifications contain information that explains what the browser does when *two layout methods are applied to the same item*. This means that there is a definition for what happens if a floated item, for example, is also a Grid Item using CSS Grid Layout.

**** Float and clear
The [[float]] and clear properties cease to affect the layout if floated or cleared items become flex or grid items.

**** display: inline-block
If an item has ~display: inline-block~ set but then becomes a flex or grid item, the inline-block behavior is ignored.

**** display: table
If an item has ~display: table~, ~display: table-cell~, etc., set but then becomes a flex or grid item, the display value is ignored.

**** Multiple-column Layout
For certain layouts you could use multi-col as a fallback, if your container has any of the ~column-*~ properties defined on it and then becomes a grid container, the multicol behavior will not happen.

**** Flexbox as a Fallback for Grid
Flexbox has greater browser support than Grid due to being supported by IE10 and 11. If you make a flex container into a grid container, any ~flex~ property applied to the children will be ignored.

**** Feature queries
If we add a feature query to the example below, we can use it to set the widths of our items back to ~auto~ if we know that we have grid support.

Support for feature queries is very good across modern browsers. However, you should note that browsers that do not support CSS Grid also tend not to support feature queries. This means that an approach as detailed below will work for those browsers. What we are doing is writing our old CSS first, outside of any feature query. Browsers that do not support Grid, and do not support the feature query will use that layout information they can understand and completely ignore everything else. The browsers that support the feature query also support CSS Grid and so will run the grid code and the code inside the feature query.

#+begin_src css

  <style>
  * {
    box-sizing: border-box;
  }

  .wrapper {
    background-color: rgb(79, 185, 227);
    padding: 10px;
    max-width: 400px;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
  }

  .item {
    float: left;
    border-radius: 5px;
    background-color: rgb(207, 232, 220);
    padding: 1em;
    width: 33.333%;
  }

  @supports (display: grid) {
    .item {
      width: auto;
    }
  }
  </style>

  <div class="wrapper">
    <div class="item">Item One</div>
    <div class="item">Item Two</div>
    <div class="item">Item Three</div>
  </div>

#+end_src

*** Centrar elemento
**** Resetear los estilos por defecto

#+begin_src css

  <div class="container">ManzDev, tu streamer de CSS de confianza</div>
  <style>
  body {
    margin: 0; /* resetea los margenes por defecto */
    background: black;
  }
  .container {
    background: indigo;
    color: white;
    padding: 2rem;
  }
  </style>

#+end_src

**** Centrar horizontalmente (~margin~)
Para centrar horizontalmente un elemento sin Flex ni Grid, necesitamos cumplir algunas condiciones:

1. El elemento debe tener un ~display: block~ (no sirve ~inline~, ~inline-block~ o derivados)
2. El elemento debe tener un tamaño de ancho.

Luego usaremos la propiedad ~margin~. Al aplicar un ~margin: auto~ lo que hacemos es decirle que ese espacio restante lo divida en dos: el primero lo colocará a la izquierda, y el segundo lo colocará a la derecha, y como efecto «colateral» el elemento se centrará en pantalla.

*Nota*: al aplicar un ~margin-left: auto~, el ~margin-right~ permanece en ~0~ y viceversa. También podemos hacer híbridos como por ejemplo ~margin: 2rem auto~, que establece un margen de ~2rem~ arriba y abajo (verticalmente), mientras que utiliza ~auto~ a la izquierda y a la derecha (horizontalmente).

#+begin_src css

  <div class="container">ManzDev, tu streamer de CSS de confianza</div>
  <style>
  body {
    margin: 0;
    background: black;
  }
  .container {
    width: 300px;
    min-height: 250px; /* opcional */
    margin: auto;
    background: indigo;
    color: white;
    padding: 2rem;
  }
  </style>

#+end_src

**** Centrar verticalmente
Un documento HTML siempre tiene una etiqueta ~<html>~ que contiene una etiqueta ~<body>~, y aunque sólo se le suele dar estilo al ~<body>~, también se le podría dar al ~<html>~.

Si se intenta centrar un elemento  verticalmente, ya se tendrá centrado, porque ~<body>~, su padre inmediato, no tiene más espacio de alto como para poder centrarlo. Lo que suele ocurrir es que siempre se tiene el mismo color en el ~<body>~ y en el ~<html>~, por lo que no solemos darnos cuenta de este detalle.

Una sencilla forma de solucionarlo, es seguir estos 3 sencillos pasos:

1. Le damos un alto de ~100vh~ a ~<html>~. Ocupará exactamente el tamaño de alto de pantalla.
2. Le damos un alto de ~100%~ a ~<body>~. Tomará el alto del padre, o sea, de ~<html>~.
3. Asegurate de tener reseteado el margen de ~<body>~ con ~margin: 0~.

#+begin_src css

  <div class="container">ManzDev, tu streamer de CSS de confianza</div>
  <style>
  html {
    background: hotpink;
    height: 100vh;
  }
  body {
    margin: 0;
    height: 100%;
    background: black;
    display: flex; /* or other layout mechanism */
    place-items: center;
  }
  .container {
    width: 300px;
    min-height: 250px;
    margin: auto;
    background: indigo;
    color: white;
    padding: 2rem;
  }
  </style>

#+end_src

**** La propiedad ~align-content~ en block
La propiedad ~align-content~ recientemente ha añadido la posibilidad de ser utilizada en elementos con ~display: block~, esto permite el centrado verticalmente de un elemento con tan solo una línea de CSS.

| /Valor/  | /Descripción/                                            |
|--------+--------------------------------------------------------|
| start  | Alinea el ele al inicio respecto a su contenedor padre |
| center | Centra el ele respecto a su contenedor padre           |
| end    | Alinea el ele al final respecto a su contenedor padre  |

**** Centrar contenido (~text-align~)

- ~text-align: center~ para centrar el contenido horizontalmente
- ~align-content: center~ para centrar verticalmente

*Note*: Center aligning has no effect if the ~width~ property is not set (or set to 100%).

#+begin_src css

  <div class="container">ManzDev, tu streamer de CSS de confianza</div>
  <style>
  html {
    height: 100vh;
  }

  body {
    margin: 0;
    height: 100%;
    background: red;
    align-content: center;
    display: flex; /* or other layout mechanism */
    place-items: center;
  }

  .container {
    width: 300px;
    min-height: 250px;
    margin: auto;
    background: indigo;
    color: white;
    padding: 2rem;
    text-align: center;
    align-content: center;
  }
  </style>

#+end_src

** Size
*** The natural or intrinsic size of things
If you place an image on a page and do not change its height or width, either by using attributes on the [[img][<img>]] tag or else by CSS, it will be displayed using that *intrinsic size* (el *tamaño que tiene la imagen por defecto*).

An empty [[div][<div>]], on the other hand, has no size of its own. If you add a ~<div>~ to your HTML with no content, then give it a border, you will see a line on the page. This is the collapsed border on the element — there is no content to hold it open. If you adding some text inside the empty element. The border now contains that text because the height of the element is defined by the content. Therefore the size of this ~<div>~ in the block dimension comes from the size of the content. Again, this is the *intrinsic size* of the element — *its size is defined by its content*.

*** Setting a specific size or extrinsic size
**** Extrinsic size
When a size is *given* to an element (the content of which then needs to fit into that size) we refer to it as an *extrinsic size*.

*Note*: A set height can cause content to overflow if there is more content than the element has space to fit inside it.

**** Using percentages
When using a percentage you need to be aware what it is a percentage of. In the case of a box inside another container, if you give the child box a percentage width it will be a percentage of the width of the parent container.

The percentages resolve against the size of the containing block. With no percentage applied, our ~<div>~ would take up 100% of the available space, as it is a block level element. If we give it a percentage width, this becomes a percentage of the space it would normally fill.

**** Percentage margins and padding
When you use margin and padding set in percentages, the value is calculated from the [[inline-size]] of the containing block — therefore the *width* when working in a horizontal language.

*** min- and max- sizes
If you have a box that might contain a variable amount of content, and you always want it to be at least a certain height, you could set the ~min-height~ property on it. The box will always be at least this height, but will then grow taller if there is more content than the box has space for at its minimum height.

This is very useful for dealing with variable amounts of content while avoiding overflow. A common use of ~max-width~ is to cause images to scale down if there is not enough space to display them at their [[The natural or intrinsic size of things][intrinsic]] width while making sure they don't become larger than that width.

*** Viewport units
The viewport — which is the visible area of your page in the browser you are using to view a site — also has a size. In CSS we have units which relate to the size of the viewport — the ~vw~ unit for viewport width, and ~vh~ for viewport height. Using these units you can size something relative to the viewport of the user.

~1vh~ is equal to ~1%~ of the viewport height, and ~1vw~ is equal to ~1%~ of the viewport width. You can use these units to size boxes, but also text.

Sizing things according to the viewport can be useful in your designs. For example, if you want a full-page hero section to show before the rest of your content, making that part of your page ~100vh~ high will push the rest of the content below the viewport, meaning that it will only appear once the document is scrolled.

*** Values and units
**** Lengths
There are two types of lengths used in CSS — relative and absolute. The numeric type you will come across most frequently is ~<length>~. For example, ~10px~ (pixels) or ~30em~.

**** Absolute length units
They are not relative to anything else, and are generally considered to always be the same size. For example, ~10px~ (pixels) ~30cm~ and so on.

**** Relative length units
Relative length units are relative to something else, perhaps the size of the parent element's font, or the size of the viewport. The benefit of using relative units is that with some careful planning you can make it so the size of text or other elements scales relative to everything else on the page. For example, ~30em~ or ~10vw~ and so on.

**** ems and rems
The *em* unit means "my *parent element's font-size*" in the case of typography. The [[li][<li>]] elements inside the [[ul][<ul>]] with a ~class~ of ~ems~ take their sizing from their parent. So each successive level of nesting gets progressively larger, as each has its font size set to ~1.3em~ — 1.3 times its parent's font size.

The *rem* unit means "The *root element's font-size*" (rem stands for "root em"). The ~<li>~ elements inside the ~<ul>~ with a ~class~ of ~rems~ take their sizing from the root element ([[html][<html>]]). This means that each successive level of nesting does not keep getting larger.

#+begin_src css

  html { font-size: 16px; }
  .ems li { font-size: 1.3em; }
  .rems li { font-size: 1.3rem; }

#+end_src

#+begin_src html

  <ul class="ems">
    <li>One</li>
    <li>Two</li>
    <li>Three
      <ul>
        <li>Three A</li>
        <li>Three B
          <ul>
            <li>Three B 2</li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>

  <ul class="rems">
    <li>One</li>
    <li>Two</li>
    <li>Three
      <ul>
        <li>Three A</li>
        <li>Three B
          <ul>
            <li>Three B 2</li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>

#+end_src

** Styling text
*** Web fonts
**** Web fonts brief
CSS allows you to specify font files, available on the web, to be downloaded along with your website as it's accessed.

Here are some important things to bear in mind about web fonts:
- All major browsers support WOFF/WOFF2 (Web Open Font Format versions 1 and 2). Even older browsers such as IE9 (released in 2011) support the WOFF format.
- WOFF2 supports the entirety of the TrueType and OpenType specifications, including variable fonts, chromatic fonts, and font collections.
- If you need to work with legacy browsers, you should provide EOT (Embedded Open Type), TTF (TrueType Font), and SVG web fonts for download.

*Note*: WOFF is basically TTF with metadata and compression. TrueType fonts (format for scalable computer fonts) provide highest quality display on computer screens and printers without any dependency on resolution whereas WOFF is an open format used for delivering webpage fonts on the fly. It is saved as a compressed container and supports TrueType (. TTF) and OpenType (. OTF) fonts and also supports font licensing information.

First of all, you have a ~@font-face~ ruleset at the start of the CSS, which specifies the font file(s) to download:

#+begin_src css

  @font-face {
    font-family: "myFont";
    src: url("myFont.woff2");
  }

  /* Below this you use the font family name specified inside @font-face to */
  /* apply your custom font to anything you like, as normal: */
  html {
    font-family: "myFont", "Bitstream Vera Serif", serif;
  }

#+end_src

**** Finding fonts and generating required code
***** Finding fonts
Let's find some fonts! Go to [[https://www.fontsquirrel.com/][Font Squirrel]] and choose two fonts: a nice interesting font for the headings, and a slightly less flashy and more readable font for the paragraphs. When you've found a font, press the download button and save the file inside the same directory as the HTML and CSS files you saved earlier. It doesn't matter whether they are TTF (True Type Fonts) or OTF (Open Type Fonts).

Now you'll need to generate the required code (and font formats).

- Go to the Fontsquirrel [[https://www.fontsquirrel.com/tools/webfont-generator][Webfont Generator]] .
- Upload your two font files using the Upload Fonts button.
- Check the checkbox labeled =Yes, the fonts I'm uploading are legally eligible for web embedding.=
- Click Download your kit.

After the generator has finished processing, you should get a ZIP file to download. Save it in the same directory as your HTML and CSS.

If you need to support legacy browsers, select the "Expert" mode in the Fontsquirrel Webfont Generator, select SVG, EOT, and TTF formats before downloading your kit.

Web services for font generation typically limit file sizes. In such a case, consider using tools such as: =sfnt2woff-zopfli= for converting ttf to woff, =fontforge= for converting from ttf to svg, =batik= ttf2svf for converting from ttf to svg, =woff2= for converting from ttf to woff2.

***** Implementing the code in page
At this point, unzip the webfont kit you just generated. Inside the unzipped directory you'll see some useful items:

- Two versions of each font: the ~.woff~, ~.woff2~ files.
- A demo HTML file for each font — load these in your browser to see what the font will look like in different usage contexts.
- A ~stylesheet.css~ file, which contains the generated ~@font-face~ code you'll need.

To implement these fonts in your demo, follow these steps:
- Open up the ~stylesheet.css~ file and copy the two ~@font-face~ rulesets into your ~web-font-start.css~ file — you need to put them at the very top, before any of your CSS, as the fonts need to be imported before you can use them on your site.
- Each of the ~url()~ functions points to a font file that we want to import into our CSS. We need to make sure the paths to the files are correct, so add ~fonts/~ to the start of each path (adjust as necessary).
- Now you can use these fonts in your font stacks, just like any web safe or default system font. For example:

#+begin_src css

  /* font imports, generated by fontsquirrel.com */
  @font-face {
    font-family: 'ciclefina';
    src: url('fonts/cicle_fina-webfont.woff2') format('woff2'),
         url('fonts/cicle_fina-webfont.woff') format('woff');
    /* These lines specify the paths to the font files to be imported into */
    /* your CSS(the url part), and the format of each font file (the format */
    /* part). The latter part in each case is optional, but is useful to */
    /* declare because it allows browsers to more quickly determine which */
    /* font they can use. Multiple declarations can be listed, separated by */
    /* commas.Because the browser will search through them according to the */
    /* rules of the cascade,it's best to state your preferred formats, like */
    /* WOFF2, at the beginning. */
    font-weight: normal;
    font-style: normal;
    /* If you are importing multiple weights of the same font, you can */
    /* specify what their weight/style is and then use different values of */
    /* font-weight/font-style to choose between them, rather than having to */
    /* call all the different members of the font family different names. */
  }


  @font-face {
    font-family: 'zantrokeregular';
    src: url('fonts/zantroke-webfont.woff2') format('woff2'),
         url('fonts/zantroke-webfont.woff') format('woff');
    font-weight: normal;
    font-style: normal;
  }

  /* General setup */
  html {
    font-size: 10px;
    margin: 0;
    font-family: sans-serif;
  }

  body {
    width: 80%;
    max-width: 800px;
    margin: 0 auto;
  }

  /* Typography */

  h1 {
    font-size: 3.2rem;
  }

  h2 {
    font-size: 2.4rem;
  }

  h1,h2 {
    font-family: 'zantrokeregular', serif;
    letter-spacing: 0.2rem;
  }

  p {
    font-size: 1.6rem;
    line-height: 1.6;
    letter-spacing: 0.1rem;
    word-spacing: 0.3rem;
    font-family: 'ciclefina', sans-serif;
  }

#+end_src

**** Using an online font service
Online font services generally store and serve fonts for you so you don't have to worry about writing the ~@font-face code~.

Put the line of HTML code generated from Google Fonts above the existing ~<link>~ element, so that the font is imported before you try to use it in your CSS. You then need to copy the CSS declarations listed into your CSS as appropriate, to apply the custom fonts to your HTML.

#+begin_src html

  <!DOCTYPE html>
  <html lang="en-us">
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width">
      <title>Web font example</title>
      <link href='https://fonts.googleapis.com/css?family=Lobster|Raleway'
            rel='stylesheet' type='text/css'>
      <link href="google-font.css" rel="stylesheet" type="text/css">
    </head>
    <body>
      <h1>Hipster ipsum is the best</h1>
    </body>
  </html>

#+end_src

#+begin_src css

  /* General setup */
  html {
    font-size: 10px;
    margin: 0;
    font-family: sans-serif;
  }

  body {
    width: 80%;
    max-width: 800px;
    margin: 0 auto;
  }

  /* Typography */

  h1 {
    font-size: 4rem;
  }

  h2 {
    font-size: 3rem;
  }

  h1, h2 {
    font-family: 'Lobster', cursive;
  }

  p {
    font-size: 1.4rem;
    line-height: 1.6;
    word-spacing: 0.6rem;
    letter-spacing: 0.1rem;
    font-family: 'Raleway', sans-serif;
  }

#+end_src

**** @import from google apis
Importa desde [[https://fonts.google.com/][google fonts]] usando un ~@impor~ css la tipografía Montserrat con un peso de 600.

#+begin_src css

  @import url("https://fonts.googleapis.com/css?family=Montserrat:600");

  :root {
    background: #38761d;
    font-family: Montserrat;
    font-weight: 600;
  }

#+end_src

*** Font styles
**** Definition
Properties that affect a text's font, e.g., which font gets applied, its size, and whether it's bold, italic, etc.

**** font-family
***** Web safe fonts
You can use the font stack to specify preferred fonts, followed by web-safe alternatives, followed by the default system font. However, this increases your workload because of the testing required to make sure that your designs work with each font.

- Arial
- Courier New
- Georgia
- Times New Roman
- Trebuchet MS
- Verdana

***** Default fonts
CSS defines five generic names for fonts: serif, sans-serif, monospace, cursive, and fantasy.

**** font-size
- ~ems~: ~1 em~ is equal to the font size set on the parent element of the current element we are styling (more specifically, the width of a capital letter M contained inside the parent element).
- The standard font-size of which is set to ~16px~ across browsers. Any paragraph (or another element that doesn't have a different size set by the browser) inside the root element will have a final size of ~16px~. Other elements may have different default sizes. For example, an ~h1~ element has a size of ~2em~ set by default, so it will have a final size of ~32px~.
-  It is best to use ~rem~ where you can to keep things simple, and avoid setting the ~font-size~ of container elements where possible.

*** Text layout style
**** Definition
Properties that affect the spacing and other layout features of the text, allowing manipulation of, for example, the space between lines and letters, and how the text is aligned within the content box.

**** text-align
**** line-height
**** font-size
**** font-family
**** letter-spacing, word-spacing
*** Stylink links
**** order
The order is important because link styles build on one another. For example, the styles in the first rule will apply to all the subsequent ones. When a link is activated, it's usually also hovered over. If you put these in the wrong order, and you're changing the same properties in each ruleset, things won't work as you expect. To remember the order, you could try using a mnemonic like LoVe Fears HAte.

#+begin_src css

  a {
  }

  a:link {
  }

  a:visited {
  }

  a:focus {
  }

  a:hover {
  }

  a:active {
  }

#+end_src

**** links as buttons
A website navigation menu can be marked up as a set of links, and this can be styled to look like a set of control buttons or tabs that provide the user with access to other parts of the site. Let's explore how.

#+begin_src css

  <style>
  body, html {
    margin: 0;
    font-family: sans-serif;
  }

  .container {
    display: flex;
    gap: 0.625%;
  }

  a {
    flex: 1;
    text-decoration: none;
    outline: none;
    text-align: center;
    line-height: 3;
    color: black;
  }

  a:link,
  a:visited,
  a:focus {
    background: palegoldenrod;
    color: black;
  }

  a:hover {
    background: orange;
  }

  a:active {
    background: darkred;
    color: white;
  }
  </style>

  <nav class="container">
    <a href="#">Home</a>
    <a href="#">Pizza</a>
    <a href="#">Music</a>
    <a href="#">Wombats</a>
    <a href="#">Finland</a>
  </nav>

#+end_src

*** Example website text styling
**** Fonts
- First of all, download a couple of free-to-use fonts or search a link in google font.
- Use a suitable service to generate bulletproof ~@font-face~ code for these two fonts.
- Apply your body font to the whole page, and your heading font to your headings.

**** General text styling
- Give the page a site-wide ~font-size~.
- Give your headings and other element types appropriate font-sizes defined using a suitable relative unit.
- Give your body text a suitable ~line-height~.
- Center your top level heading on the page.
- Give your headings a little bit of ~letter-spacing~ to make them not too squashed, and allow the letters to breathe a bit.
- Give your body text some ~letter-spacing~ and ~word-spacing~, as appropriate.
- Give the first paragraph after each heading in the ~<section>~ a little bit of text-indentation, say ~20px~.

**** Links
- Give the link, visited, focus, and hover states some colors that go with the color of the horizontal bars at the top and bottom of the page.
- Remove the default focus outline from ALL the links on the page.
- Give the active state a noticeably different styling so it stands out nicely, but make it still fit in with the overall page design.

**** Lists
- Make sure the spacing of your lists and list items works well with the styling of the overall page. Each list item should have the same ~line-height~ as a paragraph line, and each list should have the same spacing at its top and bottom as you have between paragraphs.
- Give your list items a nice bullet appropriate for the design of the page. It is up to you whether you choose a custom bullet image or something else.

** Inheritance Cascade Specificity
*** Inheritance
**** Definition
Inheritance is a key feature in CSS; it relies on the ancestor-descendant relationship to operate. Inheritance is the mechanism by which properties are applied not only to a specified element but also to its descendants. Inheritance relies on the document tree, which is the hierarchy of XHTML elements in a page based on nesting. Descendant elements may inherit CSS property values from any ancestor element enclosing them. *In general, descendant elements inherit text-related properties, but their box-related properties are not inherited*.

- properties that can be inherited are :: color, font, letter spacing, line-height, list-style, text-align, text-indent, text-transform, visibility, white-space, and word-spacing.
- properties that cannot be inherited are :: background, border, display, float and clear, height, and width, margin, min- and max-height and -width, outline, overflow, padding, position, text-decoration, vertical-align, and z-index.

**** Controlling inheritance
- inherit :: sets the property value applied to a selected element to be the same as that of its parent element. Effectively, this "turns on inheritance".
- initial :: sets the property value applied to a selected element to the initial value of that property.
- revert :: resets the property value applied to a selected element to the browser's default styling rather than the defaults applied to that property. This value acts like unset in many cases.
- revert-layer :: resets the property value applied to a selected element to the value established in a previous cascade layer.
- unset :: resets the property to its natural value, which means that if the property is naturally inherited it acts like inherit, otherwise it acts like initial.

*** Cascade
At a very simple level, this means that the origin, the cascade layer, and the order of CSS rules matter. When two rules from the same cascade layer apply and both have equal specificity, the one that is defined last in the stylesheet is the one that will be used.

There are three factors to consider, listed here in increasing order of importance. Later ones overrule earlier ones:
- *Source order*: only matters when the specificity weight of the rules is the same
- *Specificity*:
- *Importance*:

#+begin_src css

  /* both the rules are from the same source, have an identical element */
  /* selector, and therefore, carry the same specificity, but the last one */
  /* in the source order wins. */
  h1 { color: red; }
  h1 { color: blue; }

#+end_src

The user agent goes through several, very clearly-defined steps to determine the values that get assigned to every property for every element.
1. *Relevance*: Find all the declaration blocks with a selector match for each element.
2. *Importance*: Sort rules based on if they are normal or important. Important styles are those that have the ~!important~ flag set.
3. *Origin*: Within each of the two importance buckets, sort rules by author, user, or user-agent origin.
4. *Layers*: Within each of the six origin importance bucket, sort by cascade layer. The layer order for normal declarations is from first layer created to last, followed by unlayered normal styles. This order is inverted for important styles, with unlayered important styles having the lowest precedence.
5. *Specificity*: For competing styles in the origin layer with precedence, sort declarations by specificity.
6. *Proximity*: When two selectors in the origin layer with precedence have the same specificity, the property value from the last declared selector with the highest specificity wins.

*** Specificity
Specificity refers to the relative weights of various rules. It determines which *styles apply* to an element *when more than one rule could apply*.

- An *Element selector* is less specific has a specificity of ~1~. *Pseudo-element* selectors have the same specificity.
- A *Class selector* is more specific has a specificity of ~1,0~. *Attribute selectors* and *Pseudo-classes* have the same weight.
- An *ID selector*  is more more specific has a specificity of ~1,0,0~.

*Notes*:
- Because the specificity values do not carry over as in the decimal system, commas are used to separate the "digits" (a CSS rule having ~11~ elements and ~11~ classes would have a specificity of ~11,11~, not ~121~).
- The universal selector (~*~), combinators(~+~, ~>~ , '~~~' , ~' '~ ), and specificity adjustment selector ( ~:where()~ ) along with its parameters, have no effect on specificity.
- The best way to evaluate specificity is to score the specificity levels individually starting from the highest and moving on to the lowest when necessary. Only when there is a tie between selector scores within a specificity column do you need to evaluate the next column down; otherwise, you can disregard the lower specificity selectors since they can never overwrite the higher specificity selectors.
- Inline styles, that is, the style declaration inside a ~style~ attribute, take precedence over all normal styles, no matter the specificity.

Thus the selectors of the following rule result in the indicated specificity:

| /Selectors/            | /Specificity/ |
|----------------------+-------------|
| h1 { }               | 0, 0, 0, 1  |
| p em { }             | 0, 0, 0, 2  |
| .grape { }           | 0, 0, 1, 0  |
| p.bright { }         | 0, 0, 1, 1  |
| p.bright em.dark { } | 0, 0, 2, 2  |
| #id218 { }           | 0, 1, 0, 0  |
| style=" "            | 1, 0, 0, 0  |

** Responsive design
*** Brief
HTML is fundamentally responsive, or fluid. If you create a web page containing only HTML, with no CSS, and resize the window, the browser will automatically reflow the text to fit the viewport. While the default responsive behavior may sound like no solution is needed, long lines of text displayed full screen on a wide monitor can be difficult to read. Responsive web design *isn't a separate technology* — it *is an approach*.

The term responsive design, coined by Ethan Marcotte in 2010, described using fluid grids, fluid images, and media queries to create responsive content.

At the time, the recommendation was to use CSS [[float]] for layout and media queries to query the browser width, creating layouts for different breakpoints. Fluid images are set to not exceed the width of their container; they have their ~max-width~ property set to ~100%~ . Fluid images scale down when their containing column narrows but do not grow larger than their intrinsic size when the column grows. This enables an image to scale down to fit its content, rather than overflow it, but not grow larger and become pixelated if the container becomes wider than the image.

Responsive sites are built on flexible grids, meaning you *don't need* to target every possible device size with pixel perfect layouts. Several layout methods, including [[Flexbox]], [[Grid]] and [[Multi-column layout][Multiple-column layout]], *are responsive by default*. They all assume that you are trying to create a flexible grid.

*** Media Queries
**** Brief
Media queries allow us to run a series of tests and apply CSS selectively to style the page appropriately, that is media queries use conditional logic for applying CSS styling. Media queries are a key part of responsive web design, as they allow you to create different layouts depending on the size of the viewport, but they can also be used to detect other things about the environment your site is running on, for example whether the user is using a touchscreen rather than a mouse.

A common approach when using Media Queries is to create a simple single-column layout for narrow-screen devices (e.g. mobile phones), then check for wider screens and implement a multiple-column layout when you know that you have enough screen width to handle it.

If using breakpoints, best practices encourage defining media query breakpoints with relative units rather than absolute sizes of an individual device.

Media queries can help with Responsive Web Design, but are not a requirement. [[Flexbox][Flexible grids]], [[Relative length units][relative units]], and [[min- and max- sizes][minimum and maximum unit]] values can be used without queries.

The simplest media query syntax looks like this:

#+begin_src css

  @media media-type and (media-feature-rule) {
    /* CSS rules go here */
  }

  /* A media type, which tells the browser what kind of media this code is */
  /* for (e.g. print, screen or all (default)). */
  /* A media expression, which is a rule, or test that must be passed for  */
  /* the contained CSS to be applied. */

#+end_src

**** width and height
The feature we tend to detect most often in order to create responsive designs (and that has widespread browser support) is viewport width, and we can apply CSS if the viewport is above or below a certain width — or an exact width — using the ~min-width~, ~max-width~, and ~width~ media features.

#+begin_src css

  @media screen and (max-width: 600px) {
    body {
      color: blue;
    }
  }

#+end_src

**** Orientation
One well-supported media feature is orientation, which allows us to test for portrait or landscape mode.

#+begin_src css

  @media (orientation: landscape) {
    body {
      color: rebeccapurple;
    }
  }

#+end_src

**** Use of pointing devices
This feature means you can *test* if the user has the ability to hover over an element, which essentially means they are using some kind of pointing device; touchscreen and keyboard navigation does not hover.

#+begin_src css

  /* Si el usuario está usando un dispositivo que tenga hover (desktop) las */
  /* letras se pintaran de morado, en cambio si usa un dispositivo que no */
  /* lo tenga (mobile) no se pintarán. */
  @media (hover: hover) {
    body {
      color: rebeccapurple;
    }
  }

#+end_src

**** and, or, not logic in media queries
- You can use ~and~ to combine a media type and feature.
- If you have a set of queries, any of which could match, then you can comma (~,~) separate these queries.
- You can negate an entire media query by using the ~not~ operator. This reverses the meaning of the entire media query.

#+begin_src css

  @media screen and (min-width: 600px) and (orientation: landscape) {
    body {
      color: blue;
    }
  }


  /* The text will be blue if the viewport is at least 600 pixels wide OR */
  /* the device is in landscape orientation. If either of these things are */
  /* true the query matches. */
  @media screen and (min-width: 600px), screen and (orientation: landscape) {
    body {
      color: blue;
    }
  }


  /* Text will only be blue if the orientation is portrait. */
  @media not all and (orientation: landscape) {
    body {
      color: blue;
    }
  }

#+end_src

*** Responsive images
**** Scales media
Responsive Images, using the ~<picture>~ element and the ~<img>~ ~srcset~ and ~sizes~ attributes enables serving images targeted to the user's viewport and the device's resolution.

To ensure media is never larger than its responsive container, the following approach can be used:

#+begin_src css

  /* This scales media to ensure they never overflow their */
  /* containers. Using a single large image and scaling it down to fit */
  /* small devices wastes bandwidth by downloading images larger than what */
  /* is needed. */
  img,
  picture,
  video {
    max-width: 100%;
  }

#+end_src

**** Different sizes
We want to display identical image content, just larger or smaller depending on the device. We can use two attributes — ~srcset~ and ~sizes~ — to provide several additional source images along with hints (metadata that describes the screen size and resolution the image is best suited for) to help the browser pick the right one.

~srcset~ *defines the set of images* we will allow the browser to choose between, and what size each image is. The image's intrinsic width in pixels (~480w~) — note that this uses the ~w~ unit, not ~px~ as you might expect. An image's [[The natural or intrinsic size of things][intrinsic]] size is its real size.

~sizes~ *defines a set of media conditions* (e.g. screen widths). ~480px~ especify the width of the slot the image will fill when the media condition is true.

The browser will load the image referenced in the ~srcset~ list that has the same size as the slot or, if there isn't one, the first image that is bigger than the chosen slot size.

*Note*:
- For the slot width, rather than providing an absolute width (for example, ~480px~), you can alternatively provide a width relative to the viewport (for example, ~50vw~) — but not a percentage.
- When testing this with a desktop browser, if the browser fails to load the narrower images when you've got its window set to the narrowest width, have a look at what the viewport is (you can approximate it by going into the browser's JavaScript console and typing in ~document.querySelector('html').clientWidth~). Different browsers have minimum sizes that they'll let you reduce the window width to, and they might be wider than you'd think.

#+begin_src html

  <img
    srcset="elva-fairy-480w.jpg 480w, elva-fairy-800w.jpg 800w"
    sizes="(max-width: 600px) 480px,
           800px" <!-- This width has no media condition,this is default. -->
    src="elva-fairy-800w.jpg"  <!-- This is set if the browser does not -->
    <!-- understand the attributes of the previous -->
    <!-- ones or if it does not choose any of them. -->
    alt="Elva dressed as a fairy" />

#+end_src

**** Same size, different resolutions
If you're supporting multiple display resolutions, but everyone sees your image at the same real-world size on the screen, you can allow the browser to choose an appropriate resolution image by using ~srcset~ with x-descriptors and without ~sizes~.

In this case, ~sizes~ is not needed — the browser works out what resolution the display is that it is being shown on, and serves the most appropriate image referenced in the ~srcset~. So if the device accessing the page has a standard/low resolution display, with one device pixel representing each CSS pixel, the ~elva-fairy-320w.jpg~ image will be loaded (the 1x is implied, so you don't need to include it.) If the device has a high resolution of two device pixels per CSS pixel or more, the ~elva-fairy-640w.jpg~ image will be loaded.

#+begin_src html

  <img
   srcset="elva-fairy-320w.jpg,elva-fairy-480w.jpg 1.5x,elva-fairy-640w.jpg 2x"
   src="elva-fairy-640w.jpg"
   alt="Elva dressed as a fairy" />

#+end_src

#+begin_src css

  /* In this example, the following CSS is applied to the image so that it */
  /* will have a width of 320 pixels on the screen (also called CSS */
  /* pixels): */
  img {
    width: 320px;
  }

#+end_src

**** Art direction
The art direction problem involves wanting to change the image displayed to suit different image display sizes. For example, a web page includes a large landscape shot with a person in the middle when viewed on a desktop browser. When viewed on a mobile browser, that same image is shrunk down, making the person in the image very small and hard to see. It would probably be better to show a smaller, portrait image on mobile, which zooms in on the person. The ~<picture>~ element allows us to implement just this kind of solution.

You could offer multiple images via a ~<picture>~ element, but then also offer multiple resolutions of each one. Realistically, you probably won't want to do this kind of thing very often.

Why can't we just do this using CSS or JavaScript?

When the browser starts to load a page, it starts to download (preload) any images before the main parser has started to load and interpret the page's CSS and JavaScript. That mechanism is useful in general for reducing page load times, but it is not helpful for responsive images — hence the need to implement solutions like ~srcset~. For example, you couldn't load the ~<img>~ element, then detect the viewport width with JavaScript, and then dynamically change the source image to a smaller one if desired. By then, the original image would already have been loaded, and you would load the small image as well, which is even worse in responsive image terms.

#+begin_src html

  <picture>
    <source media="(max-width: 799px)" srcset="elva-480w-close-portrait.jpg" />
    <!-- you could actually remove below element -->
    <source media="(min-width: 800px)" srcset="elva-800w.jpg" />
    <img src="elva-800w.jpg" alt="Chri standing up holding his daughte Elva" />
 <!-- you must provide an <img> element, with src and alt, right before -->
 <!-- </picture>,otherwise no images will appear.This provides a default -->
 <!--case that will apply when none of the media conditions return true and -->
 <!-- a fallback for browsers that don't support the <picture> element. -->
  </picture>

#+end_src

*** Responsive typography
**** Using media queries
In this example, we want to set our level 1 heading to be ~4rem~, meaning it will be four times our base font size. That's a really large heading! We only want this jumbo heading on larger screen sizes, therefore we first create a smaller heading then use media queries to overwrite it with the larger size if we know that the user has a screen size of at least ~1200px~.

As this approach to typography shows, you do not need to restrict media queries to only changing the layout of the page. They can be used to tweak any element to make it more usable or attractive at alternate screen sizes.

#+begin_src css

  html {
    font-size: 1em;
  }

  h1 {
    font-size: 2rem;
  }

  @media (min-width: 1200px) {
    h1 {
      font-size: 4rem;
    }
  }

#+end_src

**** Using viewport units
Viewport units ~vw~ can also be used to enable responsive typography, without the need for setting breakpoints with media queries. ~1vw~ is equal to one percent of the viewport width, meaning that if you set your font size using ~vw~, it will always relate to the size of the viewport.

#+begin_src css

  h1 {
    font-size: 6vw;
  }

#+end_src

The problem with doing the above is that the user loses the ability to zoom any text set using the ~vw~ unit, as that text is always related to the size of the viewport. *Therefore you should never set text using viewport units alone*.

There is a solution, and it involves using ~calc()~. If you add the ~vw~ unit to a value set using a fixed size such as ~ems~ or ~rems~ then the text will still be zoomable. Essentially, the ~vw~ unit adds on top of that zoomed value:

This means that we only need to specify the font size for the heading once, rather than set it up for mobile and redefine it in the media queries. The font then gradually increases as you increase the size of the viewport.

#+begin_src css

  h1 {
    font-size: calc(1.5rem + 3vw);
  }

#+end_src

*** Example website mobile first responsive design
The view for the very smallest devices is quite often a simple single column of content, much as it appears in normal flow. This means that you probably don't need to do a lot of layout for small devices.

#+begin_src css

  * {
    box-sizing: border-box;
  }

  body {
    width: 90%;
    margin: 2em auto;
    font: 1em/1.3 Arial, Helvetica, sans-serif;
  }

  a:link,
  a:visited {
    color: #333;
  }

  nav ul,
  aside ul {
    list-style: none;
    padding: 0;
  }

  nav a:link,
  nav a:visited {
    background-color: rgba(207, 232, 220, 0.2);
    border: 2px solid rgb(79, 185, 227);
    text-decoration: none;
    display: block;
    padding: 10px;
    color: #333;
    font-weight: bold;
  }

  nav a:hover {
    background-color: rgba(207, 232, 220, 0.7);
  }

  .related {
    background-color: rgba(79, 185, 227, 0.3);
    border: 1px solid rgb(79, 185, 227);
    padding: 10px;
  }

  .sidebar {
    background-color: rgba(207, 232, 220, 0.5);
    padding: 10px;
  }

  article {
    margin-bottom: 1em;
  }


#+end_src

#+begin_src html

  <div class="wrapper">
    <header>
      <nav>
        <ul>
          <li><a href="">About</a></li>
          <li><a href="">Contact</a></li>
          <li><a href="">Meet the team</a></li>
          <li><a href="">Blog</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <article>
        <div class="content">
          <h1>Veggies!</h1>
          <p>…</p>
        </div>
        <aside class="related">
          <p>…</p>
        </aside>
      </article>

      <aside class="sidebar">
        <h2>External vegetable-based links</h2>
        <ul>
          <li>…</li>
        </ul>
      </aside>
    </main>

    <footer><p>&copy;2019</p></footer>
  </div>

#+end_src

We've made no layout changes, however the source of the document is ordered in a way that makes the content readable. This is an important first step and one which ensures that if the content were to be read out by a screen reader, it would be understandable.

From this point, start to drag the Responsive Design Mode view wider until you can see that the line lengths are becoming quite long, and we have space for the navigation to display in a horizontal line. This is where we'll add our first media query. We'll use ~ems~, as this will mean that if the user has increased their text size, the breakpoint will happen at a similar line-length but wider viewport, than someone with a smaller text size.

#+begin_src css

  @media screen and (min-width: 40em) {
    article {
      display: grid;
      grid-template-columns: 3fr 1fr;
      column-gap: 20px;
    }

    nav ul {
      display: flex;
    }

    nav li {
      flex: 1;
    }
  }

#+end_src

Let's continue to expand the width until we feel there is enough room for the sidebar to also form a new column. Inside a media query we'll make the main element into a two column grid. We then need to remove the margin-bottom on the article in order that the two sidebars align with each other, and we'll add a border to the top of the footer. *Typically these small tweaks are the kind of thing you will do to make the design look good at each breakpoint*.

#+begin_src css

  @media screen and (min-width: 70em) {
    main {
      display: grid;
      grid-template-columns: 3fr 1fr;
      column-gap: 20px;
    }

    article {
      margin-bottom: 0;
    }

    footer {
      border-top: 1px solid #ccc;
      margin-top: 2em;
    }
  }

#+end_src

* Website
** Fundamental concepts
1. Each documet must have a locator or identifier [[URL]].
2. There must be a language in which computers comunicate to request and deliver documents to each other. (HTTP)
3. There must be a way to encode the documents so that the other computer is able to display it on the screen [[HTML]].

** URI
*** Definition
A *Uniform Resource Identifier* is a unique sequence of characters that *identifies* a logical or physical resource used by web technologies.

Some URIs provide a means of *locating* and retrieving information resources on a network; these are *Uniform Resource Locators* (URLs). A URL provides the location of the resource. A URI identifies the resource by name at the specified location or URL. Other URIs provide only a unique *name*, without a means of locating or retrieving the resource or information about it, these are *Uniform Resource Names* (URNs).

A *URN* is analogous to a *person's name*, while a *URL* is analogous to their *street address*. In other words, a URN identifies an item and a URL provides a method for finding it.

The URI generic syntax consists of five components organized hierarchically in order of decreasing significance from left to right:
~URI = scheme ":" ["//" authority] path ["?" query] ["#" fragment]~

The authority component consists of subcomponents:
~authority = [userinfo "@"] host [":" port]~

#+begin_src

          URI
    ┌──────┴──────┐
    +-------------+
    | URL  |  URN |
    +-------------+


          userinfo     host    port
          ┌──┴───┐ ┌────┴────┐ ┌┴┐
  https://john.doe@www.exa.com:123/forum/questi/?tag=net&order=new#top
  └─┬─┘   └───────────┬──────────┘└─────┬──────┘ └────────┬──────┘ └┬┘
  scheme          authority           path               query  fragment


  mailto:John.Doe@example.com
  └─┬─┘  └────────┬─────────┘
  scheme        path

#+end_src

*** URL
A Uniform Resource Locator is a URI that specifies the means of acting upon or obtaining the representation of a resource, i.e. specifying both its *primary access mechanism* and *network location*.

For example, the URL http://example.org/wiki/Main_Page refers to a resource identified as ~/wiki/Main_Page~, whose representation is obtainable via the Hypertext Transfer Protocol (~http:~) from a network host whose domain name is ~example.org~.

*Relative URL*:
A relative URL gives you the location of resource relative to the location of the resource that contains the URL.

*Examples*:
A relative URL beginning with (~/~) replaces the entire path of the base URL.
~http://www.conclase.net/hola.txt~
~/hola.txt~ (relative URL)

A URL beginning with (~//~) replaces everything in the base URL from the included destination name
~http://www.yahoo.com/~
~//www.yahoo.com/~ (relative URL)

*Note*: Directories always end with a slash (~/~) and files end without a slash (~/~).

*** URN
A Uniform Resource Name is a URI that *identifies* a resource *by name* in a particular namespace. A URN may be used to talk about a resource without implying its location or how to access it.

** Website structure
*** Basic sections of a document
**** header
Usually a big strip across the top with a big heading, logo, and perhaps a tagline. This usually stays the same from one webpage to another.

[[header][<header>]]: Represents a group of introductory content. If it is a child of ~<body>~ it defines the global header of a webpage, but if it's a child of an ~<article>~ or ~<section>~ it defines a specific header for that section (try not to confuse this with titles and headings).

**** navigation bar
Links to the site's main sections; usually represented by menu buttons, links, or tabs.

[[nav][<nav>]]: Contains the main navigation functionality for the page. Secondary links, etc., would not go in the navigation.

*Note*: Having the navigation bar separate the header is better for accessibility, as screen readers can read the two features better if they are separate.

**** main content
A big area in the center that contains most of the unique content of a given webpage. This is the one part of the website that definitely will vary from page to page!

[[main][<main>]]: Is for content unique to this page. Use ~<main>~ only once per page, and put it directly inside ~<body>~. Ideally this shouldn't be nested within other elements.

[[article][<article>]] (subsections): Encloses a block of related content that makes sense on its own without the rest of the page (e.g., a single blog post).

[[section][<section>]] (subsections): Is similar to ~<article>~, but it is more for grouping together a single part of the page that constitutes one single piece of functionality (e.g., a mini map, or a set of article headlines and summaries), or a theme.

[[dic][<div>]] (subsections)

*Note*: It's considered best practice to begin each section with a heading; also note that you can break ~<article>~ s up into different ~<section>~ s, or ~<section>~ s up into different ~<article>~ s, depending on the context.

**** sidebar
Some peripheral info, links, quotes, ads, etc. Usually, this is contextual to what is contained in the main content.

[[aside][<aside>]] (often placed inside ~<main>~): Contains content that is *not directly related* to the main content *but* can provide additional information *indirectly related* to it (glossary entries, author biography, related links, etc.).

**** footer
A strip across the bottom of the page that generally contains fine print, copyright notices, or contact info. It's a place to put common information (like the header) but usually, that information is not critical or secondary to the website itself. The footer is also sometimes used for SEO purposes, by providing links for quick access to popular content.

[[footer][<footer>]]: Represents a group of end content for a page.

**** Example website structure

#+begin_src html

  <!DOCTYPE html>
  <html lang="en-US">
    <head>
      <meta charset="utf-8" />
      <meta name="viewport" content="width=device-width" />
      <title>My page title</title>
      <link
        href="https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Sonsie+One"
        rel="stylesheet" />
      <link rel="stylesheet" href="style.css" />
    </head>

    <body>

      <!--Here's our main header that's used across all the page of our web -->
      <header>
        <h1>Header</h1>
      </header>

      <nav>
        <ul>
          <li><a href="#">Home</a></li>
          <li><a href="#">Our team</a></li>
          <li><a href="#">Projects</a></li>
          <li><a href="#">Contact</a></li>
        </ul>

        <!--A Search form is another common non-linear way to navigate through a website. -->
        <form>
          <input type="search" name="q" placeholder="Search query" />
          <input type="submit" value="Go!" />
        </form>
      </nav>

      <!-- Here is our page's main content -->
      <main>

        <!-- It contains an article -->
        <article>
          <h2>Article heading</h2>

          <p>
            Lorem ipsum dolor ...
            Lorem ipsum dolor ...
          </p>

          <h3>Subsection</h3>

          <p>
            Lorem ipsum dolor ...
            Lorem ipsum dolor ...
          </p>

          <p>
            Lorem ipsum dolor ...
            Lorem ipsum dolor ...
          </p>

          <h3>Another subsection</h3>

          <p>
            Lorem ipsum dolor ...
            Lorem ipsum dolor ...
          </p>

          <p>
            Lorem ipsum dolor ...
            Lorem ipsum dolor ...
          </p>
        </article>

        <!-- the aside content can also be nested within the main content -->
        <aside>
          <h2>Related</h2>

          <ul>
            <li><a href="#">Oh I do like to be beside the seaside</a></li>
            <li><a href="#">Although in the North of England</a></li>
            <li><a href="#">Oh well…</a></li>
          </ul>
        </aside>
      </main>

      <!-- And here is our main footer that is used across all the pages of our website -->
      <footer>
        <p>©Copyright 2050 by nobody. All rights reversed.</p>
      </footer>
    </body>
  </html>

#+end_src

*** Planning a simple example website
- common to every page :: bear in mind that you'll have a few elements common to most (if not all) pages. (navigation menu, and the footer content)

- draw a rough sketch ::

#+begin_src

   +-------------------------------------+
   |               HEADER                |
   |-------------------------------------|
   |                           |         |
   |                           |         |
   |       MAIN CONTENT        | SIDEBAR |
   |                           |         |
   |                           |         |
   |-------------------------------------|
   |               FOOTER                |
   +-------------------------------------+

#+end_src

- brainstorm :: Brainstorm all the other (not common to every page) content you want to have on your website — write a big list down. (languages, math, computer, algorithm, English ...)

- sort all content :: next, try to sort all these content items into groups, to give you an idea of what parts might live together on different pages. This is very similar to a technique called Card sorting. (Languages: English - Spanish, Computer: Algorithm, Programming, ...)

- sketch a rough sitemap :: now try to sketch a rough sitemap — have a bubble for each page on your site, and draw lines to show the typical workflow between pages. The homepage will probably be in the center, and link to most if not all of the others; most of the pages in a small site should be available from the main navigation, although there are exceptions. You might also want to include notes about how things might be presented.

** Order in which component files are parsed
- The browser parses the HTML file first, and that leads to the browser recognizing any ~<link>~-element references to external CSS stylesheets and any ~<script>~-element references to scripts.
- As the browser parses the HTML, it sends requests back to the server for any CSS files it has found from ~<link>~ elements, and any JavaScript files it has found from ~<script>~ elements, and from those, then parses the CSS and JavaScript.
- The browser generates an in-memory [[DOM]] tree from the parsed HTML, generates an in-memory CSSOM structure from the parsed CSS, and compiles and executes the parsed JavaScript.
- As the browser builds the DOM tree and applies the styles from the CSSOM tree and executes the JavaScript, a visual representation of the page is painted to the screen, and the user sees the page content and can begin to interact with it.

** What will your website look like?
- what structure should your website have? :: The most common things we'll have on any website project we create are an index HTML file and folders to contain images, style files, and script files.
- what information does my website offer? ::
- what fonts and colors do I want? ::
- what does my site do? ::

** How browsers work
*** Overview
For the most part, browsers are considered single-threaded. That is, they execute a task from beginning to end before taking up another task. For smooth interactions, the developer's goal is to ensure performant site interactions, from smooth scrolling to being responsive to touch. Render time is key, with ensuring the main thread can complete all the work we throw at it and still always be available to handle user interactions.

#+begin_src artist

  +-----------+                               +------------+
  |           |                               |            |
  |   PC      |<--------DNS-Lookup----------->|   DNS      |
  |           |                               |            |
  |           |                               +------------+
  |           |                               +------------+
  |           |<-------TCP-Handshake--------->|   Site     |
  |           |                               +------------+
  |           |<-------SSL-Handshake--------->|            |
  |           |                               +------------+
  |           |-------HTTP-GET-Request------->|            |
  |           |                               |            |
  |           |<------14KB-response-----------|            |
  |           |-----------ACK---------------->|            |
  |           |<------28KB-response-----------|            |
  |           |-----------ACK---------------->|            |
  |           |<------56KB-response-----------|            |
  |           |-----------ACK---------------->|            |
  +-----------+                               +------------+

#+end_src

*** Navigation
Navigation is the first step in loading a web page. It occurs whenever a user requests a page by entering a URL into the address bar, clicking a link, submitting a form, as well as other actions.

- DNS Lookup :: the first step of navigating to a web page is finding where the assets for that page are located, that is, the IP address. DNS lookups must be done for each unique hostname the requested page references. If your fonts, images, scripts, ads, and metrics all have different hostnames, a DNS lookup will have to be made for each one. This can be problematic for performance, particularly on mobile networks. When a user is on a mobile network, each DNS lookup has to go from the phone to the cell tower to reach an authoritative DNS server.

- TCP Handshake :: once the IP address is known, the browser sets up a connection to the server via a TCP three-way handshake SYN, SYN-ACK, ACK.

- TLS Negotiation :: for secure connections established over HTTPS, another "handshake" is required. This handshake, or rather the TLS negotiation, determines which cipher will be used to encrypt the communication, verifies the server, and establishes that a secure connection. After the 8 round trips, the browser is finally able to make the request.

#+begin_src artist

  +-----------+                              +-------------+
  |   PC      |--------www.example.com------>|     DNS     |
  |           |<-------93.184.216.34---------|             |
  |           |                              +-------------+
  |           |                              +-------------+
  |           |------------SYN-------------->|             |
  |           |<---------SYN-ACK-------------|     SITE    |
  |           |------------ACK-------------->|             |
  |           |                              +-------------+
  |           |--------ClientHello---------->|             |
  |           |<--ServerHello-&-Certificate--|             |
  |           |--------ClientKey------------>|             |
  |           |                              +-------------+
  +-----------+

#+end_src

*** Response
Once we have an established connection to a web server, the browser sends an initial [[file:networks.org::GET][HTTP GET request]] on behalf of the user.

This response for this initial request contains the first byte of data received. *Time to First Byte (TTFB)* is the time between when the user made the request—say by clicking on a link—and the receipt of this first packet of HTML. The first chunk of content is usually 14KB of data.

The first response packet will be 14KB. This is part of *TCP slow start* (14KB rule), an algorithm which balances the speed of a network connection. Slow start gradually increases the amount of data transmitted until the network's maximum bandwidth can be determined. In TCP slow start, after receipt of the initial packet, the server doubles the size of the next packet to around 28KB. Subsequent packets increase in size until a predetermined threshold is reached, or congestion is experienced.

As the server sends data in TCP packets, the user's client confirms delivery by returning acknowledgements, or ACKs. The connection has a limited capacity depending on hardware and network conditions. If the server sends too many packets too quickly, they will be dropped. Meaning, there will be no acknowledgement. The server registers this as missing ACKs. Congestion control algorithms use this flow of sent packets and ACKs to determine a send rate.

#+begin_src artist

  +-----------+                               +------------+
  |   PC      |<--------DNS-Lookup----------->|   DNS      |
  |           |                               +------------+
  |           |                               +------------+
  |           |<-------TCP-Handshake--------->|   Site     |
  |           |                               +------------+
  |           |<-------SSL-Handshake--------->|            |
  |           |                               +------------+
  |           |-------HTTP-GET-Request------->|            |
  |           |                               |            |
  |           |<------14KB-response-----------|            |
  |           |-----------ACK---------------->|            |
  |           |<------28KB-response-----------|            |
  |           |-----------ACK---------------->|            |
  |           |<------56KB-response-----------|            |
  |           |-----------ACK---------------->|            |
  +-----------+                               +------------+

#+end_src

*** Parsing
**** Definition
Once the browser receives the first chunk of data, it can begin parsing the information received.

It's important for web performance optimization to include everything the browser needs to start rendering a page, or at least a template of the page - the CSS and HTML needed for the first render — in the first 14 kilobytes. But before anything is rendered to the screen, the HTML, CSS, and JavaScript have to be parsed.

#+begin_src artist

        +--------------+
        |     HTML     |
        +--------------+
          /           \
  +------------+       \ +--------------+
  |    HEAD    |         |     BODY     |
  +------------+         +--------------+
   |                      |
   |  +-----------+       | +-------------+   +----------------+
   |--|   META    |       |-|     H1      |---| class:"heading"|
   |  +-----------+       | +-------------+   +----------------+
   |  +-----------+       | +-------------+
   |--|   TITLE   |       |-|     P       |
   |  +-----------+       | +-------------+
   |  +-----------+       |     | +---------------+
   |--|   LINK    |       |     |-| a paragraph ..|
   |  +-----------+       |     | +---------------+
   |  +-----------+       |     | +---------------+  +--------------+
   |--|   SCRIPT  |       |     |-|    A          |--| href:"htt..."|
      +-----------+       |       +---------------+  +--------------+
                          |          |
                          |          |  +---------------+
                          |          |- |  link         |
                          |             +---------------+
                          |
                          | +---------------+
                          |-|     DIV       |
                          | +---------------+
                          |     | +-------------+ +--------------+
                          |     |-|    IMG      |-| src:"..."    |
                          |       +-------------+ +--------------+
                          | +-----------------+  +-------------+
                          |-|     SCRIPT      |--| src:"..."   |
                            +-----------------+  +-------------+

#+end_src

**** Building the DOM tree (1step)
*The first step* is processing the HTML markup and building the DOM tree. HTML parsing involves tokenization and tree construction.

The DOM tree describes the content of the document. The ~<html>~ element is the first tag and root node of the document tree. The tree reflects the relationships and hierarchies between different tags. Tags nested within other tags are child nodes. The greater the number of DOM nodes, the longer it takes to construct the DOM tree.

When the parser finds non-blocking resources, such as an image, the browser will request those resources and continue parsing. Parsing can continue when a CSS file is encountered, but ~<script>~ tags—particularly those without an ~async~ or ~defer~ attribute—block rendering, and pause the parsing of HTML. Though the browser's preload scanner hastens this process, excessive scripts can still be a significant bottleneck.

**** Preload scanner
While the browser builds the DOM tree, this process occupies the main thread. As this happens, the preload scanner will parse through the content available and request high priority resources like CSS, JavaScript, and web fonts. Thanks to the preload scanner, we don't have to wait until the parser finds a reference to an external resource to request it. It will retrieve resources in the background so that by the time the main HTML parser reaches requested assets, they may already be in flight, or have been downloaded. The optimizations the preload scanner provides reduce blockages.

**** Building the CSSOM (2step)
*The second step* in the critical rendering path is processing CSS and building the CSSOM tree. The browser goes through each rule set in the CSS, creating a tree of nodes with parent, child, and sibling relationships based on the CSS selectors.

The CSSOM tree includes styles from the user agent style sheet. The browser begins with the most general rule applicable to a node and recursively refines the computed styles by applying more specific rules. In other words, it cascades the property values.

Total time to create the CSSOM is very very fast and is generally less than the time it takes for one DNS lookup.

**** Other Processes
*JavaScript Compilation*
While the CSS is being parsed and the CSSOM created, other assets, including JavaScript files, are downloading (thanks to the preload scanner). JavaScript is interpreted, compiled, parsed and executed. The scripts are parsed into abstract syntax trees. Some browser engines take the Abstract Syntax Tree and pass it into an interpreter, outputting bytecode which is executed on the main thread. This is known as JavaScript compilation.

*Building the Accessibility Tree*
The browser also builds an accessibility tree that assistive devices use to parse and interpret content. The accessibility object model (AOM) is like a semantic version of the DOM. The browser updates the accessibility tree when the DOM is updated. The accessibility tree is not modifiable by assistive technologies themselves.

Until the AOM is built, the content is not accessible to screen readers.

*** Render
**** Definition
Rendering steps include style, layout, paint and, in some cases, compositing. The CSSOM and DOM trees created in the parsing step are combined into a *render tree* which is then used to compute the layout of every visible element, which is then painted to the screen.

**** Style (3step)
*The third step* in the critical rendering path is *combining the DOM and CSSOM into a render tree*. The computed style tree, or render tree, construction starts with the root of the DOM tree, traversing each visible node.

Tags that aren't going to be displayed, like the ~<head>~ and its children and any nodes with ~display: none~, such as the script ~{ display: none; }~ you will find in user agent stylesheets, are not included in the render tree as they will not appear in the rendered output. Nodes with ~visibility: hidden~ applied are included in the render tree, as they do take up space.

**** Layout (4step)
*The fourth step* in the critical rendering path is running layout on the render tree *to compute the geometry of each node*. *Layout* is the process by which the width, height, and location of all the nodes in the render tree are determined, plus the determination of the size and position of each object on the page. *Reflow* is any subsequent size and position determination of any part of the page or the entire document.

**** Paint (5step)
*The last step* in the critical rendering path is *painting the individual nodes to the screen*, the first occurrence of which is called the *first meaningful paint*. In the painting or rasterization phase, the browser converts each box calculated in the layout phase to actual pixels on the screen. Painting involves drawing every visual part of an element to the screen, including text, colors, borders, shadows, and replaced elements like buttons and images. The browser needs to do this super quickly.

To ensure smooth scrolling and animation, everything occupying the main thread, including calculating styles, along with reflow and paint, must take the browser less than 16.67ms to accomplish. To ensure repainting can be done even faster than the initial paint, the drawing to the screen is generally broken down into several layers. If this occurs, then compositing is necessary.

**** Compositing
When sections of the document are drawn in different layers, overlapping each other, compositing is necessary to ensure they are drawn to the screen in the right order and the content is rendered correctly.

As the page continues to load assets, reflows can happen. A reflow sparks a repaint and a re-composite. Had we defined the size of our image, no reflow would have been necessary, and only the layer that needed to be repainted would be repainted, and composited if necessary. But we didn't include the image size! When the image is obtained from the server, the rendering process goes back to the layout steps and restarts from there.

*** Interactivity
Once the main thread is done painting the page, you would think we would be "all set." That isn't necessarily the case. If the load includes JavaScript, that was correctly deferred, and only executed after the ~onload~ event fires, the main thread might be busy, and not available for scrolling, touch, and other interactions.

*Time to Interactive (TTI)* is the measurement of how long it took from that first request which led to the DNS lookup and SSL connection to when the page is interactive — interactive being the point in time after the First Contentful Paint when the page responds to user interactions within 50ms. If the main thread is occupied parsing, compiling, and executing JavaScript, it is not available and therefore not able to respond to user interactions in a timely (less than 50ms) fashion.

For example, maybe an image loads quickly, but perhaps an ~anotherscript.js~ file is 2MB and the user's network connection is slow. In this case the user would see the page super quickly, but wouldn't be able to scroll without jank until the script was downloaded, parsed and executed. That is not a good user experience. Avoid occupying the main thread

** Guidelines for building a website
1. [[What will your website look like?]]
2. [[Planning a simple example website]]
3. [[Basic sections of a document]]
4. [[Example website mobile first responsive design]]
5. [[Example website logical sections in style sheet]]
6. [[Example website text styling]]
7. [[Guidelines for SEO]]

* SEO
** Search Engine Optimization
Making your content search-friendly matters because it's how you get more relevant users viewing your content. This is called search engine optimization (SEO the process of making your site better for search engines), which can result in more interested users coming to your site. If Google Search has trouble understanding your page, you're possibly missing out on an important source of traffic.

** Google Search
*** Three stages of Google Search
Google Search works in three stages, and not all pages make it through each stage:

1. *Crawling*: Google downloads text, images, and videos from pages it found on the internet with automated programs called [[Crawler][crawlers]].
2. *Indexing*: Google analyzes the text, images, and video files on the page, and stores the information in the Google [[Index][index]], which is a large database. This stage includes processing and analyzing the textual content and key content tags and attributes, such as [[title][<title>]] elements and [[alt]] attributes, images, videos, and more.
3. *Serving search results*: When a user searches on Google, Google returns information that's relevant to the user's query.

*** E-E-A-T the quality rater guidelines
Google's automated systems are designed to use many different factors to rank great content. After identifying relevant content, our systems aim to prioritize those that seem most helpful. To do this, they identify a mix of factors that can help determine which content demonstrates aspects of *experience*, *expertise*, *authoritativeness*, and *trustworthiness*, or what we call E-E-A-T.

*** Page experience signals
The following signals are important for delivering a good page experience in Google Search. We intend to update the page experience signals on an annual basis.

- Core Web Vitals :: the page provides a good user experience, focusing on the aspects of *loading*, *interactivity*, and *visual stability*:

  - Largest Contentful Paint (LCP) :: *measures loading performance*. To provide a good user experience, strive to have LCP occur within the first 2.5 seconds of the page starting to load.
  - First Input Delay (FID) :: *measures interactivity*. To provide a good user experience, strive to have an FID of less than 100 milliseconds. FID measures the time from when a user first interacts with a page (that is, when they click a link, tap on a button, or use a custom, JavaScript-powered control) to the time when the browser is actually able to begin processing event handlers in response to that interaction.
  - Cumulative Layout Shift (CLS) :: *measures visual stability*. To provide a good user experience, strive to have a CLS score of less than 0..1. CLS is about this: Have you ever been reading an article online when something suddenly changes on the page? Without warning, the text moves, and you've lost your place. Or even worse: you're about to tap a link or a button, but in the instant before your finger lands—BOOM—the link moves, and you end up clicking something else!

- Mobile-friendly :: the page is mobile-friendly. Check if your page is mobile-friendly.

- HTTPS :: the page is served over HTTPS. Check if your site's connection is secure.

- No intrusive interstitials :: the content on the page must be easily accessible to the user. Intrusive interstitials and dialogs are page elements that obstruct users' view of the content, usually for promotional purposes. Interstitials are overlays on the whole page and dialogs are overlays only on a part of the page, sometimes also obfuscating the underlying content.  Intrusive dialogs and interstitials make it hard for Google and other search engines to understand your content, which may lead to poor search performance. Equally, if users find your site hard to use, they are unlikely to want to visit those websites again, including through search engines.

*** Miscellaneous
**** Structured data markup in Google Search
***** Structured data
Google Search works hard to understand the content of a page. You can help us by providing explicit clues about the meaning of a page to Google by including structured data on the page. Structured data is a standardized format for providing information about a page and classifying the page content; for example, on a recipe page, what are the ingredients, the cooking time and temperature, the calories, and so on.

Google Search also uses structured data to enable special search result features and enhancements. For example, a recipe page with valid structured data is eligible to appear in a graphical search result.

***** How structured data works in Google Search
Google uses structured data that it finds on the web to understand the content of the page, as well as to gather information about the web and the world in general, such as information about the people, books, or companies that are included in the markup. For example, here is a JSON-LD structured data snippet that might appear on a recipe page, describing the title of the recipe, the author of the recipe, and other details:

#+begin_src html

  <html>
    <head>
      <title>Party Coffee Cake</title>
      <script type="application/ld+json">
        {
        "@context": "https://schema.org/",
        "@type": "Recipe",
        "name": "Party Coffee Cake",
        "author": {
        "@type": "Person",
        "name": "Mary Stone"
        },
        "datePublished": "2018-03-10",
        "description": "This coffee cake is awesome and perfect for parties.",
        "prepTime": "PT20M"
        }
      </script>
    </head>
    <body>
      <h2>Party coffee cake recipe</h2>
      <p>
        <i>by Mary Stone, 2018-03-10</i>
      </p>
      <p>
        This coffee cake is awesome and perfect for parties.
      </p>
      <p>
        Preparation time: 20 minutes
      </p>
    </body>
  </html>

#+end_src

**** Use robots meta tags carefully
You can prevent Google from indexing a page or following links through the robots meta tag. For example, adding the following meta tag to the top of your page blocks Google from indexing the page:

#+begin_src html

  <!-- Google won't index this page or follow links on this page -->
  <meta name="robots" content="noindex, nofollow">

#+end_src

You can use JavaScript to add a robots meta tag to a page or change its content. The following example code shows how to change the robots meta tag with JavaScript to prevent indexing of the current page if an API call doesn't return content.

#+begin_src js

  fetch('/api/products/' + productId)
      .then(function (response) { return response.json(); })
      .then(function (apiResponse) {
          if (apiResponse.isError) {
              // get the robots meta tag
              var metaRobots = document.querySelector('meta[name="robots"]');
              // if there was no robots meta tag, add one
              if (!metaRobots) {
                  metaRobots = document.createElement('meta');
                  metaRobots.setAttribute('name', 'robots');
                  document.head.appendChild(metaRobots);
              }
              // tell Google to exclude this page from the index
              metaRobots.setAttribute('content', 'noindex');
              // display an error message to the user
              errorMsg.textContent = 'This product is no longer available';
              return;
          }
          // display product information
          // ...
      });

#+end_src

**** Migrating a single URL
If you move a page permanently to another location, don't forget to implement 301 redirects for your page. If the move is only temporary for some reason, return 302 instead to tell Google to continue to crawl your page.

When a user requests a page that has been removed, you can create a custom 404 page to provide a better experience. Just be sure that when a user requests a page that is no longer there, you return a true 404 error, not a soft 404.

** Best practices for web content
- Ask "Who, How, and Why" about your content :: consider evaluating your content in terms of "Who(created the content), How(the content was created), and Why(was the content created)" as a way to stay on course with what our systems seek to reward. How (the content was created): For example, with product reviews, it can build trust with readers when they understand the number of products that were tested, what the test results were, and how the tests were conducted, all accompanied by evidence of the work involved, such as photographs.

- Design for accessibility :: create pages for users, not just search engines. When you're designing your site, think about the needs of your users, including those who may not be using a JavaScript-capable browser (for example, people who use screen readers or less advanced mobile devices). One of the easiest ways to test your site's accessibility is to preview it in your browser with JavaScript turned off, or to view it in a text-only browser such as Lynx. Viewing a site as text-only can also help you identify other content which may be hard for Google to see, such as text embedded in images.

- Site fast and Accessible :: make sure that your site is secure, fast, accessible to all, and works on all devices.

- Keywords and placement locations :: use words that people would use to look for your content, and place those words in prominent locations on the page, such as the *title and main heading* of a page, and other descriptive locations such as *alt text* and *link text*.

- Know what your readers want (and give it to them) :: think about the words that a user might search for to find a piece of your content. Users who know a lot about the topic might use different keywords in their search queries than someone who is new to the topic. For example, a long-time football fan might search for "fifa", an acronym for the Fédération Internationale de Football Association, while a new fan might use a more general query like "football playoffs". Anticipating these differences in search behavior and accounting for them while writing your content (using a good mix of keyword phrases) could produce positive results. Consider creating a new, useful service that no other site offers. You could also write an original piece of research, break an exciting news story, or leverage your unique user base.

- Optimize placement :: whenever possible, place images near relevant text. When it makes sense, consider placing the most important image near the top of the page.

- Check your links :: [[Googlebot]] navigates from URL to URL by fetching and parsing links, [[Sitemaps][sitemaps]], and redirects. Googlebot treats every URL as if it's the first and only URL it has seen from your site.

** Make sure Googlebot can find all the URLs on the site
- Use [[a][<a>]] elements that Google can crawl. Generally, Google can only crawl your link if it's an ~<a>~ HTML element (also known as anchor element) with an [[href]] attribute. Ensure that all pages on the site can be reached by a link from another findable page. Make sure the referring link includes either text or, for images, an [[alt]] attribute, that is relevant to the target page. Google can't reliably extract URLs from ~<a>~ elements that don't have an href attribute or other tags that perform as links because of script events.
- Build and submit a sitemap to help Googlebot more intelligently crawl your site. A sitemap is a file where you provide information about the pages, videos, and other files on your site, and the relationships between them.
- For JavaScript apps that have only one HTML page, make sure that each screen or piece of individual content has a URL.

** Best practices for creating Web Stories
*** Storytelling
- Video first :: video is more engaging than text or images. Use as much video as possible, and supplement with images and text.
- Bring your perspective :: go beyond the facts. Share your opinions. Be the protagonist of your own story. Make it relatable.
- Have a narrative arc :: create suspense in your story from one page to another. Bring the user along in the journey by providing context and narrative. Deliver payoff for sticking with you to the end.

*** Design
- Reduce your character count :: avoid including multiple pages with walls of text. Consider reducing text to approximately 280 characters per page (the length of a tweet).
- Don't block text :: make sure text is not blocked by other content on the page. Avoid burned in text; by not using burned in text, you prevent text from being blocked when it gets resized to fit various device sizes.
- Keep text within bounds :: ensure that all text in your Web Story is visible to the reader. Avoid burned in text; by not using burned in text, you prevent text from overflowing when it gets resized to fit various device sizes.
- Use animations mindfully :: bring your stories to life with animations. Avoid distracting or repetitive animations which can cause fatigue.
- Shorten video length :: we recommend videos that are less than 15 seconds per page, or 60 seconds maximum.

*** SEO
- Keep the title short :: keep titles shorter than 90 characters. We recommend using a descriptive title that is shorter than 70 characters.
- Include alt text on images :: we recommend including alt text on your images to improve your story's discoverability.

** Best practices for HTML tags
*** meta tags
**** Definition
[[meta]] tags are HTML tags used to provide additional information about a page to search engines and other clients. Clients process the ~meta~ tags and ignore those they don't support. ~meta~ tags are added to the ~<head>~ section of your HTML page and generally look like this:

#+begin_src html

  <!DOCTYPE html>
  <html>
    <head>
      <meta charset="utf-8">
      <meta name="description" content="Author: A.N. Author, Illustrator: P. Picture, Category: Books, Price:  £9.24, Length: 784 pages">
      <meta name="google-site-verification" content="+nxGUDJ4QpAZ5l9Bsjdi102tLVC21AIh5d1Nl23908vVuFHs34=">
      <title>Example Books - high-quality used books for children</title>
      <meta name="robots" content="noindex,nofollow">
    </head>
  </html>

#+end_src

**** Use quality descriptions
Make sure your descriptions are truly descriptive. Because meta descriptions aren't displayed in the pages the user sees, it's easy to let this content slide. But high-quality descriptions can be displayed in Google's search results, and can go a long way to improving the quality and quantity of your search traffic.

#+begin_src html

  <!-- Bad (list of keywords): -->
  <meta name="description" content="Sewing supplies, yarn, colored pencils,
                                    sewing machines, threads, bobbins,needles">
  <!-- Better (explains what shop sells and details as open hours and location): -->
  <meta name="description" content="Get everything you need to sew your next
                                    garment. Open Monday-Friday 8-5pm, located
                                    in the Fashion District.">


  <!-- Bad (same description used for every news article): -->
  <meta name="description" content="Local news in Whoville, delivered to your
                                    doorstep. Find out what happened today.">
  <!-- Better (uses a snippet from the specific news article): -->
  <meta name="description" content="Upsetting the small town of Whoville, a
                                    local elderly man steals everyone' presents
                                    the night before an important event. Stay
                                    tuned for live updates on the matter.">


  <!-- Bad (doesn't summarize the page): -->
  <meta name="description" content="Eggs are a source of joy in everyone' life.
                                    When I was a small child,I remember picking
                                    eggs from the hen house and bringing them
                                    to the kitchen. Those were the days.">
  <!-- Better (summarizes the whole page): -->
  <meta name="description" content="Learn how to cook eggs with this complete
                                    guide in 1 hour or less. We cover all the
                                    methods, including: over-easy,sunny side
                                    up, boiled, and poached.">


  <!-- Bad (too short): -->
  <meta name="description" content="Mechanical pencil">
  <!-- Better (specific and detailed): -->
  <meta name="description" content="Self-sharpening mechanical pencil that
                                    autocorrects your penmanship. Includes
                                    2B auto-replenishing lead. Available in
                                    both Vintage Pink and Schoolbus Yellow.
                                    Order 50+ pencils, get free shipping.">

#+end_src

**** Include relevant information in the description
The meta description doesn't just have to be in sentence format; it's also a great place to include information about the page. For example, news or blog postings can list the author, date of publication, or byline information. This can give potential visitors very relevant information that might not be displayed in the [[Snippet][snippet]] otherwise. Similarly, product pages might have the key bits of information—price, age, manufacturer—scattered throughout a page. A good meta description can bring all this data together.

#+begin_src html

  <!--This meta description provides detailed information about a book, and -->
  <!-- information is clearly tagged and separated: -->
  <meta name="description" content="Written by A.N. Author, Illustrated by V.
                                    Gogh, Price: $17.99, Length: 784 pages">

#+end_src

**** Define a favicon to show in search results
Add a [[link][<link>]] tag to the header of your home page with the following syntax:

#+begin_src html

  <link rel="icon" href="/path/to/favicon.ico">

#+end_src

*** Create unique, accurate page titles
A [[title][<title>]] element tells both users and search engines what the topic of a particular page is. Place the ~<title>~ element within the ~<head>~ element of the HTML document, and create unique title text for each page on your site.

Identical or similar descriptions on every page of a site aren't helpful when individual pages appear in search results. Wherever possible, create descriptions that accurately describe the specific page. Use site-level descriptions on the main home page or other aggregation pages, and use page-level descriptions everywhere else.

A title link is the title of a search result on Google Search and other properties (for example, Google News) that links to the web page. Google uses a number of different sources to automatically determine the title link, but you can indicate your preferences by following our best practices for influencing title links.

- Make it clear which text is the main title for the page. Google looks at various sources when creating title links, including the main visual title, heading elements, and other large and prominent text, and it can be confusing if multiple headings carry the same visual weight and prominence. Consider ensuring that your main title is distinctive from other text on a page and stands out as being the most prominent on the page (for example, using a larger font, putting the title text in the first visible [[h1-h6][<h1>]] element on the page, etc).
- Make sure every page on your site has a title specified in the ~<title>~ element.
- Write descriptive and concise text for your ~<title>~ elements. Avoid vague descriptors like "Home" for your home page, or "Profile" for a specific person's profile.
- Avoid unnecessarily long or verbose text in your ~<title>~ elements. While there's no limit on how long a ~<title>~ element can be, the title link is truncated in Google Search results as needed, typically to fit the device width.

#+begin_src html

  <head>
    <title>Brandon's Baseball Cards - Buy Cards, Baseball News, Card Prices</title>
    <meta name="description" content="Brandon's Baseball Cards provides a large
                                     selection of vintage and modern baseball
                                     cards for sale.We also offer daily baseball
                                     news and events.">
  </head>

#+end_src

*** Write good anchor text
Good anchor text is descriptive, reasonably concise, and relevant to the page that it's on and to the page it links to. It provides context for the link, and sets the expectation for your readers. The better your anchor text, the easier it is for people to navigate your site and for Google to understand what the page you're linking to is about.

*Tip*: Try reading only the anchor text (out of context) and check if it's specific enough to make sense by itself. If you don't know what the page could be about, you need more descriptive anchor text.

#+begin_src html

  <!-- Bad (too generic): -->
  Learn more about our cheese on our <a href="https://example.com">website</a>.
  <a href="https://example.com">Click here</a> to learn more.
  <!-- Better (more descriptive): -->
  For a full list of cheese available for purchase, see
  the <a href="https://example.com">list of cheese types</a>.


  <!-- Bad (weirdly long): -->
  Starting next Tuesday, the <a href="https://example.com">Knitted Cow invites
    local residents of Wisconsin to their grand re-opening by also offering
    complimentary cow-shaped ice sculptures</a> to the first 20 customers.
  <!-- Better (more concise): -->
  Starting next Tuesday, the <a href="https://example.com">Knitted Cow invites
    local residents of Wisconsin</a> to their grand re-opening by also offering
  complimentary cow-shaped ice sculptures to the first 20 customers.


  <!-- Bad (too many links next to each other): -->
  I've written about cheese <a href="https://example.com/page1">so</a>
  <a href="https://example.com/page2">many</a>
  <a href="https://example.com/page3">times</a>
  <a href="https://example.com/page4">this</a>
  <a href="https://example.com/page5">year</a>.
  <!-- Better (links are spaced out with context): -->
  I've written about cheese so many times this year: who can forget the
  <a href="https://example.com/blue-cheese-vs-gorgonzola">controversy over blue
    cheese and gorgonzola</a>, the <a href="https://example.com/worlds-oldest-brie">
    world's oldest brie</a> piece that won the Cheesiest Research Medal, the epic
  retelling of <a href="https://example.com/the-lost-cheese">The Lost Cheese</a>,
  and my personal favorite, <a href="https://example.com/boy-and-his-cheese">A
    Boy and His Cheese: a story of two unlikely friends</a>.


#+end_src

*** Images
**** Semantic HTML for images
Using semantic HTML markup helps crawlers find and process images. Google parses the HTML [[img][<img>]] elements (even when they're enclosed in other elements such as ~<picture>~ elements) in your pages to index images, but doesn't index CSS images.

#+begin_src html

  <!-- Bad: -->
  <div style="background-image:url(puppy.jpg)">A golden retriever puppy</div>

  <!-- Good: -->
  <img src="puppy.jpg" alt="A golden retriever puppy" />

#+end_src

**** Appropriate *text alternatives* based on the purpose of the image
***** Informative Images
****** Brief
[[https://www.w3.org/WAI/tutorials/images/][W3 Images Tutorial]]
Informative images convey a simple concept or information that can be expressed in a short phrase or sentence. The text alternative should convey the meaning or content that is displayed visually, which typically isn’t a literal description of the image.

In some situations a detailed literal description may be needed, but only when the content of the image is all or part of the conveyed information. Whether to treat an image as informative or decorative is a judgment that authors make, based on the reason for including the image on the page.

****** Images used to label other information
This example shows two image icons – one of a telephone, one of a fax machine. A phone number follows each image. Consistent with the visual presentation, the text alternatives “Telephone:” and “Fax:” are used to identify the device associated with each number.

#+begin_src html

  <p>
    <img src="phone.png" alt="Telephone:"> 0123 456 7890
  </p>
  <p>
    <img src="fax.png" alt="Fax:"> 0123 456 7891
  </p>

#+end_src

****** Images used to supplement other information
The following image shows a dog wearing a bell. It supplements the adjacent text that explains the purpose of this bell. A short text alternative is sufficient to describe the information that is displayed visually but is not explained in the text; in this case, the text alternative is “Dog with a bell attached to its collar.”.

#+begin_src html

  <p>
    <img src="dog.jpg" alt="Dog with a bell attached to its collar.">
    Off-duty guide dogs often wear ...
  </p>
  <!--If the text included an explanation of how the dog wears a bell, -->
  <!--the image might be considered redundant and therefore decorative.As -->
  <!-- this isn’t mentioned in the text, the image is deemed to be -->
  <!-- informative. -->

#+end_src

****** Images conveying an impression or emotion
This photograph shows a happy family group. It’s a stock image so the individuals should not be identified. It’s being used to give the impression that the website or the company it represents is family-friendly. The text alternative is “We’re family-friendly” as this best describes the intended impression.

#+begin_src html

  <img src="family.jpg" alt="We’re family-friendly. ">
  <!-- If the purpose of this image were simply to improve the look of -->
  <!-- a page rather than convey an impression, it could be deemed to be -->
  <!-- decorative, as shown in 'Decorative Images: Image used for -->
  <!-- ambiance'. -->

#+end_src

****** Images conveying file format
In this example, a document is available to download in three different formats identified by format icons within text links. They have the text alternatives 'HTML', 'Word document', and 'PDF' to distinguish the file type for each link:

#+begin_src html

  <p>
    <a href="…">
      2012 Annual report and accounts
      <img src="html5logo.png" alt="HTML" > (43KB)
    </a>, also available in
    <a href="…">
      <img src="worddocument.png" alt="Word document"> (254KB)
    </a>
    or
    <a href="…">
      <img src="pdfdocument.png" alt="PDF"> (353KB)
    </a>
    format.
  </p>
  <!-- If the format identification were written as part of the link -->
  <!--text,the image might be considered decorative and have a null(empty -->
  <!--alt attribute(alt="").It could remain in the same link element(<a>) -->
  <!--as the text,to include it in the clickable area. Further discussion -->
  <!-- is provided in “Functional Images: Logo image within link text”. -->
  <!-- This particular example is similar to the Functional Images: icon -->
  <!--within linked text in that the image conveys information that isn’t -->
  <!-- given in the link text. -->

#+end_src

***** Decorative Images
****** Brief
Decorative images don’t add information to the content of a page. For example, the information provided by the image might already be given using adjacent text, or the image might be included to make the website more visually attractive.

In these cases, a null (empty) [[alt]] text should be provided ( ~alt=""~ ) so that they can be ignored by assistive technologies, such as screen readers. Text values for these types of images would add audible clutter to screen reader output or could distract users if the topic is different from that in adjacent text. Leaving out the ~alt~ attribute is also not an option because when it is not provided, some screen readers will announce the file name of the image instead.

*Note*: Where possible, decorative images should be provided using CSS background images instead.

****** Image used as part of page design
This image is used as a border in the page design and has a purely decorative purpose.

#+begin_src html

  <img src="topinfo_bg.png" alt="">
  <!-- If the image was used to indicate a thematic break, e.g. a scene -->
  <!--change in a story, or a transition to another topic, using the <hr> -->
  <!-- element would be appropriate to notify assistive technology. -->

#+end_src

****** Decorative image as part of a text link
This illustration of a crocus bulb is used to make the link easier to identify and to increase the clickable area but doesn’t add to the information already provided in the adjacent link text (of the same anchor). In this case, use a null (empty) alt value for the image.

#+begin_src html

  <a href="crocuspage.html">
    <img src="crocus.jpg" alt="">
    <strong> Crocus bulbs</strong>
  </a>

#+end_src

****** Image with adjacent text alternative
This picture of a sleeping dog is already sufficiently described by the adjacent text. There is no need to repeat this information, and a null (empty) alt value can be used for this image.

#+begin_src html

  <p>
    <img src="sleepingdog.jpg" alt="">
    <strong>Let sleeping dogs lie:</strong> ...
  </p>

#+end_src

****** Image used for ambiance (eye-candy)
This image is used only to add ambiance or visual interest to the page.

#+begin_src html

  <img src="tropical.jpg" alt="">
  <!-- If the purpose of this image was to identify a plant or convey -->
  <!--other information,rather than just to improve the look of the page, -->
  <!--it should probably be treated as informative. The author determines -->
  <!-- the purpose for the use of the image. -->

#+end_src

***** Functional Images
****** Brief
Functional images are used to initiate actions rather than to convey information. They are used in buttons, links, and other interactive elements. The text alternative for the image should convey the action that will be initiated (the purpose of the image), rather than a description of the image.

For instance, the text alternative should be “print this page” rather than “(image of a) printer”, “search” rather than “magnifying lens” or “Example.com homepage” rather than “Example.com logo”.

****** Image used alone as a linked logo
The following image is the only content of a link that leads to the W3C home page.

#+begin_src html

  <a href="https://www.w3.org/">
    <img src="w3c.png" alt="W3C home">
  </a>

#+end_src

****** Icon image conveying information within link text
In this example, the image follows text within a link to inform users that the link will open in a new window. It has the text alternative “new window” to convey the meaning of the icon:

#+begin_src html

  <a href="https://www.w3.org/" target="_blank">
    W3C Homepage <img src="new-window.png" alt="new window">
  </a>

#+end_src

****** Stand-alone icon image that has a function
The following image is an icon representing a printer to denote print functionality. It has the text alternative “Print this page” because its purpose is to activate the print dialog when it is selected:

#+begin_src html

  <a href="javascript:print()">
    <img src="print.png" alt="Print this page">
  </a>

#+end_src

****** Image used in a button
The following image is used to give the button a distinct style. In this case, it is the button to initiate a search request and is an icon representing a magnifying lens. The text alternative for the image is “search” to convey the purpose of the button:

#+begin_src html

  <input type="image" src="searchbutton.png" alt="Search">

#+end_src

****** Anoher example

#+begin_src html

  alt="Welcome to the Web Design Group"
  <!-- is more useful to those not loading images than -->
  alt="Web Design Group logo".

  <!-- When images are alongside text or other images, some form of -->
  <!-- separation may be necessary, such as -->
  alt=" [Photograph of me] " <!-- or --> alt="Web Design Group ~"

#+end_src

***** Images of Text
Images of text display text that is intended to be read. With the current CSS capabilities in most web browsers, it is good design practice to use actual text that is styled with CSS rather than image-based text presentation. Genuine text is much more flexible than images: It can be resized without losing clarity, and background and text colors can be modified to suit the reading preferences of users. Images are more likely to distort and pixelate when resized. In those rare situations where images of text must be used, the text alternative must contain the same text presented in the image.

*Image of text used as an unlinked logo*
The following image is the logo for the Web Accessibility Initiative. It is not part of a link, so the text alternative is “Web Accessibility Initiative”. There’s no need to mention that it is a logo.

#+begin_src html

  <img src="wai.png" alt="Web Accessibility initiative">
  <!-- Note: If this logo were linked then it would become a functional image.  -->

#+end_src

***** Complex Images
****** Brief
Complex images contain substantial information – more than can be conveyed in a short phrase or sentence. These are typically:

- graphs and charts, including flow charts and organizational charts;
- diagrams and illustrations where the page text relies on the user being able to understand the image;
- maps showing locations or other information such as weather systems.

In these cases, a two-part text alternative is required. The first part is the short description to identify the image and, where appropriate, indicate the location of the long description. The second part is the long description – a textual representation of the essential information conveyed by the image.

****** Groups of Images
Sometimes groups of images are used together to represent one piece of information. For example, a collection of star icons that together represent a rating. In this case, only one of the images needs a text alternative to describe the entire collection, while the other images have a null (empty) [[alt]] attribute so that they are ignored by assistive technology.

In other cases, a group of images may represent a collection of related images. For example, showing a collection of art impressions that are thematically related. In this case, each image needs its text alternative that describes it individually, as well as its relationship within the group.



#+begin_src html

  <!-- Multiple images conveying a single piece of information -->

  <!--This group of five images combined shows a product rating.There are -->
  <!--five images (three filled stars, one half-filled star and one empty -->
  <!-- star) indicating the overall rating. -->
  Rating:
  <img src="star-full.jpg"  alt="3.5 out of 5 stars">
  <img src="star-full.jpg"  alt="">
  <img src="star-full.jpg"  alt="">
  <img src="star-half.jpg"  alt="">
  <img src="star-empty.jpg" alt="">

#+end_src

****** Image Maps
A client-side image map is an image divided into selectable regions defined by ~<area>~ elements (“hotspots”) that allow user interaction. Usually, the selectable regions are links to other pages. For image maps, text alternatives are needed on both the ~<img>~ element itself (to convey the informative context) and on each of the ~<area>~ elements (to convey the link destination or the action that will be initiated if the link is followed).

**** Responsive images
***** Brief
Designing responsive web pages leads to better user experience, since users use them across a plethora of device types.

Web pages use the ~<picture>~ element or the ~srcset~ attribute of an [[img]] element to specify responsive images. However, some browsers and crawlers do not understand these attributes. We recommend that you always specify a fallback URL via the ~src~ attribute.

***** <img srcset>
The ~srcset~ attribute allows specifying different versions of the same image, specifically for different screen sizes.

#+begin_src html

  <img
    srcset="maine-coon-nap-320w.jpg 320w, maine-coon-nap-480w.jpg 480w,
            maine-coon-nap-800w.jpg 800w"
    sizes="(max-width: 320px) 280px, (max-width: 480px) 440px, 800px"
    src="maine-coon-nap-800w.jpg"
    alt="A watercolor illustration of a maine coon napping leisurely
         in front of a fireplace">

#+end_src

***** <picture>
The ~<picture>~ element is a container that is used to group different ~<source>~ versions of the same image. It offers a fallback approach so the browser can choose the right image depending on device capabilities, like pixel density and screen size. The picture element also comes in handy for using new image formats with built-in graceful degradation for clients that may not yet support the new formats.

Per section 4.8.1 of the HTML Standard, make sure that you provide an ~img~ element as a fallback with a ~src~ attribute when using the picture element using the following format:

#+begin_src html

  <picture>
    <source type="image/svg+xml" srcset="pyramid.svg">
    <source type="image/webp" srcset="pyramid.webp">
    <img src="pyramid.png" alt="An 1800s oil painting of The Great Pyramid">
  </picture>

#+end_src

*** Provide date information to Google and page
Add a user-visible date to the page and feature it prominently. Label your dates appropriately with text like "Publish" or "Last updated". Here are some examples of how you can highlight date information about a web page:

Posted Feb 4, 2019  or  Published February 4, 2019
Last updated: Feb 14, 2018  or  Updated Feb 14, 2019 8pm ET

#+begin_src html

  <html>
    <head>
      <title>Analyzing Google Search traffic drops</title>
    </head>
    <body>
      <p>
        Posted Tuesday, July 20, 2021
      </p>
      <p>
        Suppose you open Search Console and find out that your Google
        Search traffic dropped. What should you do?
      </p>
    </body>
  </html>

#+end_src

** Tools for SEO
*** Core Web Vitals workflows with Google tools
Para empezar a optimizar la experiencia del usuario con Core Web Vitals, pruebe el siguiente flujo de trabajo:

- Utilice el nuevo [[https://search.google.com/search-console/about][Core Web Vitals Report]] de Search Console para *identificar los grupos de páginas que requieren atención* (según los datos de campo (field data)). Obtiene un resumen del rendimiento de sus orígenes en el campo.
- Una vez que haya identificado las páginas que necesitan atención, utilice [[https://pagespeed.web.dev/][PageSpeed Insights]] (impulsado por Lighthouse y Chrome UX Report) para *diagnosticar problemas de laboratorio y de campo* en una página. PageSpeed Insights (PSI) está disponible por medio de Search Console o puede introducir una URL directamente en PSI.
- ¿Está listo para optimizar su sitio localmente en el laboratorio? Utilice [[https://github.com/GoogleChrome/lighthouse][Lighthouse]]  y [[https://developer.chrome.com/docs/devtools/][Chrome DevTools]]  para *medir* [[Core Web Vitals]] y obtenga una orientación práctica sobre qué corregir exactamente. La extensión de Chrome Web Vitals puede brindarle una visión en tiempo real de las métricas en el escritorio.
- ¿Necesita un panel de control personalizado de Core Web Vitals? Utilice el panel de control actualizado de /CrUX/ o la nueva /API de Chrome UX/ Report para los datos de campo o la API de PageSpeed Insights para los datos de laboratorio.
- Pruebe la nueva /API de Chrome User Experience Report/ para *acceder fácilmente a los resultados de su origen y su URL* con respecto a Core Web Vitals durante los últimos 28 días.
- Utilice la sección y el pie de página de Experiencia en el panel de Rendimiento de /DevTools/ para profundizar y *depurar* contra Core Web Vitals específicos.
- Utilice la extensión Web Vitals para realizar un *seguimiento del rendimiento* de una página con respecto a Core Web Vitals *en tiempo real*.
- ¿Busca orientación? [[https://web.dev/measure/][web.dev/measure]] puede *medir su página y mostrarle un conjunto priorizado de normas y laboratorios de código* para la optimización, utilizando datos de PageSpeed Insights (PSI).
- Por último, utilice *Lighthouse CI* en las solicitudes de extracción para *asegurarse de que no haya regresiones* en Core Web Vitals antes de implementar un cambio en la producción.

- Lab data :: describes how hypothetical users may experience your website. (Herramientas de laboratorio)
- Field data :: describes how real users actually experienced your website. Field data is also known as Real User Monitoring (RUM). (Herramientas de campo)
- Search Console :: el nuevo Core Web Vitals Report en Search Console le ayuda a identificar grupos de páginas de su sitio que requieren atención, según los datos del mundo real (de campo) de CrUX. El rendimiento de las URL se agrupa por estado, tipo de métrica y grupo de URL (grupos de páginas web similares).
- PageSpeed Insights :: pagespeed Insights (PSI) reporta sobre el rendimiento de laboratorio y de campo de una página en dispositivos móviles y equipos de escritorio. La herramienta proporciona una visión general de cómo los usuarios del mundo real experimentan la página (impulsada por Chrome UX Report) y un conjunto de recomendaciones prácticas sobre cómo el propietario de un sitio puede mejorar la experiencia de la página (proporcionada por Lighthouse).
- Lighthouse :: lighthouse es una herramienta automatizada de auditoría de sitios web que ayuda a que los desarrolladores diagnostiquen problemas e identifiquen oportunidades para mejorar la experiencia del usuario de sus sitios. Mide varias dimensiones de la calidad de la experiencia del usuario en un entorno de laboratorio, incluyendo el rendimiento y la accesibilidad.
- CrUX :: chrome UX Report (CrUX) es un conjunto de datos públicos sobre la experiencia real del usuario en millones de sitios web. Mide las versiones de campo de todas las Core Web Vitals. A diferencia de los datos de laboratorio, los datos de CrUX provienen de usuarios que han optado por participar en el campo.

*** Mobile-friendly
The page is mobile-friendly. Check if your page is mobile-friendly https://search.google.com/test/mobile-friendly

** Guidelines for SEO
1. [[Page experience signals]]
2. [[Best practices for web content]]
3. [[Best practices for HTML tags]]

** Glossary
*** Index
Google stores all web pages that it knows about in its index. The index entry for each page describes the content and location (URL) of that page.

*** To index
Is when Google fetches a page, reads it, and adds it to the [[Index][index]]: Google indexed several pages on my site today.

*** Crawl
The process of looking for new or updated web pages. Google discovers URLs by following links, by reading sitemaps, and by many other means. Google crawls the web, looking for new pages, then indexes them (when appropriate).

*** Crawler
Automated software that [[Crawl][crawls]] (fetches) pages from the web and indexes them.

*** Googlebot
The generic name of Google's [[Crawler][crawler]]. Googlebot crawls the web constantly.

*** Snippet
A snippet is the description or summary part of search result on Google Search and other properties. Google uses a number of different sources to automatically determine the appropriate snippet, including descriptive information in the meta description tag for each page. We may also use information found on the page, or create rich results based on markup and content on the page.

*** Robots.txt
Use robots.txt rules to prevent crawling, and sitemaps to encourage crawling. Block crawling of duplicate content on your site, or unimportant resources (such as small, frequently used graphics such as icons or logos) that might overload your server with requests. Don't use robots.txt as a mechanism to prevent indexing; use the noindex tag or login requirements for that.

*** Breadcrumb
Is a row of internal links at the top or bottom of the page that allows visitors to quickly navigate back to a previous section or the root page.

*** Sitemaps
Is a file on your site where you provide information about the pages, videos, and other files on your site, and the relationships between them. Sitemaps are a very important way to tell Google which pages are important to your site, and also provide additional information (such as update frequency), and are very important for crawling non-textual content (such as images or video). Although Google won't limit crawling to pages listed in your sitemaps, it will prioritize crawling these pages. This is especially important for sites with rapidly changing content, or with pages that might not be discovered through links.

*** Sitelinks
Are links from the same domain that are clustered together under a web result.

*** Canonical
Is the page that may be shown in search results.

*** Rich results
Adding structured data can enable search results that are more engaging to users and might encourage them to interact more with your website, which are called rich results.

*** Byline
Is the date that Google estimates that the web page was updated or published.

* References
- [[https://developer.mozilla.org][MDN]]
- [[https://www.w3schools.com][W3]]
- [[https://es.wikipedia.org][Wikipedia]]
- [[https://javascript.info/][Javascript.Info]]
- [[https://developers.google.com/search/docs/fundamentals/get-on-google][Google SEO fundamentals]]
- [[https://conclase.net][Con Clase]]
